{"dependencies":[{"name":"./XMLHttpRequest","data":{"asyncType":null,"locs":[{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}},{"start":{"line":12,"column":23,"index":244},"end":{"line":12,"column":50,"index":271}}],"key":"O+JY6tQeHsIWY50GgaFx/xvik0k="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   */\n\n  'use strict';\n\n  var originalXHROpen = _$$_REQUIRE(_dependencyMap[0], \"./XMLHttpRequest\").prototype.open;\n  var originalXHRSend = _$$_REQUIRE(_dependencyMap[0], \"./XMLHttpRequest\").prototype.send;\n  var originalXHRSetRequestHeader = _$$_REQUIRE(_dependencyMap[0], \"./XMLHttpRequest\").prototype.setRequestHeader;\n  var openCallback;\n  var sendCallback;\n  var requestHeaderCallback;\n  var headerReceivedCallback;\n  var responseCallback;\n  var _isInterceptorEnabled = false;\n\n  /**\n   * A network interceptor which monkey-patches XMLHttpRequest methods\n   * to gather all network requests/responses, in order to show their\n   * information in the React Native inspector development tool.\n   * This supports interception with XMLHttpRequest API, including Fetch API\n   * and any other third party libraries that depend on XMLHttpRequest.\n   */\n  var XHRInterceptor = {\n    /**\n     * Invoked before XMLHttpRequest.open(...) is called.\n     */\n    setOpenCallback: function setOpenCallback(callback) {\n      openCallback = callback;\n    },\n    /**\n     * Invoked before XMLHttpRequest.send(...) is called.\n     */\n    setSendCallback: function setSendCallback(callback) {\n      sendCallback = callback;\n    },\n    /**\n     * Invoked after xhr's readyState becomes xhr.HEADERS_RECEIVED.\n     */\n    setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {\n      headerReceivedCallback = callback;\n    },\n    /**\n     * Invoked after xhr's readyState becomes xhr.DONE.\n     */\n    setResponseCallback: function setResponseCallback(callback) {\n      responseCallback = callback;\n    },\n    /**\n     * Invoked before XMLHttpRequest.setRequestHeader(...) is called.\n     */\n    setRequestHeaderCallback: function setRequestHeaderCallback(callback) {\n      requestHeaderCallback = callback;\n    },\n    isInterceptorEnabled: function isInterceptorEnabled() {\n      return _isInterceptorEnabled;\n    },\n    enableInterception: function enableInterception() {\n      if (_isInterceptorEnabled) {\n        return;\n      }\n      // Override `open` method for all XHR requests to intercept the request\n      // method and url, then pass them through the `openCallback`.\n      _$$_REQUIRE(_dependencyMap[0], \"./XMLHttpRequest\").prototype.open = function (method, url) {\n        if (openCallback) {\n          openCallback(method, url, this);\n        }\n        originalXHROpen.apply(this, arguments);\n      };\n\n      // Override `setRequestHeader` method for all XHR requests to intercept\n      // the request headers, then pass them through the `requestHeaderCallback`.\n      _$$_REQUIRE(_dependencyMap[0], \"./XMLHttpRequest\").prototype.setRequestHeader = function (header, value) {\n        if (requestHeaderCallback) {\n          requestHeaderCallback(header, value, this);\n        }\n        originalXHRSetRequestHeader.apply(this, arguments);\n      };\n\n      // Override `send` method of all XHR requests to intercept the data sent,\n      // register listeners to intercept the response, and invoke the callbacks.\n      _$$_REQUIRE(_dependencyMap[0], \"./XMLHttpRequest\").prototype.send = function (data) {\n        var _this = this;\n        if (sendCallback) {\n          sendCallback(data, this);\n        }\n        if (this.addEventListener) {\n          this.addEventListener('readystatechange', function () {\n            if (!_isInterceptorEnabled) {\n              return;\n            }\n            if (_this.readyState === _this.HEADERS_RECEIVED) {\n              var contentTypeString = _this.getResponseHeader('Content-Type');\n              var contentLengthString = _this.getResponseHeader('Content-Length');\n              var responseContentType, responseSize;\n              if (contentTypeString) {\n                responseContentType = contentTypeString.split(';')[0];\n              }\n              if (contentLengthString) {\n                responseSize = parseInt(contentLengthString, 10);\n              }\n              if (headerReceivedCallback) {\n                headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);\n              }\n            }\n            if (_this.readyState === _this.DONE) {\n              if (responseCallback) {\n                responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);\n              }\n            }\n          }, false);\n        }\n        originalXHRSend.apply(this, arguments);\n      };\n      _isInterceptorEnabled = true;\n    },\n    // Unpatch XMLHttpRequest methods and remove the callbacks.\n    disableInterception: function disableInterception() {\n      if (!_isInterceptorEnabled) {\n        return;\n      }\n      _isInterceptorEnabled = false;\n      _$$_REQUIRE(_dependencyMap[0], \"./XMLHttpRequest\").prototype.send = originalXHRSend;\n      _$$_REQUIRE(_dependencyMap[0], \"./XMLHttpRequest\").prototype.open = originalXHROpen;\n      _$$_REQUIRE(_dependencyMap[0], \"./XMLHttpRequest\").prototype.setRequestHeader = originalXHRSetRequestHeader;\n      responseCallback = null;\n      openCallback = null;\n      sendCallback = null;\n      headerReceivedCallback = null;\n      requestHeaderCallback = null;\n    }\n  };\n  module.exports = XHRInterceptor;\n});","lineCount":140,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[11,2,10,0],[11,14,10,12],[13,2,13,0],[13,6,13,6,"originalXHROpen"],[13,21,13,21],[13,24,13,24,"_$$_REQUIRE"],[13,35,13,24],[13,36,13,24,"_dependencyMap"],[13,50,13,24],[13,75,13,39,"prototype"],[13,84,13,48],[13,85,13,49,"open"],[13,89,13,53],[14,2,14,0],[14,6,14,6,"originalXHRSend"],[14,21,14,21],[14,24,14,24,"_$$_REQUIRE"],[14,35,14,24],[14,36,14,24,"_dependencyMap"],[14,50,14,24],[14,75,14,39,"prototype"],[14,84,14,48],[14,85,14,49,"send"],[14,89,14,53],[15,2,15,0],[15,6,15,6,"originalXHRSetRequestHeader"],[15,33,15,33],[15,36,15,36,"_$$_REQUIRE"],[15,47,15,36],[15,48,15,36,"_dependencyMap"],[15,62,15,36],[15,87,15,51,"prototype"],[15,96,15,60],[15,97,15,61,"setRequestHeader"],[15,113,15,77],[16,2,17,0],[16,6,17,4,"openCallback"],[16,18,17,16],[17,2,18,0],[17,6,18,4,"sendCallback"],[17,18,18,16],[18,2,19,0],[18,6,19,4,"requestHeaderCallback"],[18,27,19,25],[19,2,20,0],[19,6,20,4,"headerReceivedCallback"],[19,28,20,26],[20,2,21,0],[20,6,21,4,"responseCallback"],[20,22,21,20],[21,2,23,0],[21,6,23,4,"isInterceptorEnabled"],[21,27,23,24],[21,30,23,27],[21,35,23,32],[23,2,25,0],[24,0,26,0],[25,0,27,0],[26,0,28,0],[27,0,29,0],[28,0,30,0],[29,0,31,0],[30,2,32,0],[30,6,32,6,"XHRInterceptor"],[30,20,32,20],[30,23,32,23],[31,4,33,2],[32,0,34,0],[33,0,35,0],[34,4,36,2,"setOpenCallback"],[34,19,36,17],[34,30,36,2,"setOpenCallback"],[34,45,36,17,"setOpenCallback"],[34,46,36,18,"callback"],[34,54,36,26],[34,56,36,28],[35,6,37,4,"openCallback"],[35,18,37,16],[35,21,37,19,"callback"],[35,29,37,27],[36,4,38,2],[36,5,38,3],[37,4,40,2],[38,0,41,0],[39,0,42,0],[40,4,43,2,"setSendCallback"],[40,19,43,17],[40,30,43,2,"setSendCallback"],[40,45,43,17,"setSendCallback"],[40,46,43,18,"callback"],[40,54,43,26],[40,56,43,28],[41,6,44,4,"sendCallback"],[41,18,44,16],[41,21,44,19,"callback"],[41,29,44,27],[42,4,45,2],[42,5,45,3],[43,4,47,2],[44,0,48,0],[45,0,49,0],[46,4,50,2,"setHeaderReceivedCallback"],[46,29,50,27],[46,40,50,2,"setHeaderReceivedCallback"],[46,65,50,27,"setHeaderReceivedCallback"],[46,66,50,28,"callback"],[46,74,50,36],[46,76,50,38],[47,6,51,4,"headerReceivedCallback"],[47,28,51,26],[47,31,51,29,"callback"],[47,39,51,37],[48,4,52,2],[48,5,52,3],[49,4,54,2],[50,0,55,0],[51,0,56,0],[52,4,57,2,"setResponseCallback"],[52,23,57,21],[52,34,57,2,"setResponseCallback"],[52,53,57,21,"setResponseCallback"],[52,54,57,22,"callback"],[52,62,57,30],[52,64,57,32],[53,6,58,4,"responseCallback"],[53,22,58,20],[53,25,58,23,"callback"],[53,33,58,31],[54,4,59,2],[54,5,59,3],[55,4,61,2],[56,0,62,0],[57,0,63,0],[58,4,64,2,"setRequestHeaderCallback"],[58,28,64,26],[58,39,64,2,"setRequestHeaderCallback"],[58,63,64,26,"setRequestHeaderCallback"],[58,64,64,27,"callback"],[58,72,64,35],[58,74,64,37],[59,6,65,4,"requestHeaderCallback"],[59,27,65,25],[59,30,65,28,"callback"],[59,38,65,36],[60,4,66,2],[60,5,66,3],[61,4,68,2,"isInterceptorEnabled"],[61,24,68,22],[61,35,68,2,"isInterceptorEnabled"],[61,55,68,22,"isInterceptorEnabled"],[61,56,68,22],[61,58,68,25],[62,6,69,4],[62,13,69,11,"isInterceptorEnabled"],[62,34,69,31],[63,4,70,2],[63,5,70,3],[64,4,72,2,"enableInterception"],[64,22,72,20],[64,33,72,2,"enableInterception"],[64,51,72,20,"enableInterception"],[64,52,72,20],[64,54,72,23],[65,6,73,4],[65,10,73,8,"isInterceptorEnabled"],[65,31,73,28],[65,33,73,30],[66,8,74,6],[67,6,75,4],[68,6,76,4],[69,6,77,4],[70,6,78,4,"_$$_REQUIRE"],[70,17,78,4],[70,18,78,4,"_dependencyMap"],[70,32,78,4],[70,57,78,19,"prototype"],[70,66,78,28],[70,67,78,29,"open"],[70,71,78,33],[70,74,78,36],[70,84,78,46,"method"],[70,90,78,52],[70,92,78,54,"url"],[70,95,78,57],[70,97,78,59],[71,8,79,6],[71,12,79,10,"openCallback"],[71,24,79,22],[71,26,79,24],[72,10,80,8,"openCallback"],[72,22,80,20],[72,23,80,21,"method"],[72,29,80,27],[72,31,80,29,"url"],[72,34,80,32],[72,36,80,34],[72,40,80,38],[72,41,80,39],[73,8,81,6],[74,8,82,6,"originalXHROpen"],[74,23,82,21],[74,24,82,22,"apply"],[74,29,82,27],[74,30,82,28],[74,34,82,32],[74,36,82,34,"arguments"],[74,45,82,43],[74,46,82,44],[75,6,83,4],[75,7,83,5],[77,6,85,4],[78,6,86,4],[79,6,87,4,"_$$_REQUIRE"],[79,17,87,4],[79,18,87,4,"_dependencyMap"],[79,32,87,4],[79,57,87,19,"prototype"],[79,66,87,28],[79,67,87,29,"setRequestHeader"],[79,83,87,45],[79,86,87,48],[79,96,87,58,"header"],[79,102,87,64],[79,104,87,66,"value"],[79,109,87,71],[79,111,87,73],[80,8,88,6],[80,12,88,10,"requestHeaderCallback"],[80,33,88,31],[80,35,88,33],[81,10,89,8,"requestHeaderCallback"],[81,31,89,29],[81,32,89,30,"header"],[81,38,89,36],[81,40,89,38,"value"],[81,45,89,43],[81,47,89,45],[81,51,89,49],[81,52,89,50],[82,8,90,6],[83,8,91,6,"originalXHRSetRequestHeader"],[83,35,91,33],[83,36,91,34,"apply"],[83,41,91,39],[83,42,91,40],[83,46,91,44],[83,48,91,46,"arguments"],[83,57,91,55],[83,58,91,56],[84,6,92,4],[84,7,92,5],[86,6,94,4],[87,6,95,4],[88,6,96,4,"_$$_REQUIRE"],[88,17,96,4],[88,18,96,4,"_dependencyMap"],[88,32,96,4],[88,57,96,19,"prototype"],[88,66,96,28],[88,67,96,29,"send"],[88,71,96,33],[88,74,96,36],[88,84,96,46,"data"],[88,88,96,50],[88,90,96,52],[89,8,96,52],[89,12,96,52,"_this"],[89,17,96,52],[90,8,97,6],[90,12,97,10,"sendCallback"],[90,24,97,22],[90,26,97,24],[91,10,98,8,"sendCallback"],[91,22,98,20],[91,23,98,21,"data"],[91,27,98,25],[91,29,98,27],[91,33,98,31],[91,34,98,32],[92,8,99,6],[93,8,100,6],[93,12,100,10],[93,16,100,14],[93,17,100,15,"addEventListener"],[93,33,100,31],[93,35,100,33],[94,10,101,8],[94,14,101,12],[94,15,101,13,"addEventListener"],[94,31,101,29],[94,32,102,10],[94,50,102,28],[94,52,103,10],[94,64,103,16],[95,12,104,12],[95,16,104,16],[95,17,104,17,"isInterceptorEnabled"],[95,38,104,37],[95,40,104,39],[96,14,105,14],[97,12,106,12],[98,12,107,12],[98,16,107,16,"_this"],[98,21,107,20],[98,22,107,21,"readyState"],[98,32,107,31],[98,37,107,36,"_this"],[98,42,107,40],[98,43,107,41,"HEADERS_RECEIVED"],[98,59,107,57],[98,61,107,59],[99,14,108,14],[99,18,108,20,"contentTypeString"],[99,35,108,37],[99,38,108,40,"_this"],[99,43,108,44],[99,44,108,45,"getResponseHeader"],[99,61,108,62],[99,62,108,63],[99,76,108,77],[99,77,108,78],[100,14,109,14],[100,18,109,20,"contentLengthString"],[100,37,109,39],[100,40,110,16,"_this"],[100,45,110,20],[100,46,110,21,"getResponseHeader"],[100,63,110,38],[100,64,110,39],[100,80,110,55],[100,81,110,56],[101,14,111,14],[101,18,111,18,"responseContentType"],[101,37,111,37],[101,39,111,39,"responseSize"],[101,51,111,51],[102,14,112,14],[102,18,112,18,"contentTypeString"],[102,35,112,35],[102,37,112,37],[103,16,113,16,"responseContentType"],[103,35,113,35],[103,38,113,38,"contentTypeString"],[103,55,113,55],[103,56,113,56,"split"],[103,61,113,61],[103,62,113,62],[103,65,113,65],[103,66,113,66],[103,67,113,67],[103,68,113,68],[103,69,113,69],[104,14,114,14],[105,14,115,14],[105,18,115,18,"contentLengthString"],[105,37,115,37],[105,39,115,39],[106,16,116,16,"responseSize"],[106,28,116,28],[106,31,116,31,"parseInt"],[106,39,116,39],[106,40,116,40,"contentLengthString"],[106,59,116,59],[106,61,116,61],[106,63,116,63],[106,64,116,64],[107,14,117,14],[108,14,118,14],[108,18,118,18,"headerReceivedCallback"],[108,40,118,40],[108,42,118,42],[109,16,119,16,"headerReceivedCallback"],[109,38,119,38],[109,39,120,18,"responseContentType"],[109,58,120,37],[109,60,121,18,"responseSize"],[109,72,121,30],[109,74,122,18,"_this"],[109,79,122,22],[109,80,122,23,"getAllResponseHeaders"],[109,101,122,44],[109,102,122,45],[109,103,122,46],[109,105,123,18,"_this"],[109,110,124,16],[109,111,124,17],[110,14,125,14],[111,12,126,12],[112,12,127,12],[112,16,127,16,"_this"],[112,21,127,20],[112,22,127,21,"readyState"],[112,32,127,31],[112,37,127,36,"_this"],[112,42,127,40],[112,43,127,41,"DONE"],[112,47,127,45],[112,49,127,47],[113,14,128,14],[113,18,128,18,"responseCallback"],[113,34,128,34],[113,36,128,36],[114,16,129,16,"responseCallback"],[114,32,129,32],[114,33,130,18,"_this"],[114,38,130,22],[114,39,130,23,"status"],[114,45,130,29],[114,47,131,18,"_this"],[114,52,131,22],[114,53,131,23,"timeout"],[114,60,131,30],[114,62,132,18,"_this"],[114,67,132,22],[114,68,132,23,"response"],[114,76,132,31],[114,78,133,18,"_this"],[114,83,133,22],[114,84,133,23,"responseURL"],[114,95,133,34],[114,97,134,18,"_this"],[114,102,134,22],[114,103,134,23,"responseType"],[114,115,134,35],[114,117,135,18,"_this"],[114,122,136,16],[114,123,136,17],[115,14,137,14],[116,12,138,12],[117,10,139,10],[117,11,139,11],[117,13,140,10],[117,18,141,8],[117,19,141,9],[118,8,142,6],[119,8,143,6,"originalXHRSend"],[119,23,143,21],[119,24,143,22,"apply"],[119,29,143,27],[119,30,143,28],[119,34,143,32],[119,36,143,34,"arguments"],[119,45,143,43],[119,46,143,44],[120,6,144,4],[120,7,144,5],[121,6,145,4,"isInterceptorEnabled"],[121,27,145,24],[121,30,145,27],[121,34,145,31],[122,4,146,2],[122,5,146,3],[123,4,148,2],[124,4,149,2,"disableInterception"],[124,23,149,21],[124,34,149,2,"disableInterception"],[124,53,149,21,"disableInterception"],[124,54,149,21],[124,56,149,24],[125,6,150,4],[125,10,150,8],[125,11,150,9,"isInterceptorEnabled"],[125,32,150,29],[125,34,150,31],[126,8,151,6],[127,6,152,4],[128,6,153,4,"isInterceptorEnabled"],[128,27,153,24],[128,30,153,27],[128,35,153,32],[129,6,154,4,"_$$_REQUIRE"],[129,17,154,4],[129,18,154,4,"_dependencyMap"],[129,32,154,4],[129,57,154,19,"prototype"],[129,66,154,28],[129,67,154,29,"send"],[129,71,154,33],[129,74,154,36,"originalXHRSend"],[129,89,154,51],[130,6,155,4,"_$$_REQUIRE"],[130,17,155,4],[130,18,155,4,"_dependencyMap"],[130,32,155,4],[130,57,155,19,"prototype"],[130,66,155,28],[130,67,155,29,"open"],[130,71,155,33],[130,74,155,36,"originalXHROpen"],[130,89,155,51],[131,6,156,4,"_$$_REQUIRE"],[131,17,156,4],[131,18,156,4,"_dependencyMap"],[131,32,156,4],[131,57,156,19,"prototype"],[131,66,156,28],[131,67,156,29,"setRequestHeader"],[131,83,156,45],[131,86,156,48,"originalXHRSetRequestHeader"],[131,113,156,75],[132,6,157,4,"responseCallback"],[132,22,157,20],[132,25,157,23],[132,29,157,27],[133,6,158,4,"openCallback"],[133,18,158,16],[133,21,158,19],[133,25,158,23],[134,6,159,4,"sendCallback"],[134,18,159,16],[134,21,159,19],[134,25,159,23],[135,6,160,4,"headerReceivedCallback"],[135,28,160,26],[135,31,160,29],[135,35,160,33],[136,6,161,4,"requestHeaderCallback"],[136,27,161,25],[136,30,161,28],[136,34,161,32],[137,4,162,2],[138,2,163,0],[138,3,163,1],[139,2,165,0,"module"],[139,8,165,6],[139,9,165,7,"exports"],[139,16,165,14],[139,19,165,17,"XHRInterceptor"],[139,33,165,31],[140,0,165,32],[140,3]],"functionMap":{"names":["<global>","setOpenCallback","setSendCallback","setHeaderReceivedCallback","setResponseCallback","setRequestHeaderCallback","isInterceptorEnabled","enableInterception","XMLHttpRequest.prototype.open","XMLHttpRequest.prototype.setRequestHeader","XMLHttpRequest.prototype.send","addEventListener$argument_1","disableInterception"],"mappings":"AAA;ECmC;GDE;EEK;GFE;EGK;GHE;EIK;GJE;EKK;GLE;EME;GNE;EOE;oCCM;KDK;gDEI;KFK;oCGI;UCO;WDoC;KHK;GPE;EYG;GZa"}},"type":"js/module"}]}