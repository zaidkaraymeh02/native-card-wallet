{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":85,"column":0,"index":3109}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"../../../RNGestureHandlerModule","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":118},"end":{"line":3,"column":69,"index":187}}],"key":"HKrZDPbCxSQpkTuwNBEzcur/N4c="}},{"name":"./utils","data":{"asyncType":null,"locs":[{"start":{"line":8,"column":0,"index":424},"end":{"line":12,"column":17,"index":530}},{"start":{"line":8,"column":0,"index":424},"end":{"line":12,"column":17,"index":530}},{"start":{"line":8,"column":0,"index":424},"end":{"line":12,"column":17,"index":530}}],"key":"FH4oXkS7WdR5kG0v+Eku8TWcu80="}},{"name":"../../../ghQueueMicrotask","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":0,"index":314},"end":{"line":6,"column":61,"index":375}}],"key":"hrYLKIqWIfT+pKNINxKM7/Pt38o="}},{"name":"../../utils","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":0,"index":188},"end":{"line":4,"column":68,"index":256}},{"start":{"line":4,"column":0,"index":188},"end":{"line":4,"column":68,"index":256}}],"key":"dxL+BeUilKexbwMi0xaswBTAv3A="}},{"name":"../../handlersRegistry","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":60},"end":{"line":2,"column":57,"index":117}}],"key":"pP2b75vhlUpyLI3+QI+xq/8ysKA="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.updateHandlers = updateHandlers;\n  var _RNGestureHandlerModule = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../../../RNGestureHandlerModule\"));\n  function updateHandlers(preparedGesture, gestureConfig, newGestures) {\n    gestureConfig.prepare();\n    for (var i = 0; i < newGestures.length; i++) {\n      var handler = preparedGesture.attachedGestures[i];\n      (0, _$$_REQUIRE(_dependencyMap[2], \"./utils\").checkGestureCallbacksForWorklets)(handler);\n\n      // Only update handlerTag when it's actually different, it may be the same\n      // if gesture config object is wrapped with useMemo\n      if (newGestures[i].handlerTag !== handler.handlerTag) {\n        newGestures[i].handlerTag = handler.handlerTag;\n        newGestures[i].handlers.handlerTag = handler.handlerTag;\n      }\n    }\n\n    // Use queueMicrotask to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n    (0, _$$_REQUIRE(_dependencyMap[3], \"../../../ghQueueMicrotask\").ghQueueMicrotask)(function () {\n      if (!preparedGesture.isMounted) {\n        return;\n      }\n\n      // If amount of gesture configs changes, we need to update the callbacks in shared value\n      var shouldUpdateSharedValueIfUsed = preparedGesture.attachedGestures.length !== newGestures.length;\n      for (var _i = 0; _i < newGestures.length; _i++) {\n        var _handler = preparedGesture.attachedGestures[_i];\n\n        // If the gestureId is different (gesture isn't wrapped with useMemo or its dependencies changed),\n        // we need to update the shared value, assuming the gesture runs on UI thread or the thread changed\n        if (_handler.handlers.gestureId !== newGestures[_i].handlers.gestureId && (newGestures[_i].shouldUseReanimated || _handler.shouldUseReanimated)) {\n          shouldUpdateSharedValueIfUsed = true;\n        }\n        _handler.config = newGestures[_i].config;\n        _handler.handlers = newGestures[_i].handlers;\n        _RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _$$_REQUIRE(_dependencyMap[4], \"../../utils\").filterConfig)(_handler.config, _$$_REQUIRE(_dependencyMap[2], \"./utils\").ALLOWED_PROPS, (0, _$$_REQUIRE(_dependencyMap[2], \"./utils\").extractGestureRelations)(_handler)));\n        (0, _$$_REQUIRE(_dependencyMap[5], \"../../handlersRegistry\").registerHandler)(_handler.handlerTag, _handler, _handler.config.testId);\n      }\n      if (preparedGesture.animatedHandlers && shouldUpdateSharedValueIfUsed) {\n        var newHandlersValue = preparedGesture.attachedGestures.filter(function (g) {\n          return g.shouldUseReanimated;\n        }) // Ignore gestures that shouldn't run on UI\n        .map(function (g) {\n          return g.handlers;\n        });\n        preparedGesture.animatedHandlers.value = newHandlersValue;\n      }\n      (0, _$$_REQUIRE(_dependencyMap[4], \"../../utils\").scheduleFlushOperations)();\n    });\n  }\n});","lineCount":57,"map":[[7,2,3,0],[7,6,3,0,"_RNGestureHandlerModule"],[7,29,3,0],[7,32,3,0,"_interopRequireDefault"],[7,54,3,0],[7,55,3,0,"_$$_REQUIRE"],[7,66,3,0],[7,67,3,0,"_dependencyMap"],[7,81,3,0],[8,2,14,7],[8,11,14,16,"updateHandlers"],[8,25,14,30,"updateHandlers"],[8,26,15,2,"preparedGesture"],[8,41,15,39],[8,43,16,2,"gestureConfig"],[8,56,16,46],[8,58,17,2,"newGestures"],[8,69,17,28],[8,71,18,2],[9,4,19,2,"gestureConfig"],[9,17,19,15],[9,18,19,16,"prepare"],[9,25,19,23],[9,26,19,24],[9,27,19,25],[10,4,21,2],[10,9,21,7],[10,13,21,11,"i"],[10,14,21,12],[10,17,21,15],[10,18,21,16],[10,20,21,18,"i"],[10,21,21,19],[10,24,21,22,"newGestures"],[10,35,21,33],[10,36,21,34,"length"],[10,42,21,40],[10,44,21,42,"i"],[10,45,21,43],[10,47,21,45],[10,49,21,47],[11,6,22,4],[11,10,22,10,"handler"],[11,17,22,17],[11,20,22,20,"preparedGesture"],[11,35,22,35],[11,36,22,36,"attachedGestures"],[11,52,22,52],[11,53,22,53,"i"],[11,54,22,54],[11,55,22,55],[12,6,23,4],[12,10,23,4,"checkGestureCallbacksForWorklets"],[12,40,23,4],[12,41,23,4,"checkGestureCallbacksForWorklets"],[12,84,23,36],[12,86,23,37,"handler"],[12,93,23,44],[12,94,23,45],[14,6,25,4],[15,6,26,4],[16,6,27,4],[16,10,27,8,"newGestures"],[16,21,27,19],[16,22,27,20,"i"],[16,23,27,21],[16,24,27,22],[16,25,27,23,"handlerTag"],[16,35,27,33],[16,40,27,38,"handler"],[16,47,27,45],[16,48,27,46,"handlerTag"],[16,58,27,56],[16,60,27,58],[17,8,28,6,"newGestures"],[17,19,28,17],[17,20,28,18,"i"],[17,21,28,19],[17,22,28,20],[17,23,28,21,"handlerTag"],[17,33,28,31],[17,36,28,34,"handler"],[17,43,28,41],[17,44,28,42,"handlerTag"],[17,54,28,52],[18,8,29,6,"newGestures"],[18,19,29,17],[18,20,29,18,"i"],[18,21,29,19],[18,22,29,20],[18,23,29,21,"handlers"],[18,31,29,29],[18,32,29,30,"handlerTag"],[18,42,29,40],[18,45,29,43,"handler"],[18,52,29,50],[18,53,29,51,"handlerTag"],[18,63,29,61],[19,6,30,4],[20,4,31,2],[22,4,33,2],[23,4,34,2],[24,4,35,2],[25,4,36,2],[25,8,36,2,"ghQueueMicrotask"],[25,38,36,2],[25,39,36,2,"ghQueueMicrotask"],[25,84,36,18],[25,86,36,19],[25,98,36,25],[26,6,37,4],[26,10,37,8],[26,11,37,9,"preparedGesture"],[26,26,37,24],[26,27,37,25,"isMounted"],[26,36,37,34],[26,38,37,36],[27,8,38,6],[28,6,39,4],[30,6,41,4],[31,6,42,4],[31,10,42,8,"shouldUpdateSharedValueIfUsed"],[31,39,42,37],[31,42,43,6,"preparedGesture"],[31,57,43,21],[31,58,43,22,"attachedGestures"],[31,74,43,38],[31,75,43,39,"length"],[31,81,43,45],[31,86,43,50,"newGestures"],[31,97,43,61],[31,98,43,62,"length"],[31,104,43,68],[32,6,45,4],[32,11,45,9],[32,15,45,13,"i"],[32,17,45,14],[32,20,45,17],[32,21,45,18],[32,23,45,20,"i"],[32,25,45,21],[32,28,45,24,"newGestures"],[32,39,45,35],[32,40,45,36,"length"],[32,46,45,42],[32,48,45,44,"i"],[32,50,45,45],[32,52,45,47],[32,54,45,49],[33,8,46,6],[33,12,46,12,"handler"],[33,20,46,19],[33,23,46,22,"preparedGesture"],[33,38,46,37],[33,39,46,38,"attachedGestures"],[33,55,46,54],[33,56,46,55,"i"],[33,58,46,56],[33,59,46,57],[35,8,48,6],[36,8,49,6],[37,8,50,6],[37,12,51,8,"handler"],[37,20,51,15],[37,21,51,16,"handlers"],[37,29,51,24],[37,30,51,25,"gestureId"],[37,39,51,34],[37,44,51,39,"newGestures"],[37,55,51,50],[37,56,51,51,"i"],[37,58,51,52],[37,59,51,53],[37,60,51,54,"handlers"],[37,68,51,62],[37,69,51,63,"gestureId"],[37,78,51,72],[37,83,52,9,"newGestures"],[37,94,52,20],[37,95,52,21,"i"],[37,97,52,22],[37,98,52,23],[37,99,52,24,"shouldUseReanimated"],[37,118,52,43],[37,122,52,47,"handler"],[37,130,52,54],[37,131,52,55,"shouldUseReanimated"],[37,150,52,74],[37,151,52,75],[37,153,53,8],[38,10,54,8,"shouldUpdateSharedValueIfUsed"],[38,39,54,37],[38,42,54,40],[38,46,54,44],[39,8,55,6],[40,8,57,6,"handler"],[40,16,57,13],[40,17,57,14,"config"],[40,23,57,20],[40,26,57,23,"newGestures"],[40,37,57,34],[40,38,57,35,"i"],[40,40,57,36],[40,41,57,37],[40,42,57,38,"config"],[40,48,57,44],[41,8,58,6,"handler"],[41,16,58,13],[41,17,58,14,"handlers"],[41,25,58,22],[41,28,58,25,"newGestures"],[41,39,58,36],[41,40,58,37,"i"],[41,42,58,38],[41,43,58,39],[41,44,58,40,"handlers"],[41,52,58,48],[42,8,60,6,"RNGestureHandlerModule"],[42,39,60,28],[42,40,60,29,"updateGestureHandler"],[42,60,60,49],[42,61,61,8,"handler"],[42,69,61,15],[42,70,61,16,"handlerTag"],[42,80,61,26],[42,82,62,8],[42,86,62,8,"filterConfig"],[42,116,62,8],[42,117,62,8,"filterConfig"],[42,144,62,20],[42,146,63,10,"handler"],[42,154,63,17],[42,155,63,18,"config"],[42,161,63,24],[42,163,64,10,"ALLOWED_PROPS"],[42,193,64,10],[42,194,64,10,"ALLOWED_PROPS"],[42,218,64,23],[42,220,65,10],[42,224,65,10,"extractGestureRelations"],[42,254,65,10],[42,255,65,10,"extractGestureRelations"],[42,289,65,33],[42,291,65,34,"handler"],[42,299,65,41],[42,300,66,8],[42,301,67,6],[42,302,67,7],[43,8,69,6],[43,12,69,6,"registerHandler"],[43,42,69,6],[43,43,69,6,"registerHandler"],[43,84,69,21],[43,86,69,22,"handler"],[43,94,69,29],[43,95,69,30,"handlerTag"],[43,105,69,40],[43,107,69,42,"handler"],[43,115,69,49],[43,117,69,51,"handler"],[43,125,69,58],[43,126,69,59,"config"],[43,132,69,65],[43,133,69,66,"testId"],[43,139,69,72],[43,140,69,73],[44,6,70,4],[45,6,72,4],[45,10,72,8,"preparedGesture"],[45,25,72,23],[45,26,72,24,"animatedHandlers"],[45,42,72,40],[45,46,72,44,"shouldUpdateSharedValueIfUsed"],[45,75,72,73],[45,77,72,75],[46,8,73,6],[46,12,73,12,"newHandlersValue"],[46,28,73,28],[46,31,73,31,"preparedGesture"],[46,46,73,46],[46,47,73,47,"attachedGestures"],[46,63,73,63],[46,64,74,9,"filter"],[46,70,74,15],[46,71,74,16],[46,81,74,17,"g"],[46,82,74,18],[47,10,74,18],[47,17,74,23,"g"],[47,18,74,24],[47,19,74,25,"shouldUseReanimated"],[47,38,74,44],[48,8,74,44],[48,10,74,45],[48,11,74,46],[49,8,74,46],[49,9,75,9,"map"],[49,12,75,12],[49,13,75,13],[49,23,75,14,"g"],[49,24,75,15],[50,10,75,15],[50,17,75,20,"g"],[50,18,75,21],[50,19,75,22,"handlers"],[50,27,75,30],[51,8,75,30],[51,10,77,9],[52,8,79,6,"preparedGesture"],[52,23,79,21],[52,24,79,22,"animatedHandlers"],[52,40,79,38],[52,41,79,39,"value"],[52,46,79,44],[52,49,79,47,"newHandlersValue"],[52,65,79,63],[53,6,80,4],[54,6,82,4],[54,10,82,4,"scheduleFlushOperations"],[54,40,82,4],[54,41,82,4,"scheduleFlushOperations"],[54,79,82,27],[54,81,82,28],[54,82,82,29],[55,4,83,2],[55,5,83,3],[55,6,83,4],[56,2,84,0],[57,0,84,1],[57,3]],"functionMap":{"names":["<global>","updateHandlers","ghQueueMicrotask$argument_0","preparedGesture.attachedGestures.filter$argument_0","preparedGesture.attachedGestures.filter.map$argument_0"],"mappings":"AAA;OCa;mBCsB;gBCsC,4BD;aEC,iBF;GDQ;CDC"}},"type":"js/module"}]}