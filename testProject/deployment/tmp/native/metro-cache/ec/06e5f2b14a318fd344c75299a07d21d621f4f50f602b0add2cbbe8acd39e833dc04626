{"dependencies":[{"name":"./TouchHistoryMath","data":{"asyncType":null,"locs":[{"start":{"line":19,"column":2,"index":453},"end":{"line":19,"column":56,"index":507}},{"start":{"line":21,"column":2,"index":557},"end":{"line":21,"column":56,"index":611}},{"start":{"line":23,"column":2,"index":662},"end":{"line":23,"column":57,"index":717}},{"start":{"line":19,"column":2,"index":453},"end":{"line":19,"column":56,"index":507}},{"start":{"line":25,"column":2,"index":768},"end":{"line":25,"column":57,"index":823}},{"start":{"line":21,"column":2,"index":557},"end":{"line":21,"column":56,"index":611}},{"start":{"line":26,"column":25,"index":850},"end":{"line":26,"column":58,"index":883}},{"start":{"line":27,"column":25,"index":910},"end":{"line":27,"column":58,"index":943}}],"key":"1H9zq4S4TT8Rx9bOAmqotJqqR5U="}},{"name":"./InteractionManager","data":{"asyncType":null,"locs":[{"start":{"line":15,"column":27,"index":315},"end":{"line":15,"column":58,"index":346}},{"start":{"line":15,"column":27,"index":315},"end":{"line":15,"column":58,"index":346}}],"key":"ILikFoiGRWiLD9DgAo/WvlXkjQY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  /**\n   * `PanResponder` reconciles several touches into a single gesture. It makes\n   * single-touch gestures resilient to extra touches, and can be used to\n   * recognize simple multi-touch gestures.\n   *\n   * By default, `PanResponder` holds an `InteractionManager` handle to block\n   * long-running JS events from interrupting active gestures.\n   *\n   * It provides a predictable wrapper of the responder handlers provided by the\n   * [gesture responder system](docs/gesture-responder-system.html).\n   * For each handler, it provides a new `gestureState` object alongside the\n   * native event object:\n   *\n   * ```\n   * onPanResponderMove: (event, gestureState) => {}\n   * ```\n   *\n   * A native event is a synthetic touch event with the following form:\n   *\n   *  - `nativeEvent`\n   *      + `changedTouches` - Array of all touch events that have changed since the last event\n   *      + `identifier` - The ID of the touch\n   *      + `locationX` - The X position of the touch, relative to the element\n   *      + `locationY` - The Y position of the touch, relative to the element\n   *      + `pageX` - The X position of the touch, relative to the root element\n   *      + `pageY` - The Y position of the touch, relative to the root element\n   *      + `target` - The node id of the element receiving the touch event\n   *      + `timestamp` - A time identifier for the touch, useful for velocity calculation\n   *      + `touches` - Array of all current touches on the screen\n   *\n   * A `gestureState` object has the following:\n   *\n   *  - `stateID` - ID of the gestureState- persisted as long as there at least\n   *     one touch on screen\n   *  - `moveX` - the latest screen coordinates of the recently-moved touch\n   *  - `moveY` - the latest screen coordinates of the recently-moved touch\n   *  - `x0` - the screen coordinates of the responder grant\n   *  - `y0` - the screen coordinates of the responder grant\n   *  - `dx` - accumulated distance of the gesture since the touch started\n   *  - `dy` - accumulated distance of the gesture since the touch started\n   *  - `vx` - current velocity of the gesture\n   *  - `vy` - current velocity of the gesture\n   *  - `numberActiveTouches` - Number of touches currently on screen\n   *\n   * ### Basic Usage\n   *\n   * ```\n   *   componentWillMount: function() {\n   *     this._panResponder = PanResponder.create({\n   *       // Ask to be the responder:\n   *       onStartShouldSetPanResponder: (evt, gestureState) => true,\n   *       onStartShouldSetPanResponderCapture: (evt, gestureState) => true,\n   *       onMoveShouldSetPanResponder: (evt, gestureState) => true,\n   *       onMoveShouldSetPanResponderCapture: (evt, gestureState) => true,\n   *\n   *       onPanResponderGrant: (evt, gestureState) => {\n   *         // The gesture has started. Show visual feedback so the user knows\n   *         // what is happening!\n   *\n   *         // gestureState.d{x,y} will be set to zero now\n   *       },\n   *       onPanResponderMove: (evt, gestureState) => {\n   *         // The most recent move distance is gestureState.move{X,Y}\n   *\n   *         // The accumulated gesture distance since becoming responder is\n   *         // gestureState.d{x,y}\n   *       },\n   *       onPanResponderTerminationRequest: (evt, gestureState) => true,\n   *       onPanResponderRelease: (evt, gestureState) => {\n   *         // The user has released all touches while this view is the\n   *         // responder. This typically means a gesture has succeeded\n   *       },\n   *       onPanResponderTerminate: (evt, gestureState) => {\n   *         // Another component has become the responder, so this gesture\n   *         // should be cancelled\n   *       },\n   *       onShouldBlockNativeResponder: (evt, gestureState) => {\n   *         // Returns whether this component should block native components from becoming the JS\n   *         // responder. Returns true by default. Is currently only supported on android.\n   *         return true;\n   *       },\n   *     });\n   *   },\n   *\n   *   render: function() {\n   *     return (\n   *       <View {...this._panResponder.panHandlers} />\n   *     );\n   *   },\n   *\n   * ```\n   *\n   * ### Working Example\n   *\n   * To see it in action, try the\n   * [PanResponder example in RNTester](https://github.com/facebook/react-native/blob/HEAD/packages/rn-tester/js/examples/PanResponder/PanResponderExample.js)\n   */\n\n  var PanResponder = {\n    /**\n     *\n     * A graphical explanation of the touch data flow:\n     *\n     * +----------------------------+             +--------------------------------+\n     * | ResponderTouchHistoryStore |             |TouchHistoryMath                |\n     * +----------------------------+             +----------+---------------------+\n     * |Global store of touchHistory|             |Allocation-less math util       |\n     * |including activeness, start |             |on touch history (centroids     |\n     * |position, prev/cur position.|             |and multitouch movement etc)    |\n     * |                            |             |                                |\n     * +----^-----------------------+             +----^---------------------------+\n     *      |                                          |\n     *      | (records relevant history                |\n     *      |  of touches relevant for                 |\n     *      |  implementing higher level               |\n     *      |  gestures)                               |\n     *      |                                          |\n     * +----+-----------------------+             +----|---------------------------+\n     * | ResponderEventPlugin       |             |    |   Your App/Component      |\n     * +----------------------------+             +----|---------------------------+\n     * |Negotiates which view gets  | Low level   |    |             High level    |\n     * |onResponderMove events.     | events w/   |  +-+-------+     events w/     |\n     * |Also records history into   | touchHistory|  |   Pan   |     multitouch +  |\n     * |ResponderTouchHistoryStore. +---------------->Responder+-----> accumulative|\n     * +----------------------------+ attached to |  |         |     distance and  |\n     *                                 each event |  +---------+     velocity.     |\n     *                                            |                                |\n     *                                            |                                |\n     *                                            +--------------------------------+\n     *\n     *\n     *\n     * Gesture that calculates cumulative movement over time in a way that just\n     * \"does the right thing\" for multiple touches. The \"right thing\" is very\n     * nuanced. When moving two touches in opposite directions, the cumulative\n     * distance is zero in each dimension. When two touches move in parallel five\n     * pixels in the same direction, the cumulative distance is five, not ten. If\n     * two touches start, one moves five in a direction, then stops and the other\n     * touch moves fives in the same direction, the cumulative distance is ten.\n     *\n     * This logic requires a kind of processing of time \"clusters\" of touch events\n     * so that two touch moves that essentially occur in parallel but move every\n     * other frame respectively, are considered part of the same movement.\n     *\n     * Explanation of some of the non-obvious fields:\n     *\n     * - moveX/moveY: If no move event has been observed, then `(moveX, moveY)` is\n     *   invalid. If a move event has been observed, `(moveX, moveY)` is the\n     *   centroid of the most recently moved \"cluster\" of active touches.\n     *   (Currently all move have the same timeStamp, but later we should add some\n     *   threshold for what is considered to be \"moving\"). If a palm is\n     *   accidentally counted as a touch, but a finger is moving greatly, the palm\n     *   will move slightly, but we only want to count the single moving touch.\n     * - x0/y0: Centroid location (non-cumulative) at the time of becoming\n     *   responder.\n     * - dx/dy: Cumulative touch distance - not the same thing as sum of each touch\n     *   distance. Accounts for touch moves that are clustered together in time,\n     *   moving the same direction. Only valid when currently responder (otherwise,\n     *   it only represents the drag distance below the threshold).\n     * - vx/vy: Velocity.\n     */\n    _initializeGestureState: function _initializeGestureState(gestureState) {\n      gestureState.moveX = 0;\n      gestureState.moveY = 0;\n      gestureState.x0 = 0;\n      gestureState.y0 = 0;\n      gestureState.dx = 0;\n      gestureState.dy = 0;\n      gestureState.vx = 0;\n      gestureState.vy = 0;\n      gestureState.numberActiveTouches = 0;\n      // All `gestureState` accounts for timeStamps up until:\n      gestureState._accountsForMovesUpTo = 0;\n    },\n    /**\n     * This is nuanced and is necessary. It is incorrect to continuously take all\n     * active *and* recently moved touches, find the centroid, and track how that\n     * result changes over time. Instead, we must take all recently moved\n     * touches, and calculate how the centroid has changed just for those\n     * recently moved touches, and append that change to an accumulator. This is\n     * to (at least) handle the case where the user is moving three fingers, and\n     * then one of the fingers stops but the other two continue.\n     *\n     * This is very different than taking all of the recently moved touches and\n     * storing their centroid as `dx/dy`. For correctness, we must *accumulate\n     * changes* in the centroid of recently moved touches.\n     *\n     * There is also some nuance with how we handle multiple moved touches in a\n     * single event. With the way `ReactNativeEventEmitter` dispatches touches as\n     * individual events, multiple touches generate two 'move' events, each of\n     * them triggering `onResponderMove`. But with the way `PanResponder` works,\n     * all of the gesture inference is performed on the first dispatch, since it\n     * looks at all of the touches (even the ones for which there hasn't been a\n     * native dispatch yet). Therefore, `PanResponder` does not call\n     * `onResponderMove` passed the first dispatch. This diverges from the\n     * typical responder callback pattern (without using `PanResponder`), but\n     * avoids more dispatches than necessary.\n     */\n    _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {\n      gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n      gestureState.moveX = _$$_REQUIRE(_dependencyMap[0], \"./TouchHistoryMath\").currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n      gestureState.moveY = _$$_REQUIRE(_dependencyMap[0], \"./TouchHistoryMath\").currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);\n      var movedAfter = gestureState._accountsForMovesUpTo;\n      var prevX = _$$_REQUIRE(_dependencyMap[0], \"./TouchHistoryMath\").previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n      var x = _$$_REQUIRE(_dependencyMap[0], \"./TouchHistoryMath\").currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);\n      var prevY = _$$_REQUIRE(_dependencyMap[0], \"./TouchHistoryMath\").previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n      var y = _$$_REQUIRE(_dependencyMap[0], \"./TouchHistoryMath\").currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);\n      var nextDX = gestureState.dx + (x - prevX);\n      var nextDY = gestureState.dy + (y - prevY);\n\n      // TODO: This must be filtered intelligently.\n      var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;\n      gestureState.vx = (nextDX - gestureState.dx) / dt;\n      gestureState.vy = (nextDY - gestureState.dy) / dt;\n      gestureState.dx = nextDX;\n      gestureState.dy = nextDY;\n      gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;\n    },\n    /**\n     * @param {object} config Enhanced versions of all of the responder callbacks\n     * that provide not only the typical `ResponderSyntheticEvent`, but also the\n     * `PanResponder` gesture state.  Simply replace the word `Responder` with\n     * `PanResponder` in each of the typical `onResponder*` callbacks. For\n     * example, the `config` object would look like:\n     *\n     *  - `onMoveShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onMoveShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponder: (e, gestureState) => {...}`\n     *  - `onStartShouldSetPanResponderCapture: (e, gestureState) => {...}`\n     *  - `onPanResponderReject: (e, gestureState) => {...}`\n     *  - `onPanResponderGrant: (e, gestureState) => {...}`\n     *  - `onPanResponderStart: (e, gestureState) => {...}`\n     *  - `onPanResponderEnd: (e, gestureState) => {...}`\n     *  - `onPanResponderRelease: (e, gestureState) => {...}`\n     *  - `onPanResponderMove: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminate: (e, gestureState) => {...}`\n     *  - `onPanResponderTerminationRequest: (e, gestureState) => {...}`\n     *  - `onShouldBlockNativeResponder: (e, gestureState) => {...}`\n     *\n     *  In general, for events that have capture equivalents, we update the\n     *  gestureState once in the capture phase and can use it in the bubble phase\n     *  as well.\n     *\n     *  Be careful with onStartShould* callbacks. They only reflect updated\n     *  `gestureState` for start/end events that bubble/capture to the Node.\n     *  Once the node is the responder, you can rely on every start/end event\n     *  being processed by the gesture and `gestureState` being updated\n     *  accordingly. (numberActiveTouches) may not be totally accurate unless you\n     *  are the responder.\n     */\n    create: function create(config) {\n      var interactionState = {\n        handle: null\n      };\n      var gestureState = {\n        // Useful for debugging\n        stateID: Math.random(),\n        moveX: 0,\n        moveY: 0,\n        x0: 0,\n        y0: 0,\n        dx: 0,\n        dy: 0,\n        vx: 0,\n        vy: 0,\n        numberActiveTouches: 0,\n        _accountsForMovesUpTo: 0\n      };\n      var panHandlers = {\n        onStartShouldSetResponder: function onStartShouldSetResponder(event) {\n          return config.onStartShouldSetPanResponder == null ? false : config.onStartShouldSetPanResponder(event, gestureState);\n        },\n        onMoveShouldSetResponder: function onMoveShouldSetResponder(event) {\n          return config.onMoveShouldSetPanResponder == null ? false : config.onMoveShouldSetPanResponder(event, gestureState);\n        },\n        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(event) {\n          // TODO: Actually, we should reinitialize the state any time\n          // touches.length increases from 0 active to > 0 active.\n          if (event.nativeEvent.touches.length === 1) {\n            PanResponder._initializeGestureState(gestureState);\n          }\n          gestureState.numberActiveTouches = event.touchHistory.numberActiveTouches;\n          return config.onStartShouldSetPanResponderCapture != null ? config.onStartShouldSetPanResponderCapture(event, gestureState) : false;\n        },\n        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(event) {\n          var touchHistory = event.touchHistory;\n          // Responder system incorrectly dispatches should* to current responder\n          // Filter out any touch moves past the first one - we would have\n          // already processed multi-touch geometry during the first event.\n          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n            return false;\n          }\n          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n          return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(event, gestureState) : false;\n        },\n        onResponderGrant: function onResponderGrant(event) {\n          if (!interactionState.handle) {\n            interactionState.handle = _$$_REQUIRE(_dependencyMap[1], \"./InteractionManager\").createInteractionHandle();\n          }\n          gestureState.x0 = _$$_REQUIRE(_dependencyMap[0], \"./TouchHistoryMath\").currentCentroidX(event.touchHistory);\n          gestureState.y0 = _$$_REQUIRE(_dependencyMap[0], \"./TouchHistoryMath\").currentCentroidY(event.touchHistory);\n          gestureState.dx = 0;\n          gestureState.dy = 0;\n          if (config.onPanResponderGrant) {\n            config.onPanResponderGrant(event, gestureState);\n          }\n          // TODO: t7467124 investigate if this can be removed\n          return config.onShouldBlockNativeResponder == null ? true : config.onShouldBlockNativeResponder(event, gestureState);\n        },\n        onResponderReject: function onResponderReject(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderReject, event, gestureState);\n        },\n        onResponderRelease: function onResponderRelease(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderRelease, event, gestureState);\n          PanResponder._initializeGestureState(gestureState);\n        },\n        onResponderStart: function onResponderStart(event) {\n          var touchHistory = event.touchHistory;\n          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n          if (config.onPanResponderStart) {\n            config.onPanResponderStart(event, gestureState);\n          }\n        },\n        onResponderMove: function onResponderMove(event) {\n          var touchHistory = event.touchHistory;\n          // Guard against the dispatch of two touch moves when there are two\n          // simultaneously changed touches.\n          if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {\n            return;\n          }\n          // Filter out any touch moves past the first one - we would have\n          // already processed multi-touch geometry during the first event.\n          PanResponder._updateGestureStateOnMove(gestureState, touchHistory);\n          if (config.onPanResponderMove) {\n            config.onPanResponderMove(event, gestureState);\n          }\n        },\n        onResponderEnd: function onResponderEnd(event) {\n          var touchHistory = event.touchHistory;\n          gestureState.numberActiveTouches = touchHistory.numberActiveTouches;\n          clearInteractionHandle(interactionState, config.onPanResponderEnd, event, gestureState);\n        },\n        onResponderTerminate: function onResponderTerminate(event) {\n          clearInteractionHandle(interactionState, config.onPanResponderTerminate, event, gestureState);\n          PanResponder._initializeGestureState(gestureState);\n        },\n        onResponderTerminationRequest: function onResponderTerminationRequest(event) {\n          return config.onPanResponderTerminationRequest == null ? true : config.onPanResponderTerminationRequest(event, gestureState);\n        }\n      };\n      return {\n        panHandlers: panHandlers,\n        getInteractionHandle: function getInteractionHandle() {\n          return interactionState.handle;\n        }\n      };\n    }\n  };\n  function clearInteractionHandle(interactionState, callback, event, gestureState) {\n    if (interactionState.handle) {\n      _$$_REQUIRE(_dependencyMap[1], \"./InteractionManager\").clearInteractionHandle(interactionState.handle);\n      interactionState.handle = null;\n    }\n    if (callback) {\n      callback(event, gestureState);\n    }\n  }\n  var _default = exports.default = PanResponder;\n});","lineCount":386,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13,"Object"],[14,8,11,13],[14,9,11,13,"defineProperty"],[14,23,11,13],[14,24,11,13,"exports"],[14,31,11,13],[15,4,11,13,"value"],[15,9,11,13],[16,2,11,13],[17,2,11,13,"exports"],[17,9,11,13],[17,10,11,13,"default"],[17,17,11,13],[18,2,29,0],[19,0,30,0],[20,0,31,0],[21,0,32,0],[22,0,33,0],[23,0,34,0],[24,0,35,0],[25,0,36,0],[26,0,37,0],[27,0,38,0],[28,0,39,0],[29,0,40,0],[30,0,41,0],[31,0,42,0],[32,0,43,0],[33,0,44,0],[34,0,45,0],[35,0,46,0],[36,0,47,0],[37,0,48,0],[38,0,49,0],[39,0,50,0],[40,0,51,0],[41,0,52,0],[42,0,53,0],[43,0,54,0],[44,0,55,0],[45,0,56,0],[46,0,57,0],[47,0,58,0],[48,0,59,0],[49,0,60,0],[50,0,61,0],[51,0,62,0],[52,0,63,0],[53,0,64,0],[54,0,65,0],[55,0,66,0],[56,0,67,0],[57,0,68,0],[58,0,69,0],[59,0,70,0],[60,0,71,0],[61,0,72,0],[62,0,73,0],[63,0,74,0],[64,0,75,0],[65,0,76,0],[66,0,77,0],[67,0,78,0],[68,0,79,0],[69,0,80,0],[70,0,81,0],[71,0,82,0],[72,0,83,0],[73,0,84,0],[74,0,85,0],[75,0,86,0],[76,0,87,0],[77,0,88,0],[78,0,89,0],[79,0,90,0],[80,0,91,0],[81,0,92,0],[82,0,93,0],[83,0,94,0],[84,0,95,0],[85,0,96,0],[86,0,97,0],[87,0,98,0],[88,0,99,0],[89,0,100,0],[90,0,101,0],[91,0,102,0],[92,0,103,0],[93,0,104,0],[94,0,105,0],[95,0,106,0],[96,0,107,0],[97,0,108,0],[98,0,109,0],[99,0,110,0],[100,0,111,0],[101,0,112,0],[102,0,113,0],[103,0,114,0],[104,0,115,0],[105,0,116,0],[106,0,117,0],[107,0,118,0],[108,0,119,0],[109,0,120,0],[110,0,121,0],[111,0,122,0],[112,0,123,0],[113,0,124,0],[114,0,125,0],[116,2,229,0],[116,6,229,6,"PanResponder"],[116,18,229,18],[116,21,229,21],[117,4,230,2],[118,0,231,0],[119,0,232,0],[120,0,233,0],[121,0,234,0],[122,0,235,0],[123,0,236,0],[124,0,237,0],[125,0,238,0],[126,0,239,0],[127,0,240,0],[128,0,241,0],[129,0,242,0],[130,0,243,0],[131,0,244,0],[132,0,245,0],[133,0,246,0],[134,0,247,0],[135,0,248,0],[136,0,249,0],[137,0,250,0],[138,0,251,0],[139,0,252,0],[140,0,253,0],[141,0,254,0],[142,0,255,0],[143,0,256,0],[144,0,257,0],[145,0,258,0],[146,0,259,0],[147,0,260,0],[148,0,261,0],[149,0,262,0],[150,0,263,0],[151,0,264,0],[152,0,265,0],[153,0,266,0],[154,0,267,0],[155,0,268,0],[156,0,269,0],[157,0,270,0],[158,0,271,0],[159,0,272,0],[160,0,273,0],[161,0,274,0],[162,0,275,0],[163,0,276,0],[164,0,277,0],[165,0,278,0],[166,0,279,0],[167,0,280,0],[168,0,281,0],[169,0,282,0],[170,0,283,0],[171,0,284,0],[172,0,285,0],[173,0,286,0],[174,0,287,0],[175,0,288,0],[176,0,289,0],[177,0,290,0],[178,0,291,0],[179,4,293,2,"_initializeGestureState"],[179,27,293,25],[179,38,293,2,"_initializeGestureState"],[179,61,293,25,"_initializeGestureState"],[179,62,293,26,"gestureState"],[179,74,293,52],[179,76,293,54],[180,6,294,4,"gestureState"],[180,18,294,16],[180,19,294,17,"moveX"],[180,24,294,22],[180,27,294,25],[180,28,294,26],[181,6,295,4,"gestureState"],[181,18,295,16],[181,19,295,17,"moveY"],[181,24,295,22],[181,27,295,25],[181,28,295,26],[182,6,296,4,"gestureState"],[182,18,296,16],[182,19,296,17,"x0"],[182,21,296,19],[182,24,296,22],[182,25,296,23],[183,6,297,4,"gestureState"],[183,18,297,16],[183,19,297,17,"y0"],[183,21,297,19],[183,24,297,22],[183,25,297,23],[184,6,298,4,"gestureState"],[184,18,298,16],[184,19,298,17,"dx"],[184,21,298,19],[184,24,298,22],[184,25,298,23],[185,6,299,4,"gestureState"],[185,18,299,16],[185,19,299,17,"dy"],[185,21,299,19],[185,24,299,22],[185,25,299,23],[186,6,300,4,"gestureState"],[186,18,300,16],[186,19,300,17,"vx"],[186,21,300,19],[186,24,300,22],[186,25,300,23],[187,6,301,4,"gestureState"],[187,18,301,16],[187,19,301,17,"vy"],[187,21,301,19],[187,24,301,22],[187,25,301,23],[188,6,302,4,"gestureState"],[188,18,302,16],[188,19,302,17,"numberActiveTouches"],[188,38,302,36],[188,41,302,39],[188,42,302,40],[189,6,303,4],[190,6,304,4,"gestureState"],[190,18,304,16],[190,19,304,17,"_accountsForMovesUpTo"],[190,40,304,38],[190,43,304,41],[190,44,304,42],[191,4,305,2],[191,5,305,3],[192,4,307,2],[193,0,308,0],[194,0,309,0],[195,0,310,0],[196,0,311,0],[197,0,312,0],[198,0,313,0],[199,0,314,0],[200,0,315,0],[201,0,316,0],[202,0,317,0],[203,0,318,0],[204,0,319,0],[205,0,320,0],[206,0,321,0],[207,0,322,0],[208,0,323,0],[209,0,324,0],[210,0,325,0],[211,0,326,0],[212,0,327,0],[213,0,328,0],[214,0,329,0],[215,0,330,0],[216,4,331,2,"_updateGestureStateOnMove"],[216,29,331,27],[216,40,331,2,"_updateGestureStateOnMove"],[216,65,331,27,"_updateGestureStateOnMove"],[216,66,332,4,"gestureState"],[216,78,332,30],[216,80,333,4,"touchHistory"],[216,92,333,59],[216,94,334,4],[217,6,335,4,"gestureState"],[217,18,335,16],[217,19,335,17,"numberActiveTouches"],[217,38,335,36],[217,41,335,39,"touchHistory"],[217,53,335,51],[217,54,335,52,"numberActiveTouches"],[217,73,335,71],[218,6,336,4,"gestureState"],[218,18,336,16],[218,19,336,17,"moveX"],[218,24,336,22],[218,27,336,25,"_$$_REQUIRE"],[218,38,336,25],[218,39,336,25,"_dependencyMap"],[218,53,336,25],[218,80,336,25,"currentCentroidXOfTouchesChangedAfter"],[218,117,336,25],[218,118,337,6,"touchHistory"],[218,130,337,18],[218,132,338,6,"gestureState"],[218,144,338,18],[218,145,338,19,"_accountsForMovesUpTo"],[218,166,339,4],[218,167,339,5],[219,6,340,4,"gestureState"],[219,18,340,16],[219,19,340,17,"moveY"],[219,24,340,22],[219,27,340,25,"_$$_REQUIRE"],[219,38,340,25],[219,39,340,25,"_dependencyMap"],[219,53,340,25],[219,80,340,25,"currentCentroidYOfTouchesChangedAfter"],[219,117,340,25],[219,118,341,6,"touchHistory"],[219,130,341,18],[219,132,342,6,"gestureState"],[219,144,342,18],[219,145,342,19,"_accountsForMovesUpTo"],[219,166,343,4],[219,167,343,5],[220,6,344,4],[220,10,344,10,"movedAfter"],[220,20,344,20],[220,23,344,23,"gestureState"],[220,35,344,35],[220,36,344,36,"_accountsForMovesUpTo"],[220,57,344,57],[221,6,345,4],[221,10,345,10,"prevX"],[221,15,345,15],[221,18,345,18,"_$$_REQUIRE"],[221,29,345,18],[221,30,345,18,"_dependencyMap"],[221,44,345,18],[221,71,345,18,"previousCentroidXOfTouchesChangedAfter"],[221,109,345,18],[221,110,346,6,"touchHistory"],[221,122,346,18],[221,124,347,6,"movedAfter"],[221,134,348,4],[221,135,348,5],[222,6,349,4],[222,10,349,10,"x"],[222,11,349,11],[222,14,349,14,"_$$_REQUIRE"],[222,25,349,14],[222,26,349,14,"_dependencyMap"],[222,40,349,14],[222,67,349,14,"currentCentroidXOfTouchesChangedAfter"],[222,104,349,14],[222,105,349,52,"touchHistory"],[222,117,349,64],[222,119,349,66,"movedAfter"],[222,129,349,76],[222,130,349,77],[223,6,350,4],[223,10,350,10,"prevY"],[223,15,350,15],[223,18,350,18,"_$$_REQUIRE"],[223,29,350,18],[223,30,350,18,"_dependencyMap"],[223,44,350,18],[223,71,350,18,"previousCentroidYOfTouchesChangedAfter"],[223,109,350,18],[223,110,351,6,"touchHistory"],[223,122,351,18],[223,124,352,6,"movedAfter"],[223,134,353,4],[223,135,353,5],[224,6,354,4],[224,10,354,10,"y"],[224,11,354,11],[224,14,354,14,"_$$_REQUIRE"],[224,25,354,14],[224,26,354,14,"_dependencyMap"],[224,40,354,14],[224,67,354,14,"currentCentroidYOfTouchesChangedAfter"],[224,104,354,14],[224,105,354,52,"touchHistory"],[224,117,354,64],[224,119,354,66,"movedAfter"],[224,129,354,76],[224,130,354,77],[225,6,355,4],[225,10,355,10,"nextDX"],[225,16,355,16],[225,19,355,19,"gestureState"],[225,31,355,31],[225,32,355,32,"dx"],[225,34,355,34],[225,38,355,38,"x"],[225,39,355,39],[225,42,355,42,"prevX"],[225,47,355,47],[225,48,355,48],[226,6,356,4],[226,10,356,10,"nextDY"],[226,16,356,16],[226,19,356,19,"gestureState"],[226,31,356,31],[226,32,356,32,"dy"],[226,34,356,34],[226,38,356,38,"y"],[226,39,356,39],[226,42,356,42,"prevY"],[226,47,356,47],[226,48,356,48],[228,6,358,4],[229,6,359,4],[229,10,359,10,"dt"],[229,12,359,12],[229,15,360,6,"touchHistory"],[229,27,360,18],[229,28,360,19,"mostRecentTimeStamp"],[229,47,360,38],[229,50,360,41,"gestureState"],[229,62,360,53],[229,63,360,54,"_accountsForMovesUpTo"],[229,84,360,75],[230,6,361,4,"gestureState"],[230,18,361,16],[230,19,361,17,"vx"],[230,21,361,19],[230,24,361,22],[230,25,361,23,"nextDX"],[230,31,361,29],[230,34,361,32,"gestureState"],[230,46,361,44],[230,47,361,45,"dx"],[230,49,361,47],[230,53,361,51,"dt"],[230,55,361,53],[231,6,362,4,"gestureState"],[231,18,362,16],[231,19,362,17,"vy"],[231,21,362,19],[231,24,362,22],[231,25,362,23,"nextDY"],[231,31,362,29],[231,34,362,32,"gestureState"],[231,46,362,44],[231,47,362,45,"dy"],[231,49,362,47],[231,53,362,51,"dt"],[231,55,362,53],[232,6,364,4,"gestureState"],[232,18,364,16],[232,19,364,17,"dx"],[232,21,364,19],[232,24,364,22,"nextDX"],[232,30,364,28],[233,6,365,4,"gestureState"],[233,18,365,16],[233,19,365,17,"dy"],[233,21,365,19],[233,24,365,22,"nextDY"],[233,30,365,28],[234,6,366,4,"gestureState"],[234,18,366,16],[234,19,366,17,"_accountsForMovesUpTo"],[234,40,366,38],[234,43,366,41,"touchHistory"],[234,55,366,53],[234,56,366,54,"mostRecentTimeStamp"],[234,75,366,73],[235,4,367,2],[235,5,367,3],[236,4,369,2],[237,0,370,0],[238,0,371,0],[239,0,372,0],[240,0,373,0],[241,0,374,0],[242,0,375,0],[243,0,376,0],[244,0,377,0],[245,0,378,0],[246,0,379,0],[247,0,380,0],[248,0,381,0],[249,0,382,0],[250,0,383,0],[251,0,384,0],[252,0,385,0],[253,0,386,0],[254,0,387,0],[255,0,388,0],[256,0,389,0],[257,0,390,0],[258,0,391,0],[259,0,392,0],[260,0,393,0],[261,0,394,0],[262,0,395,0],[263,0,396,0],[264,0,397,0],[265,0,398,0],[266,0,399,0],[267,0,400,0],[268,4,401,2,"create"],[268,10,401,8],[268,21,401,2,"create"],[268,27,401,8,"create"],[268,28,401,9,"config"],[268,34,401,35],[268,36,404,4],[269,6,405,4],[269,10,405,10,"interactionState"],[269,26,405,26],[269,29,405,29],[270,8,406,6,"handle"],[270,14,406,12],[270,16,406,15],[271,6,407,4],[271,7,407,5],[272,6,408,4],[272,10,408,10,"gestureState"],[272,22,408,36],[272,25,408,39],[273,8,409,6],[274,8,410,6,"stateID"],[274,15,410,13],[274,17,410,15,"Math"],[274,21,410,19],[274,22,410,20,"random"],[274,28,410,26],[274,29,410,27],[274,30,410,28],[275,8,411,6,"moveX"],[275,13,411,11],[275,15,411,13],[275,16,411,14],[276,8,412,6,"moveY"],[276,13,412,11],[276,15,412,13],[276,16,412,14],[277,8,413,6,"x0"],[277,10,413,8],[277,12,413,10],[277,13,413,11],[278,8,414,6,"y0"],[278,10,414,8],[278,12,414,10],[278,13,414,11],[279,8,415,6,"dx"],[279,10,415,8],[279,12,415,10],[279,13,415,11],[280,8,416,6,"dy"],[280,10,416,8],[280,12,416,10],[280,13,416,11],[281,8,417,6,"vx"],[281,10,417,8],[281,12,417,10],[281,13,417,11],[282,8,418,6,"vy"],[282,10,418,8],[282,12,418,10],[282,13,418,11],[283,8,419,6,"numberActiveTouches"],[283,27,419,25],[283,29,419,27],[283,30,419,28],[284,8,420,6,"_accountsForMovesUpTo"],[284,29,420,27],[284,31,420,29],[285,6,421,4],[285,7,421,5],[286,6,422,4],[286,10,422,10,"panHandlers"],[286,21,422,21],[286,24,422,24],[287,8,423,6,"onStartShouldSetResponder"],[287,33,423,31],[287,44,423,6,"onStartShouldSetResponder"],[287,69,423,31,"onStartShouldSetResponder"],[287,70,423,32,"event"],[287,75,423,49],[287,77,423,60],[288,10,424,8],[288,17,424,15,"config"],[288,23,424,21],[288,24,424,22,"onStartShouldSetPanResponder"],[288,52,424,50],[288,56,424,54],[288,60,424,58],[288,63,425,12],[288,68,425,17],[288,71,426,12,"config"],[288,77,426,18],[288,78,426,19,"onStartShouldSetPanResponder"],[288,106,426,47],[288,107,426,48,"event"],[288,112,426,53],[288,114,426,55,"gestureState"],[288,126,426,67],[288,127,426,68],[289,8,427,6],[289,9,427,7],[290,8,428,6,"onMoveShouldSetResponder"],[290,32,428,30],[290,43,428,6,"onMoveShouldSetResponder"],[290,67,428,30,"onMoveShouldSetResponder"],[290,68,428,31,"event"],[290,73,428,48],[290,75,428,59],[291,10,429,8],[291,17,429,15,"config"],[291,23,429,21],[291,24,429,22,"onMoveShouldSetPanResponder"],[291,51,429,49],[291,55,429,53],[291,59,429,57],[291,62,430,12],[291,67,430,17],[291,70,431,12,"config"],[291,76,431,18],[291,77,431,19,"onMoveShouldSetPanResponder"],[291,104,431,46],[291,105,431,47,"event"],[291,110,431,52],[291,112,431,54,"gestureState"],[291,124,431,66],[291,125,431,67],[292,8,432,6],[292,9,432,7],[293,8,433,6,"onStartShouldSetResponderCapture"],[293,40,433,38],[293,51,433,6,"onStartShouldSetResponderCapture"],[293,83,433,38,"onStartShouldSetResponderCapture"],[293,84,433,39,"event"],[293,89,433,56],[293,91,433,67],[294,10,434,8],[295,10,435,8],[296,10,436,8],[296,14,436,12,"event"],[296,19,436,17],[296,20,436,18,"nativeEvent"],[296,31,436,29],[296,32,436,30,"touches"],[296,39,436,37],[296,40,436,38,"length"],[296,46,436,44],[296,51,436,49],[296,52,436,50],[296,54,436,52],[297,12,437,10,"PanResponder"],[297,24,437,22],[297,25,437,23,"_initializeGestureState"],[297,48,437,46],[297,49,437,47,"gestureState"],[297,61,437,59],[297,62,437,60],[298,10,438,8],[299,10,439,8,"gestureState"],[299,22,439,20],[299,23,439,21,"numberActiveTouches"],[299,42,439,40],[299,45,440,10,"event"],[299,50,440,15],[299,51,440,16,"touchHistory"],[299,63,440,28],[299,64,440,29,"numberActiveTouches"],[299,83,440,48],[300,10,441,8],[300,17,441,15,"config"],[300,23,441,21],[300,24,441,22,"onStartShouldSetPanResponderCapture"],[300,59,441,57],[300,63,441,61],[300,67,441,65],[300,70,442,12,"config"],[300,76,442,18],[300,77,442,19,"onStartShouldSetPanResponderCapture"],[300,112,442,54],[300,113,442,55,"event"],[300,118,442,60],[300,120,442,62,"gestureState"],[300,132,442,74],[300,133,442,75],[300,136,443,12],[300,141,443,17],[301,8,444,6],[301,9,444,7],[302,8,446,6,"onMoveShouldSetResponderCapture"],[302,39,446,37],[302,50,446,6,"onMoveShouldSetResponderCapture"],[302,81,446,37,"onMoveShouldSetResponderCapture"],[302,82,446,38,"event"],[302,87,446,55],[302,89,446,66],[303,10,447,8],[303,14,447,14,"touchHistory"],[303,26,447,26],[303,29,447,29,"event"],[303,34,447,34],[303,35,447,35,"touchHistory"],[303,47,447,47],[304,10,448,8],[305,10,449,8],[306,10,450,8],[307,10,451,8],[307,14,452,10,"gestureState"],[307,26,452,22],[307,27,452,23,"_accountsForMovesUpTo"],[307,48,452,44],[307,53,453,10,"touchHistory"],[307,65,453,22],[307,66,453,23,"mostRecentTimeStamp"],[307,85,453,42],[307,87,454,10],[308,12,455,10],[308,19,455,17],[308,24,455,22],[309,10,456,8],[310,10,457,8,"PanResponder"],[310,22,457,20],[310,23,457,21,"_updateGestureStateOnMove"],[310,48,457,46],[310,49,457,47,"gestureState"],[310,61,457,59],[310,63,457,61,"touchHistory"],[310,75,457,73],[310,76,457,74],[311,10,458,8],[311,17,458,15,"config"],[311,23,458,21],[311,24,458,22,"onMoveShouldSetPanResponderCapture"],[311,58,458,56],[311,61,459,12,"config"],[311,67,459,18],[311,68,459,19,"onMoveShouldSetPanResponderCapture"],[311,102,459,53],[311,103,459,54,"event"],[311,108,459,59],[311,110,459,61,"gestureState"],[311,122,459,73],[311,123,459,74],[311,126,460,12],[311,131,460,17],[312,8,461,6],[312,9,461,7],[313,8,463,6,"onResponderGrant"],[313,24,463,22],[313,35,463,6,"onResponderGrant"],[313,51,463,22,"onResponderGrant"],[313,52,463,23,"event"],[313,57,463,40],[313,59,463,51],[314,10,464,8],[314,14,464,12],[314,15,464,13,"interactionState"],[314,31,464,29],[314,32,464,30,"handle"],[314,38,464,36],[314,40,464,38],[315,12,465,10,"interactionState"],[315,28,465,26],[315,29,465,27,"handle"],[315,35,465,33],[315,38,466,12,"_$$_REQUIRE"],[315,49,466,12],[315,50,466,12,"_dependencyMap"],[315,64,466,12],[315,93,466,31,"createInteractionHandle"],[315,116,466,54],[315,117,466,55],[315,118,466,56],[316,10,467,8],[317,10,468,8,"gestureState"],[317,22,468,20],[317,23,468,21,"x0"],[317,25,468,23],[317,28,468,26,"_$$_REQUIRE"],[317,39,468,26],[317,40,468,26,"_dependencyMap"],[317,54,468,26],[317,81,468,26,"currentCentroidX"],[317,97,468,26],[317,98,468,43,"event"],[317,103,468,48],[317,104,468,49,"touchHistory"],[317,116,468,61],[317,117,468,62],[318,10,469,8,"gestureState"],[318,22,469,20],[318,23,469,21,"y0"],[318,25,469,23],[318,28,469,26,"_$$_REQUIRE"],[318,39,469,26],[318,40,469,26,"_dependencyMap"],[318,54,469,26],[318,81,469,26,"currentCentroidY"],[318,97,469,26],[318,98,469,43,"event"],[318,103,469,48],[318,104,469,49,"touchHistory"],[318,116,469,61],[318,117,469,62],[319,10,470,8,"gestureState"],[319,22,470,20],[319,23,470,21,"dx"],[319,25,470,23],[319,28,470,26],[319,29,470,27],[320,10,471,8,"gestureState"],[320,22,471,20],[320,23,471,21,"dy"],[320,25,471,23],[320,28,471,26],[320,29,471,27],[321,10,472,8],[321,14,472,12,"config"],[321,20,472,18],[321,21,472,19,"onPanResponderGrant"],[321,40,472,38],[321,42,472,40],[322,12,473,10,"config"],[322,18,473,16],[322,19,473,17,"onPanResponderGrant"],[322,38,473,36],[322,39,473,37,"event"],[322,44,473,42],[322,46,473,44,"gestureState"],[322,58,473,56],[322,59,473,57],[323,10,474,8],[324,10,475,8],[325,10,476,8],[325,17,476,15,"config"],[325,23,476,21],[325,24,476,22,"onShouldBlockNativeResponder"],[325,52,476,50],[325,56,476,54],[325,60,476,58],[325,63,477,12],[325,67,477,16],[325,70,478,12,"config"],[325,76,478,18],[325,77,478,19,"onShouldBlockNativeResponder"],[325,105,478,47],[325,106,478,48,"event"],[325,111,478,53],[325,113,478,55,"gestureState"],[325,125,478,67],[325,126,478,68],[326,8,479,6],[326,9,479,7],[327,8,481,6,"onResponderReject"],[327,25,481,23],[327,36,481,6,"onResponderReject"],[327,53,481,23,"onResponderReject"],[327,54,481,24,"event"],[327,59,481,41],[327,61,481,49],[328,10,482,8,"clearInteractionHandle"],[328,32,482,30],[328,33,483,10,"interactionState"],[328,49,483,26],[328,51,484,10,"config"],[328,57,484,16],[328,58,484,17,"onPanResponderReject"],[328,78,484,37],[328,80,485,10,"event"],[328,85,485,15],[328,87,486,10,"gestureState"],[328,99,487,8],[328,100,487,9],[329,8,488,6],[329,9,488,7],[330,8,490,6,"onResponderRelease"],[330,26,490,24],[330,37,490,6,"onResponderRelease"],[330,55,490,24,"onResponderRelease"],[330,56,490,25,"event"],[330,61,490,42],[330,63,490,50],[331,10,491,8,"clearInteractionHandle"],[331,32,491,30],[331,33,492,10,"interactionState"],[331,49,492,26],[331,51,493,10,"config"],[331,57,493,16],[331,58,493,17,"onPanResponderRelease"],[331,79,493,38],[331,81,494,10,"event"],[331,86,494,15],[331,88,495,10,"gestureState"],[331,100,496,8],[331,101,496,9],[332,10,497,8,"PanResponder"],[332,22,497,20],[332,23,497,21,"_initializeGestureState"],[332,46,497,44],[332,47,497,45,"gestureState"],[332,59,497,57],[332,60,497,58],[333,8,498,6],[333,9,498,7],[334,8,500,6,"onResponderStart"],[334,24,500,22],[334,35,500,6,"onResponderStart"],[334,51,500,22,"onResponderStart"],[334,52,500,23,"event"],[334,57,500,40],[334,59,500,48],[335,10,501,8],[335,14,501,14,"touchHistory"],[335,26,501,26],[335,29,501,29,"event"],[335,34,501,34],[335,35,501,35,"touchHistory"],[335,47,501,47],[336,10,502,8,"gestureState"],[336,22,502,20],[336,23,502,21,"numberActiveTouches"],[336,42,502,40],[336,45,502,43,"touchHistory"],[336,57,502,55],[336,58,502,56,"numberActiveTouches"],[336,77,502,75],[337,10,503,8],[337,14,503,12,"config"],[337,20,503,18],[337,21,503,19,"onPanResponderStart"],[337,40,503,38],[337,42,503,40],[338,12,504,10,"config"],[338,18,504,16],[338,19,504,17,"onPanResponderStart"],[338,38,504,36],[338,39,504,37,"event"],[338,44,504,42],[338,46,504,44,"gestureState"],[338,58,504,56],[338,59,504,57],[339,10,505,8],[340,8,506,6],[340,9,506,7],[341,8,508,6,"onResponderMove"],[341,23,508,21],[341,34,508,6,"onResponderMove"],[341,49,508,21,"onResponderMove"],[341,50,508,22,"event"],[341,55,508,39],[341,57,508,47],[342,10,509,8],[342,14,509,14,"touchHistory"],[342,26,509,26],[342,29,509,29,"event"],[342,34,509,34],[342,35,509,35,"touchHistory"],[342,47,509,47],[343,10,510,8],[344,10,511,8],[345,10,512,8],[345,14,513,10,"gestureState"],[345,26,513,22],[345,27,513,23,"_accountsForMovesUpTo"],[345,48,513,44],[345,53,514,10,"touchHistory"],[345,65,514,22],[345,66,514,23,"mostRecentTimeStamp"],[345,85,514,42],[345,87,515,10],[346,12,516,10],[347,10,517,8],[348,10,518,8],[349,10,519,8],[350,10,520,8,"PanResponder"],[350,22,520,20],[350,23,520,21,"_updateGestureStateOnMove"],[350,48,520,46],[350,49,520,47,"gestureState"],[350,61,520,59],[350,63,520,61,"touchHistory"],[350,75,520,73],[350,76,520,74],[351,10,521,8],[351,14,521,12,"config"],[351,20,521,18],[351,21,521,19,"onPanResponderMove"],[351,39,521,37],[351,41,521,39],[352,12,522,10,"config"],[352,18,522,16],[352,19,522,17,"onPanResponderMove"],[352,37,522,35],[352,38,522,36,"event"],[352,43,522,41],[352,45,522,43,"gestureState"],[352,57,522,55],[352,58,522,56],[353,10,523,8],[354,8,524,6],[354,9,524,7],[355,8,526,6,"onResponderEnd"],[355,22,526,20],[355,33,526,6,"onResponderEnd"],[355,47,526,20,"onResponderEnd"],[355,48,526,21,"event"],[355,53,526,38],[355,55,526,46],[356,10,527,8],[356,14,527,14,"touchHistory"],[356,26,527,26],[356,29,527,29,"event"],[356,34,527,34],[356,35,527,35,"touchHistory"],[356,47,527,47],[357,10,528,8,"gestureState"],[357,22,528,20],[357,23,528,21,"numberActiveTouches"],[357,42,528,40],[357,45,528,43,"touchHistory"],[357,57,528,55],[357,58,528,56,"numberActiveTouches"],[357,77,528,75],[358,10,529,8,"clearInteractionHandle"],[358,32,529,30],[358,33,530,10,"interactionState"],[358,49,530,26],[358,51,531,10,"config"],[358,57,531,16],[358,58,531,17,"onPanResponderEnd"],[358,75,531,34],[358,77,532,10,"event"],[358,82,532,15],[358,84,533,10,"gestureState"],[358,96,534,8],[358,97,534,9],[359,8,535,6],[359,9,535,7],[360,8,537,6,"onResponderTerminate"],[360,28,537,26],[360,39,537,6,"onResponderTerminate"],[360,59,537,26,"onResponderTerminate"],[360,60,537,27,"event"],[360,65,537,44],[360,67,537,52],[361,10,538,8,"clearInteractionHandle"],[361,32,538,30],[361,33,539,10,"interactionState"],[361,49,539,26],[361,51,540,10,"config"],[361,57,540,16],[361,58,540,17,"onPanResponderTerminate"],[361,81,540,40],[361,83,541,10,"event"],[361,88,541,15],[361,90,542,10,"gestureState"],[361,102,543,8],[361,103,543,9],[362,10,544,8,"PanResponder"],[362,22,544,20],[362,23,544,21,"_initializeGestureState"],[362,46,544,44],[362,47,544,45,"gestureState"],[362,59,544,57],[362,60,544,58],[363,8,545,6],[363,9,545,7],[364,8,547,6,"onResponderTerminationRequest"],[364,37,547,35],[364,48,547,6,"onResponderTerminationRequest"],[364,77,547,35,"onResponderTerminationRequest"],[364,78,547,36,"event"],[364,83,547,53],[364,85,547,64],[365,10,548,8],[365,17,548,15,"config"],[365,23,548,21],[365,24,548,22,"onPanResponderTerminationRequest"],[365,56,548,54],[365,60,548,58],[365,64,548,62],[365,67,549,12],[365,71,549,16],[365,74,550,12,"config"],[365,80,550,18],[365,81,550,19,"onPanResponderTerminationRequest"],[365,113,550,51],[365,114,550,52,"event"],[365,119,550,57],[365,121,550,59,"gestureState"],[365,133,550,71],[365,134,550,72],[366,8,551,6],[367,6,552,4],[367,7,552,5],[368,6,553,4],[368,13,553,11],[369,8,554,6,"panHandlers"],[369,19,554,17],[369,21,554,6,"panHandlers"],[369,32,554,17],[370,8,555,6,"getInteractionHandle"],[370,28,555,26],[370,39,555,6,"getInteractionHandle"],[370,59,555,26,"getInteractionHandle"],[370,60,555,26],[370,62,555,38],[371,10,556,8],[371,17,556,15,"interactionState"],[371,33,556,31],[371,34,556,32,"handle"],[371,40,556,38],[372,8,557,6],[373,6,558,4],[373,7,558,5],[374,4,559,2],[375,2,560,0],[375,3,560,1],[376,2,562,0],[376,11,562,9,"clearInteractionHandle"],[376,33,562,31,"clearInteractionHandle"],[376,34,563,2,"interactionState"],[376,50,563,42],[376,52,564,2,"callback"],[376,60,564,47],[376,62,565,2,"event"],[376,67,565,19],[376,69,566,2,"gestureState"],[376,81,566,28],[376,83,567,2],[377,4,568,2],[377,8,568,6,"interactionState"],[377,24,568,22],[377,25,568,23,"handle"],[377,31,568,29],[377,33,568,31],[378,6,569,4,"_$$_REQUIRE"],[378,17,569,4],[378,18,569,4,"_dependencyMap"],[378,32,569,4],[378,61,569,23,"clearInteractionHandle"],[378,83,569,45],[378,84,569,46,"interactionState"],[378,100,569,62],[378,101,569,63,"handle"],[378,107,569,69],[378,108,569,70],[379,6,570,4,"interactionState"],[379,22,570,20],[379,23,570,21,"handle"],[379,29,570,27],[379,32,570,30],[379,36,570,34],[380,4,571,2],[381,4,572,2],[381,8,572,6,"callback"],[381,16,572,14],[381,18,572,16],[382,6,573,4,"callback"],[382,14,573,12],[382,15,573,13,"event"],[382,20,573,18],[382,22,573,20,"gestureState"],[382,34,573,32],[382,35,573,33],[383,4,574,2],[384,2,575,0],[385,2,575,1],[385,6,575,1,"_default"],[385,14,575,1],[385,17,575,1,"exports"],[385,24,575,1],[385,25,575,1,"default"],[385,32,575,1],[385,35,579,15,"PanResponder"],[385,47,579,27],[386,0,579,27],[386,3]],"functionMap":{"names":["<global>","_initializeGestureState","_updateGestureStateOnMove","create","panHandlers.onStartShouldSetResponder","panHandlers.onMoveShouldSetResponder","panHandlers.onStartShouldSetResponderCapture","panHandlers.onMoveShouldSetResponderCapture","panHandlers.onResponderGrant","panHandlers.onResponderReject","panHandlers.onResponderRelease","panHandlers.onResponderStart","panHandlers.onResponderMove","panHandlers.onResponderEnd","panHandlers.onResponderTerminate","panHandlers.onResponderTerminationRequest","getInteractionHandle","clearInteractionHandle"],"mappings":"AAA;ECoS;GDY;EE0B;GFoC;EGkC;MCsB;ODI;MEC;OFI;MGC;OHW;MIE;OJe;MKE;OLgB;MME;ONO;MOE;OPQ;MQE;ORM;MSE;OTgB;MUE;OVS;MWE;OXQ;MYE;OZI;MaI;ObE;GHE;AiBG;CjBa"}},"type":"js/module"}]}