{"dependencies":[{"name":"./conversions","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":20,"index":20},"end":{"line":1,"column":44,"index":44}},{"start":{"line":1,"column":20,"index":20},"end":{"line":1,"column":44,"index":44}},{"start":{"line":1,"column":20,"index":20},"end":{"line":1,"column":44,"index":44}}],"key":"ULVvOUxZjLNuq9LSOP7dM+d8ulg="}},{"name":"./route","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":14,"index":60},"end":{"line":2,"column":32,"index":78}}],"key":"XYGOmOrD1h08ux26uiPKSdrk35E="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var convert = {};\n  var models = Object.keys(_$$_REQUIRE(_dependencyMap[0], \"./conversions\"));\n  function wrapRaw(fn) {\n    var wrappedFn = function wrappedFn() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var arg0 = args[0];\n      if (arg0 === undefined || arg0 === null) {\n        return arg0;\n      }\n      if (arg0.length > 1) {\n        args = arg0;\n      }\n      return fn(args);\n    };\n\n    // Preserve .conversion property if there is one\n    if ('conversion' in fn) {\n      wrappedFn.conversion = fn.conversion;\n    }\n    return wrappedFn;\n  }\n  function wrapRounded(fn) {\n    var wrappedFn = function wrappedFn() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      var arg0 = args[0];\n      if (arg0 === undefined || arg0 === null) {\n        return arg0;\n      }\n      if (arg0.length > 1) {\n        args = arg0;\n      }\n      var result = fn(args);\n\n      // We're assuming the result is an array here.\n      // see notice in conversions.js; don't use box types\n      // in conversion functions.\n      if (typeof result === 'object') {\n        for (var len = result.length, i = 0; i < len; i++) {\n          result[i] = Math.round(result[i]);\n        }\n      }\n      return result;\n    };\n\n    // Preserve .conversion property if there is one\n    if ('conversion' in fn) {\n      wrappedFn.conversion = fn.conversion;\n    }\n    return wrappedFn;\n  }\n  models.forEach(function (fromModel) {\n    convert[fromModel] = {};\n    Object.defineProperty(convert[fromModel], 'channels', {\n      value: _$$_REQUIRE(_dependencyMap[0], \"./conversions\")[fromModel].channels\n    });\n    Object.defineProperty(convert[fromModel], 'labels', {\n      value: _$$_REQUIRE(_dependencyMap[0], \"./conversions\")[fromModel].labels\n    });\n    var routes = _$$_REQUIRE(_dependencyMap[1], \"./route\")(fromModel);\n    var routeModels = Object.keys(routes);\n    routeModels.forEach(function (toModel) {\n      var fn = routes[toModel];\n      convert[fromModel][toModel] = wrapRounded(fn);\n      convert[fromModel][toModel].raw = wrapRaw(fn);\n    });\n  });\n  module.exports = convert;\n});","lineCount":73,"map":[[2,2,4,0],[2,6,4,6,"convert"],[2,13,4,13],[2,16,4,16],[2,17,4,17],[2,18,4,18],[3,2,6,0],[3,6,6,6,"models"],[3,12,6,12],[3,15,6,15,"Object"],[3,21,6,21],[3,22,6,22,"keys"],[3,26,6,26],[3,27,6,26,"_$$_REQUIRE"],[3,38,6,26],[3,39,6,26,"_dependencyMap"],[3,53,6,26],[3,74,6,38],[3,75,6,39],[4,2,8,0],[4,11,8,9,"wrapRaw"],[4,18,8,16,"wrapRaw"],[4,19,8,17,"fn"],[4,21,8,19],[4,23,8,21],[5,4,9,1],[5,8,9,7,"wrappedFn"],[5,17,9,16],[5,20,9,19],[5,29,9,7,"wrappedFn"],[5,38,9,16,"wrappedFn"],[5,39,9,16],[5,41,9,38],[6,6,9,38],[6,15,9,38,"_len"],[6,19,9,38],[6,22,9,38,"arguments"],[6,31,9,38],[6,32,9,38,"length"],[6,38,9,38],[6,40,9,32,"args"],[6,44,9,36],[6,51,9,36,"Array"],[6,56,9,36],[6,57,9,36,"_len"],[6,61,9,36],[6,64,9,36,"_key"],[6,68,9,36],[6,74,9,36,"_key"],[6,78,9,36],[6,81,9,36,"_len"],[6,85,9,36],[6,87,9,36,"_key"],[6,91,9,36],[7,8,9,32,"args"],[7,12,9,36],[7,13,9,36,"_key"],[7,17,9,36],[7,21,9,36,"arguments"],[7,30,9,36],[7,31,9,36,"_key"],[7,35,9,36],[8,6,9,36],[9,6,10,2],[9,10,10,8,"arg0"],[9,14,10,12],[9,17,10,15,"args"],[9,21,10,19],[9,22,10,20],[9,23,10,21],[9,24,10,22],[10,6,11,2],[10,10,11,6,"arg0"],[10,14,11,10],[10,19,11,15,"undefined"],[10,28,11,24],[10,32,11,28,"arg0"],[10,36,11,32],[10,41,11,37],[10,45,11,41],[10,47,11,43],[11,8,12,3],[11,15,12,10,"arg0"],[11,19,12,14],[12,6,13,2],[13,6,15,2],[13,10,15,6,"arg0"],[13,14,15,10],[13,15,15,11,"length"],[13,21,15,17],[13,24,15,20],[13,25,15,21],[13,27,15,23],[14,8,16,3,"args"],[14,12,16,7],[14,15,16,10,"arg0"],[14,19,16,14],[15,6,17,2],[16,6,19,2],[16,13,19,9,"fn"],[16,15,19,11],[16,16,19,12,"args"],[16,20,19,16],[16,21,19,17],[17,4,20,1],[17,5,20,2],[19,4,22,1],[20,4,23,1],[20,8,23,5],[20,20,23,17],[20,24,23,21,"fn"],[20,26,23,23],[20,28,23,25],[21,6,24,2,"wrappedFn"],[21,15,24,11],[21,16,24,12,"conversion"],[21,26,24,22],[21,29,24,25,"fn"],[21,31,24,27],[21,32,24,28,"conversion"],[21,42,24,38],[22,4,25,1],[23,4,27,1],[23,11,27,8,"wrappedFn"],[23,20,27,17],[24,2,28,0],[25,2,30,0],[25,11,30,9,"wrapRounded"],[25,22,30,20,"wrapRounded"],[25,23,30,21,"fn"],[25,25,30,23],[25,27,30,25],[26,4,31,1],[26,8,31,7,"wrappedFn"],[26,17,31,16],[26,20,31,19],[26,29,31,7,"wrappedFn"],[26,38,31,16,"wrappedFn"],[26,39,31,16],[26,41,31,38],[27,6,31,38],[27,15,31,38,"_len2"],[27,20,31,38],[27,23,31,38,"arguments"],[27,32,31,38],[27,33,31,38,"length"],[27,39,31,38],[27,41,31,32,"args"],[27,45,31,36],[27,52,31,36,"Array"],[27,57,31,36],[27,58,31,36,"_len2"],[27,63,31,36],[27,66,31,36,"_key2"],[27,71,31,36],[27,77,31,36,"_key2"],[27,82,31,36],[27,85,31,36,"_len2"],[27,90,31,36],[27,92,31,36,"_key2"],[27,97,31,36],[28,8,31,32,"args"],[28,12,31,36],[28,13,31,36,"_key2"],[28,18,31,36],[28,22,31,36,"arguments"],[28,31,31,36],[28,32,31,36,"_key2"],[28,37,31,36],[29,6,31,36],[30,6,32,2],[30,10,32,8,"arg0"],[30,14,32,12],[30,17,32,15,"args"],[30,21,32,19],[30,22,32,20],[30,23,32,21],[30,24,32,22],[31,6,34,2],[31,10,34,6,"arg0"],[31,14,34,10],[31,19,34,15,"undefined"],[31,28,34,24],[31,32,34,28,"arg0"],[31,36,34,32],[31,41,34,37],[31,45,34,41],[31,47,34,43],[32,8,35,3],[32,15,35,10,"arg0"],[32,19,35,14],[33,6,36,2],[34,6,38,2],[34,10,38,6,"arg0"],[34,14,38,10],[34,15,38,11,"length"],[34,21,38,17],[34,24,38,20],[34,25,38,21],[34,27,38,23],[35,8,39,3,"args"],[35,12,39,7],[35,15,39,10,"arg0"],[35,19,39,14],[36,6,40,2],[37,6,42,2],[37,10,42,8,"result"],[37,16,42,14],[37,19,42,17,"fn"],[37,21,42,19],[37,22,42,20,"args"],[37,26,42,24],[37,27,42,25],[39,6,44,2],[40,6,45,2],[41,6,46,2],[42,6,47,2],[42,10,47,6],[42,17,47,13,"result"],[42,23,47,19],[42,28,47,24],[42,36,47,32],[42,38,47,34],[43,8,48,3],[43,13,48,8],[43,17,48,12,"len"],[43,20,48,15],[43,23,48,18,"result"],[43,29,48,24],[43,30,48,25,"length"],[43,36,48,31],[43,38,48,33,"i"],[43,39,48,34],[43,42,48,37],[43,43,48,38],[43,45,48,40,"i"],[43,46,48,41],[43,49,48,44,"len"],[43,52,48,47],[43,54,48,49,"i"],[43,55,48,50],[43,57,48,52],[43,59,48,54],[44,10,49,4,"result"],[44,16,49,10],[44,17,49,11,"i"],[44,18,49,12],[44,19,49,13],[44,22,49,16,"Math"],[44,26,49,20],[44,27,49,21,"round"],[44,32,49,26],[44,33,49,27,"result"],[44,39,49,33],[44,40,49,34,"i"],[44,41,49,35],[44,42,49,36],[44,43,49,37],[45,8,50,3],[46,6,51,2],[47,6,53,2],[47,13,53,9,"result"],[47,19,53,15],[48,4,54,1],[48,5,54,2],[50,4,56,1],[51,4,57,1],[51,8,57,5],[51,20,57,17],[51,24,57,21,"fn"],[51,26,57,23],[51,28,57,25],[52,6,58,2,"wrappedFn"],[52,15,58,11],[52,16,58,12,"conversion"],[52,26,58,22],[52,29,58,25,"fn"],[52,31,58,27],[52,32,58,28,"conversion"],[52,42,58,38],[53,4,59,1],[54,4,61,1],[54,11,61,8,"wrappedFn"],[54,20,61,17],[55,2,62,0],[56,2,64,0,"models"],[56,8,64,6],[56,9,64,7,"forEach"],[56,16,64,14],[56,17,64,15],[56,27,64,15,"fromModel"],[56,36,64,24],[56,38,64,28],[57,4,65,1,"convert"],[57,11,65,8],[57,12,65,9,"fromModel"],[57,21,65,18],[57,22,65,19],[57,25,65,22],[57,26,65,23],[57,27,65,24],[58,4,67,1,"Object"],[58,10,67,7],[58,11,67,8,"defineProperty"],[58,25,67,22],[58,26,67,23,"convert"],[58,33,67,30],[58,34,67,31,"fromModel"],[58,43,67,40],[58,44,67,41],[58,46,67,43],[58,56,67,53],[58,58,67,55],[59,6,67,56,"value"],[59,11,67,61],[59,13,67,63,"_$$_REQUIRE"],[59,24,67,63],[59,25,67,63,"_dependencyMap"],[59,39,67,63],[59,61,67,75,"fromModel"],[59,70,67,84],[59,71,67,85],[59,72,67,86,"channels"],[60,4,67,94],[60,5,67,95],[60,6,67,96],[61,4,68,1,"Object"],[61,10,68,7],[61,11,68,8,"defineProperty"],[61,25,68,22],[61,26,68,23,"convert"],[61,33,68,30],[61,34,68,31,"fromModel"],[61,43,68,40],[61,44,68,41],[61,46,68,43],[61,54,68,51],[61,56,68,53],[62,6,68,54,"value"],[62,11,68,59],[62,13,68,61,"_$$_REQUIRE"],[62,24,68,61],[62,25,68,61,"_dependencyMap"],[62,39,68,61],[62,61,68,73,"fromModel"],[62,70,68,82],[62,71,68,83],[62,72,68,84,"labels"],[63,4,68,90],[63,5,68,91],[63,6,68,92],[64,4,70,1],[64,8,70,7,"routes"],[64,14,70,13],[64,17,70,16,"_$$_REQUIRE"],[64,28,70,16],[64,29,70,16,"_dependencyMap"],[64,43,70,16],[64,59,70,22,"fromModel"],[64,68,70,31],[64,69,70,32],[65,4,71,1],[65,8,71,7,"routeModels"],[65,19,71,18],[65,22,71,21,"Object"],[65,28,71,27],[65,29,71,28,"keys"],[65,33,71,32],[65,34,71,33,"routes"],[65,40,71,39],[65,41,71,40],[66,4,73,1,"routeModels"],[66,15,73,12],[66,16,73,13,"forEach"],[66,23,73,20],[66,24,73,21],[66,34,73,21,"toModel"],[66,41,73,28],[66,43,73,32],[67,6,74,2],[67,10,74,8,"fn"],[67,12,74,10],[67,15,74,13,"routes"],[67,21,74,19],[67,22,74,20,"toModel"],[67,29,74,27],[67,30,74,28],[68,6,76,2,"convert"],[68,13,76,9],[68,14,76,10,"fromModel"],[68,23,76,19],[68,24,76,20],[68,25,76,21,"toModel"],[68,32,76,28],[68,33,76,29],[68,36,76,32,"wrapRounded"],[68,47,76,43],[68,48,76,44,"fn"],[68,50,76,46],[68,51,76,47],[69,6,77,2,"convert"],[69,13,77,9],[69,14,77,10,"fromModel"],[69,23,77,19],[69,24,77,20],[69,25,77,21,"toModel"],[69,32,77,28],[69,33,77,29],[69,34,77,30,"raw"],[69,37,77,33],[69,40,77,36,"wrapRaw"],[69,47,77,43],[69,48,77,44,"fn"],[69,50,77,46],[69,51,77,47],[70,4,78,1],[70,5,78,2],[70,6,78,3],[71,2,79,0],[71,3,79,1],[71,4,79,2],[72,2,81,0,"module"],[72,8,81,6],[72,9,81,7,"exports"],[72,16,81,14],[72,19,81,17,"convert"],[72,26,81,24],[73,0,81,25],[73,3]],"functionMap":{"names":["<global>","wrapRaw","wrappedFn","wrapRounded","models.forEach$argument_0","routeModels.forEach$argument_0"],"mappings":"AAA;ACO;mBCC;EDW;CDQ;AGE;mBDC;ECuB;CHQ;eIE;qBCS;EDK;CJC"}},"type":"js/module"}]}