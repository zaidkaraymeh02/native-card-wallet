{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":137,"column":0,"index":3810}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":137,"column":0,"index":3810}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":215},"end":{"line":11,"column":34,"index":249}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = processTransformOrigin;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  var INDEX_X = 0;\n  var INDEX_Y = 1;\n  var INDEX_Z = 2;\n\n  /* eslint-disable no-labels */\n  function processTransformOrigin(transformOrigin) {\n    if (typeof transformOrigin === 'string') {\n      var transformOriginString = transformOrigin;\n      var regex = /(top|bottom|left|right|center|\\d+(?:%|px)|0)/gi;\n      var transformOriginArray = ['50%', '50%', 0];\n      var index = INDEX_X;\n      var matches;\n      outer: while (matches = regex.exec(transformOriginString)) {\n        var nextIndex = index + 1;\n        var value = matches[0];\n        var valueLower = value.toLowerCase();\n        switch (valueLower) {\n          case 'left':\n          case 'right':\n            {\n              (0, _invariant.default)(index === INDEX_X, 'Transform-origin %s can only be used for x-position', value);\n              transformOriginArray[INDEX_X] = valueLower === 'left' ? 0 : '100%';\n              break;\n            }\n          case 'top':\n          case 'bottom':\n            {\n              (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin %s can only be used for y-position', value);\n              transformOriginArray[INDEX_Y] = valueLower === 'top' ? 0 : '100%';\n\n              // Handle [[ center | left | right ] && [ center | top | bottom ]] <length>?\n              if (index === INDEX_X) {\n                var horizontal = regex.exec(transformOriginString);\n                if (horizontal == null) {\n                  break outer;\n                }\n                switch (horizontal[0].toLowerCase()) {\n                  case 'left':\n                    transformOriginArray[INDEX_X] = 0;\n                    break;\n                  case 'right':\n                    transformOriginArray[INDEX_X] = '100%';\n                    break;\n                  case 'center':\n                    transformOriginArray[INDEX_X] = '50%';\n                    break;\n                  default:\n                    (0, _invariant.default)(false, 'Could not parse transform-origin: %s', transformOriginString);\n                }\n                nextIndex = INDEX_Z;\n              }\n              break;\n            }\n          case 'center':\n            {\n              (0, _invariant.default)(index !== INDEX_Z, 'Transform-origin value %s cannot be used for z-position', value);\n              transformOriginArray[index] = '50%';\n              break;\n            }\n          default:\n            {\n              if (value.endsWith('%')) {\n                transformOriginArray[index] = value;\n              } else {\n                transformOriginArray[index] = parseFloat(value); // Remove `px`\n              }\n              break;\n            }\n        }\n        index = nextIndex;\n      }\n      transformOrigin = transformOriginArray;\n    }\n    if (__DEV__) {\n      _validateTransformOrigin(transformOrigin);\n    }\n    return transformOrigin;\n  }\n  function _validateTransformOrigin(transformOrigin) {\n    (0, _invariant.default)(transformOrigin.length === 3, 'Transform origin must have exactly 3 values.');\n    var _transformOrigin = (0, _slicedToArray2.default)(transformOrigin, 3),\n      x = _transformOrigin[0],\n      y = _transformOrigin[1],\n      z = _transformOrigin[2];\n    (0, _invariant.default)(typeof x === 'number' || typeof x === 'string' && x.endsWith('%'), 'Transform origin x-position must be a number. Passed value: %s.', x);\n    (0, _invariant.default)(typeof y === 'number' || typeof y === 'string' && y.endsWith('%'), 'Transform origin y-position must be a number. Passed value: %s.', y);\n    (0, _invariant.default)(typeof z === 'number', 'Transform origin z-position must be a number. Passed value: %s.', z);\n  }\n});","lineCount":107,"map":[[8,2,11,0],[8,6,11,0,"_invariant"],[8,16,11,0],[8,19,11,0,"_interopRequireDefault"],[8,41,11,0],[8,42,11,0,"_$$_REQUIRE"],[8,53,11,0],[8,54,11,0,"_dependencyMap"],[8,68,11,0],[9,2,1,0],[10,0,2,0],[11,0,3,0],[12,0,4,0],[13,0,5,0],[14,0,6,0],[15,0,7,0],[16,0,8,0],[17,0,9,0],[19,2,13,0],[19,6,13,6,"INDEX_X"],[19,13,13,13],[19,16,13,16],[19,17,13,17],[20,2,14,0],[20,6,14,6,"INDEX_Y"],[20,13,14,13],[20,16,14,16],[20,17,14,17],[21,2,15,0],[21,6,15,6,"INDEX_Z"],[21,13,15,13],[21,16,15,16],[21,17,15,17],[23,2,17,0],[24,2,18,15],[24,11,18,24,"processTransformOrigin"],[24,33,18,46,"processTransformOrigin"],[24,34,19,2,"transformOrigin"],[24,49,19,50],[24,51,20,26],[25,4,21,2],[25,8,21,6],[25,15,21,13,"transformOrigin"],[25,30,21,28],[25,35,21,33],[25,43,21,41],[25,45,21,43],[26,6,22,4],[26,10,22,10,"transformOriginString"],[26,31,22,31],[26,34,22,34,"transformOrigin"],[26,49,22,49],[27,6,23,4],[27,10,23,10,"regex"],[27,15,23,15],[27,18,23,18],[27,66,23,66],[28,6,24,4],[28,10,24,10,"transformOriginArray"],[28,30,24,54],[28,33,24,57],[28,34,24,58],[28,39,24,63],[28,41,24,65],[28,46,24,70],[28,48,24,72],[28,49,24,73],[28,50,24,74],[29,6,26,4],[29,10,26,8,"index"],[29,15,26,13],[29,18,26,16,"INDEX_X"],[29,25,26,23],[30,6,27,4],[30,10,27,8,"matches"],[30,17,27,15],[31,6,28,4,"outer"],[31,11,28,9],[31,13,28,11],[31,20,28,19,"matches"],[31,27,28,26],[31,30,28,29,"regex"],[31,35,28,34],[31,36,28,35,"exec"],[31,40,28,39],[31,41,28,40,"transformOriginString"],[31,62,28,61],[31,63,28,62],[31,65,28,65],[32,8,29,6],[32,12,29,10,"nextIndex"],[32,21,29,19],[32,24,29,22,"index"],[32,29,29,27],[32,32,29,30],[32,33,29,31],[33,8,31,6],[33,12,31,12,"value"],[33,17,31,17],[33,20,31,20,"matches"],[33,27,31,27],[33,28,31,28],[33,29,31,29],[33,30,31,30],[34,8,32,6],[34,12,32,12,"valueLower"],[34,22,32,22],[34,25,32,25,"value"],[34,30,32,30],[34,31,32,31,"toLowerCase"],[34,42,32,42],[34,43,32,43],[34,44,32,44],[35,8,34,6],[35,16,34,14,"valueLower"],[35,26,34,24],[36,10,35,8],[36,15,35,13],[36,21,35,19],[37,10,36,8],[37,15,36,13],[37,22,36,20],[38,12,36,22],[39,14,37,10],[39,18,37,10,"invariant"],[39,36,37,19],[39,38,38,12,"index"],[39,43,38,17],[39,48,38,22,"INDEX_X"],[39,55,38,29],[39,57,39,12],[39,110,39,65],[39,112,40,12,"value"],[39,117,41,10],[39,118,41,11],[40,14,42,10,"transformOriginArray"],[40,34,42,30],[40,35,42,31,"INDEX_X"],[40,42,42,38],[40,43,42,39],[40,46,42,42,"valueLower"],[40,56,42,52],[40,61,42,57],[40,67,42,63],[40,70,42,66],[40,71,42,67],[40,74,42,70],[40,80,42,76],[41,14,43,10],[42,12,44,8],[43,10,45,8],[43,15,45,13],[43,20,45,18],[44,10,46,8],[44,15,46,13],[44,23,46,21],[45,12,46,23],[46,14,47,10],[46,18,47,10,"invariant"],[46,36,47,19],[46,38,48,12,"index"],[46,43,48,17],[46,48,48,22,"INDEX_Z"],[46,55,48,29],[46,57,49,12],[46,110,49,65],[46,112,50,12,"value"],[46,117,51,10],[46,118,51,11],[47,14,52,10,"transformOriginArray"],[47,34,52,30],[47,35,52,31,"INDEX_Y"],[47,42,52,38],[47,43,52,39],[47,46,52,42,"valueLower"],[47,56,52,52],[47,61,52,57],[47,66,52,62],[47,69,52,65],[47,70,52,66],[47,73,52,69],[47,79,52,75],[49,14,54,10],[50,14,55,10],[50,18,55,14,"index"],[50,23,55,19],[50,28,55,24,"INDEX_X"],[50,35,55,31],[50,37,55,33],[51,16,56,12],[51,20,56,18,"horizontal"],[51,30,56,28],[51,33,56,31,"regex"],[51,38,56,36],[51,39,56,37,"exec"],[51,43,56,41],[51,44,56,42,"transformOriginString"],[51,65,56,63],[51,66,56,64],[52,16,57,12],[52,20,57,16,"horizontal"],[52,30,57,26],[52,34,57,30],[52,38,57,34],[52,40,57,36],[53,18,58,14],[53,24,58,20,"outer"],[53,29,58,25],[54,16,59,12],[55,16,61,12],[55,24,61,20,"horizontal"],[55,34,61,30],[55,35,61,31],[55,36,61,32],[55,37,61,33],[55,38,61,34,"toLowerCase"],[55,49,61,45],[55,50,61,46],[55,51,61,47],[56,18,62,14],[56,23,62,19],[56,29,62,25],[57,20,63,16,"transformOriginArray"],[57,40,63,36],[57,41,63,37,"INDEX_X"],[57,48,63,44],[57,49,63,45],[57,52,63,48],[57,53,63,49],[58,20,64,16],[59,18,65,14],[59,23,65,19],[59,30,65,26],[60,20,66,16,"transformOriginArray"],[60,40,66,36],[60,41,66,37,"INDEX_X"],[60,48,66,44],[60,49,66,45],[60,52,66,48],[60,58,66,54],[61,20,67,16],[62,18,68,14],[62,23,68,19],[62,31,68,27],[63,20,69,16,"transformOriginArray"],[63,40,69,36],[63,41,69,37,"INDEX_X"],[63,48,69,44],[63,49,69,45],[63,52,69,48],[63,57,69,53],[64,20,70,16],[65,18,71,14],[66,20,72,16],[66,24,72,16,"invariant"],[66,42,72,25],[66,44,73,18],[66,49,73,23],[66,51,74,18],[66,89,74,56],[66,91,75,18,"transformOriginString"],[66,112,76,16],[66,113,76,17],[67,16,77,12],[68,16,78,12,"nextIndex"],[68,25,78,21],[68,28,78,24,"INDEX_Z"],[68,35,78,31],[69,14,79,10],[70,14,81,10],[71,12,82,8],[72,10,83,8],[72,15,83,13],[72,23,83,21],[73,12,83,23],[74,14,84,10],[74,18,84,10,"invariant"],[74,36,84,19],[74,38,85,12,"index"],[74,43,85,17],[74,48,85,22,"INDEX_Z"],[74,55,85,29],[74,57,86,12],[74,114,86,69],[74,116,87,12,"value"],[74,121,88,10],[74,122,88,11],[75,14,89,10,"transformOriginArray"],[75,34,89,30],[75,35,89,31,"index"],[75,40,89,36],[75,41,89,37],[75,44,89,40],[75,49,89,45],[76,14,90,10],[77,12,91,8],[78,10,92,8],[79,12,92,17],[80,14,93,10],[80,18,93,14,"value"],[80,23,93,19],[80,24,93,20,"endsWith"],[80,32,93,28],[80,33,93,29],[80,36,93,32],[80,37,93,33],[80,39,93,35],[81,16,94,12,"transformOriginArray"],[81,36,94,32],[81,37,94,33,"index"],[81,42,94,38],[81,43,94,39],[81,46,94,42,"value"],[81,51,94,47],[82,14,95,10],[82,15,95,11],[82,21,95,17],[83,16,96,12,"transformOriginArray"],[83,36,96,32],[83,37,96,33,"index"],[83,42,96,38],[83,43,96,39],[83,46,96,42,"parseFloat"],[83,56,96,52],[83,57,96,53,"value"],[83,62,96,58],[83,63,96,59],[83,64,96,60],[83,65,96,61],[84,14,97,10],[85,14,98,10],[86,12,99,8],[87,8,100,6],[88,8,102,6,"index"],[88,13,102,11],[88,16,102,14,"nextIndex"],[88,25,102,23],[89,6,103,4],[90,6,105,4,"transformOrigin"],[90,21,105,19],[90,24,105,22,"transformOriginArray"],[90,44,105,42],[91,4,106,2],[92,4,108,2],[92,8,108,6,"__DEV__"],[92,15,108,13],[92,17,108,15],[93,6,109,4,"_validateTransformOrigin"],[93,30,109,28],[93,31,109,29,"transformOrigin"],[93,46,109,44],[93,47,109,45],[94,4,110,2],[95,4,112,2],[95,11,112,9,"transformOrigin"],[95,26,112,24],[96,2,113,0],[97,2,115,0],[97,11,115,9,"_validateTransformOrigin"],[97,35,115,33,"_validateTransformOrigin"],[97,36,115,34,"transformOrigin"],[97,51,115,73],[97,53,115,75],[98,4,116,2],[98,8,116,2,"invariant"],[98,26,116,11],[98,28,117,4,"transformOrigin"],[98,43,117,19],[98,44,117,20,"length"],[98,50,117,26],[98,55,117,31],[98,56,117,32],[98,58,118,4],[98,104,119,2],[98,105,119,3],[99,4,120,2],[99,8,120,2,"_transformOrigin"],[99,24,120,2],[99,31,120,2,"_slicedToArray2"],[99,46,120,2],[99,47,120,2,"default"],[99,54,120,2],[99,56,120,20,"transformOrigin"],[99,71,120,35],[100,6,120,9,"x"],[100,7,120,10],[100,10,120,10,"_transformOrigin"],[100,26,120,10],[101,6,120,12,"y"],[101,7,120,13],[101,10,120,13,"_transformOrigin"],[101,26,120,13],[102,6,120,15,"z"],[102,7,120,16],[102,10,120,16,"_transformOrigin"],[102,26,120,16],[103,4,121,2],[103,8,121,2,"invariant"],[103,26,121,11],[103,28,122,4],[103,35,122,11,"x"],[103,36,122,12],[103,41,122,17],[103,49,122,25],[103,53,122,30],[103,60,122,37,"x"],[103,61,122,38],[103,66,122,43],[103,74,122,51],[103,78,122,55,"x"],[103,79,122,56],[103,80,122,57,"endsWith"],[103,88,122,65],[103,89,122,66],[103,92,122,69],[103,93,122,71],[103,95,123,4],[103,160,123,69],[103,162,124,4,"x"],[103,163,125,2],[103,164,125,3],[104,4,126,2],[104,8,126,2,"invariant"],[104,26,126,11],[104,28,127,4],[104,35,127,11,"y"],[104,36,127,12],[104,41,127,17],[104,49,127,25],[104,53,127,30],[104,60,127,37,"y"],[104,61,127,38],[104,66,127,43],[104,74,127,51],[104,78,127,55,"y"],[104,79,127,56],[104,80,127,57,"endsWith"],[104,88,127,65],[104,89,127,66],[104,92,127,69],[104,93,127,71],[104,95,128,4],[104,160,128,69],[104,162,129,4,"y"],[104,163,130,2],[104,164,130,3],[105,4,131,2],[105,8,131,2,"invariant"],[105,26,131,11],[105,28,132,4],[105,35,132,11,"z"],[105,36,132,12],[105,41,132,17],[105,49,132,25],[105,51,133,4],[105,116,133,69],[105,118,134,4,"z"],[105,119,135,2],[105,120,135,3],[106,2,136,0],[107,0,136,1],[107,3]],"functionMap":{"names":["<global>","processTransformOrigin","_validateTransformOrigin"],"mappings":"AAA;eCiB;CD+F;AEE;CFqB"}},"type":"js/module"}]}