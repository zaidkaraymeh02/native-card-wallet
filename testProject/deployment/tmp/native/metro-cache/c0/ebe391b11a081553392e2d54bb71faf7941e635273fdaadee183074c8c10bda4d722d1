{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.append = append;\n  exports.appendTransform = appendTransform;\n  exports.identity = void 0;\n  exports.reset = reset;\n  exports.toArray = toArray;\n  /**\n   * based on\n   * https://github.com/CreateJS/EaselJS/blob/631cdffb85eff9413dab43b4676f059b4232d291/src/easeljs/geom/Matrix2D.js\n   */\n  var DEG_TO_RAD = Math.PI / 180;\n  var identity = exports.identity = [1, 0, 0, 1, 0, 0];\n  var a = 1;\n  var b = 0;\n  var c = 0;\n  var d = 1;\n  var tx = 0;\n  var ty = 0;\n  var hasInitialState = true;\n\n  /**\n   * Represents an affine transformation matrix, and provides tools for concatenating transforms.\n   *\n   * This matrix can be visualized as:\n   *\n   * \t[ a  c  tx\n   * \t  b  d  ty\n   * \t  0  0  1  ]\n   *\n   * Note the locations of b and c.\n   **/\n\n  /**\n   * Reset current matrix to an identity matrix.\n   * @method reset\n   **/\n  function reset() {\n    if (hasInitialState) {\n      return;\n    }\n    a = d = 1;\n    b = c = tx = ty = 0;\n    hasInitialState = true;\n  }\n\n  /**\n   * Returns an array with current matrix values.\n   * @method toArray\n   * @return {Array} an array with current matrix values.\n   **/\n  function toArray() {\n    if (hasInitialState) {\n      return identity;\n    }\n    return [a, b, c, d, tx, ty];\n  }\n\n  /**\n   * Appends the specified matrix properties to this matrix. All parameters are required.\n   * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.\n   * @method append\n   * @param {Number} a2\n   * @param {Number} b2\n   * @param {Number} c2\n   * @param {Number} d2\n   * @param {Number} tx2\n   * @param {Number} ty2\n   **/\n  function append(a2, b2, c2, d2, tx2, ty2) {\n    var change = a2 !== 1 || b2 !== 0 || c2 !== 0 || d2 !== 1;\n    var translate = tx2 !== 0 || ty2 !== 0;\n    if (!change && !translate) {\n      return;\n    }\n    if (hasInitialState) {\n      hasInitialState = false;\n      a = a2;\n      b = b2;\n      c = c2;\n      d = d2;\n      tx = tx2;\n      ty = ty2;\n      return;\n    }\n    var a1 = a;\n    var b1 = b;\n    var c1 = c;\n    var d1 = d;\n    if (change) {\n      a = a1 * a2 + c1 * b2;\n      b = b1 * a2 + d1 * b2;\n      c = a1 * c2 + c1 * d2;\n      d = b1 * c2 + d1 * d2;\n    }\n    if (translate) {\n      tx = a1 * tx2 + c1 * ty2 + tx;\n      ty = b1 * tx2 + d1 * ty2 + ty;\n    }\n  }\n\n  /**\n   * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.\n   * For example, you can use this to generate a matrix representing the transformations of a display object:\n   *\n   * \treset();\n   * \tappendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\n   * \tvar matrix = toArray()\n   *\n   * @method appendTransform\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} scaleX\n   * @param {Number} scaleY\n   * @param {Number} rotation\n   * @param {Number} skewX\n   * @param {Number} skewY\n   * @param {Number} regX Optional.\n   * @param {Number} regY Optional.\n   **/\n  function appendTransform(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\n    if (x === 0 && y === 0 && scaleX === 1 && scaleY === 1 && rotation === 0 && skewX === 0 && skewY === 0 && regX === 0 && regY === 0) {\n      return;\n    }\n    var cos, sin;\n    if (rotation % 360) {\n      var r = rotation * DEG_TO_RAD;\n      cos = Math.cos(r);\n      sin = Math.sin(r);\n    } else {\n      cos = 1;\n      sin = 0;\n    }\n    var a2 = cos * scaleX;\n    var b2 = sin * scaleX;\n    var c2 = -sin * scaleY;\n    var d2 = cos * scaleY;\n    if (skewX || skewY) {\n      var b1 = Math.tan(skewY * DEG_TO_RAD);\n      var c1 = Math.tan(skewX * DEG_TO_RAD);\n      append(a2 + c1 * b2, b1 * a2 + b2, c2 + c1 * d2, b1 * c2 + d2, x, y);\n    } else {\n      append(a2, b2, c2, d2, x, y);\n    }\n    if (regX || regY) {\n      // append the registration offset:\n      tx -= regX * a + regY * c;\n      ty -= regX * b + regY * d;\n      hasInitialState = false;\n    }\n  }\n});","lineCount":154,"map":[[10,2,1,0],[11,0,2,0],[12,0,3,0],[13,0,4,0],[14,2,5,0],[14,6,5,6,"DEG_TO_RAD"],[14,16,5,16],[14,19,5,19,"Math"],[14,23,5,23],[14,24,5,24,"PI"],[14,26,5,26],[14,29,5,29],[14,32,5,32],[15,2,7,7],[15,6,7,13,"identity"],[15,14,7,71],[15,17,7,71,"exports"],[15,24,7,71],[15,25,7,71,"identity"],[15,33,7,71],[15,36,7,74],[15,37,8,2],[15,38,8,3],[15,40,8,5],[15,41,8,6],[15,43,8,8],[15,44,8,9],[15,46,8,11],[15,47,8,12],[15,49,8,14],[15,50,8,15],[15,52,8,17],[15,53,8,18],[15,54,9,1],[16,2,11,0],[16,6,11,4,"a"],[16,7,11,5],[16,10,11,8],[16,11,11,9],[17,2,12,0],[17,6,12,4,"b"],[17,7,12,5],[17,10,12,8],[17,11,12,9],[18,2,13,0],[18,6,13,4,"c"],[18,7,13,5],[18,10,13,8],[18,11,13,9],[19,2,14,0],[19,6,14,4,"d"],[19,7,14,5],[19,10,14,8],[19,11,14,9],[20,2,15,0],[20,6,15,4,"tx"],[20,8,15,6],[20,11,15,9],[20,12,15,10],[21,2,16,0],[21,6,16,4,"ty"],[21,8,16,6],[21,11,16,9],[21,12,16,10],[22,2,17,0],[22,6,17,4,"hasInitialState"],[22,21,17,19],[22,24,17,22],[22,28,17,26],[24,2,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[36,2,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,2,35,7],[40,11,35,16,"reset"],[40,16,35,21,"reset"],[40,17,35,21],[40,19,35,24],[41,4,36,2],[41,8,36,6,"hasInitialState"],[41,23,36,21],[41,25,36,23],[42,6,37,4],[43,4,38,2],[44,4,39,2,"a"],[44,5,39,3],[44,8,39,6,"d"],[44,9,39,7],[44,12,39,10],[44,13,39,11],[45,4,40,2,"b"],[45,5,40,3],[45,8,40,6,"c"],[45,9,40,7],[45,12,40,10,"tx"],[45,14,40,12],[45,17,40,15,"ty"],[45,19,40,17],[45,22,40,20],[45,23,40,21],[46,4,41,2,"hasInitialState"],[46,19,41,17],[46,22,41,20],[46,26,41,24],[47,2,42,0],[49,2,44,0],[50,0,45,0],[51,0,46,0],[52,0,47,0],[53,0,48,0],[54,2,49,7],[54,11,49,16,"toArray"],[54,18,49,23,"toArray"],[54,19,49,23],[54,21,49,76],[55,4,50,2],[55,8,50,6,"hasInitialState"],[55,23,50,21],[55,25,50,23],[56,6,51,4],[56,13,51,11,"identity"],[56,21,51,19],[57,4,52,2],[58,4,53,2],[58,11,53,9],[58,12,53,10,"a"],[58,13,53,11],[58,15,53,13,"b"],[58,16,53,14],[58,18,53,16,"c"],[58,19,53,17],[58,21,53,19,"d"],[58,22,53,20],[58,24,53,22,"tx"],[58,26,53,24],[58,28,53,26,"ty"],[58,30,53,28],[58,31,53,29],[59,2,54,0],[61,2,56,0],[62,0,57,0],[63,0,58,0],[64,0,59,0],[65,0,60,0],[66,0,61,0],[67,0,62,0],[68,0,63,0],[69,0,64,0],[70,0,65,0],[71,0,66,0],[72,2,67,7],[72,11,67,16,"append"],[72,17,67,22,"append"],[72,18,68,2,"a2"],[72,20,68,12],[72,22,69,2,"b2"],[72,24,69,12],[72,26,70,2,"c2"],[72,28,70,12],[72,30,71,2,"d2"],[72,32,71,12],[72,34,72,2,"tx2"],[72,37,72,13],[72,39,73,2,"ty2"],[72,42,73,13],[72,44,74,2],[73,4,75,2],[73,8,75,8,"change"],[73,14,75,14],[73,17,75,17,"a2"],[73,19,75,19],[73,24,75,24],[73,25,75,25],[73,29,75,29,"b2"],[73,31,75,31],[73,36,75,36],[73,37,75,37],[73,41,75,41,"c2"],[73,43,75,43],[73,48,75,48],[73,49,75,49],[73,53,75,53,"d2"],[73,55,75,55],[73,60,75,60],[73,61,75,61],[74,4,76,2],[74,8,76,8,"translate"],[74,17,76,17],[74,20,76,20,"tx2"],[74,23,76,23],[74,28,76,28],[74,29,76,29],[74,33,76,33,"ty2"],[74,36,76,36],[74,41,76,41],[74,42,76,42],[75,4,77,2],[75,8,77,6],[75,9,77,7,"change"],[75,15,77,13],[75,19,77,17],[75,20,77,18,"translate"],[75,29,77,27],[75,31,77,29],[76,6,78,4],[77,4,79,2],[78,4,80,2],[78,8,80,6,"hasInitialState"],[78,23,80,21],[78,25,80,23],[79,6,81,4,"hasInitialState"],[79,21,81,19],[79,24,81,22],[79,29,81,27],[80,6,82,4,"a"],[80,7,82,5],[80,10,82,8,"a2"],[80,12,82,10],[81,6,83,4,"b"],[81,7,83,5],[81,10,83,8,"b2"],[81,12,83,10],[82,6,84,4,"c"],[82,7,84,5],[82,10,84,8,"c2"],[82,12,84,10],[83,6,85,4,"d"],[83,7,85,5],[83,10,85,8,"d2"],[83,12,85,10],[84,6,86,4,"tx"],[84,8,86,6],[84,11,86,9,"tx2"],[84,14,86,12],[85,6,87,4,"ty"],[85,8,87,6],[85,11,87,9,"ty2"],[85,14,87,12],[86,6,88,4],[87,4,89,2],[88,4,90,2],[88,8,90,8,"a1"],[88,10,90,10],[88,13,90,13,"a"],[88,14,90,14],[89,4,91,2],[89,8,91,8,"b1"],[89,10,91,10],[89,13,91,13,"b"],[89,14,91,14],[90,4,92,2],[90,8,92,8,"c1"],[90,10,92,10],[90,13,92,13,"c"],[90,14,92,14],[91,4,93,2],[91,8,93,8,"d1"],[91,10,93,10],[91,13,93,13,"d"],[91,14,93,14],[92,4,94,2],[92,8,94,6,"change"],[92,14,94,12],[92,16,94,14],[93,6,95,4,"a"],[93,7,95,5],[93,10,95,8,"a1"],[93,12,95,10],[93,15,95,13,"a2"],[93,17,95,15],[93,20,95,18,"c1"],[93,22,95,20],[93,25,95,23,"b2"],[93,27,95,25],[94,6,96,4,"b"],[94,7,96,5],[94,10,96,8,"b1"],[94,12,96,10],[94,15,96,13,"a2"],[94,17,96,15],[94,20,96,18,"d1"],[94,22,96,20],[94,25,96,23,"b2"],[94,27,96,25],[95,6,97,4,"c"],[95,7,97,5],[95,10,97,8,"a1"],[95,12,97,10],[95,15,97,13,"c2"],[95,17,97,15],[95,20,97,18,"c1"],[95,22,97,20],[95,25,97,23,"d2"],[95,27,97,25],[96,6,98,4,"d"],[96,7,98,5],[96,10,98,8,"b1"],[96,12,98,10],[96,15,98,13,"c2"],[96,17,98,15],[96,20,98,18,"d1"],[96,22,98,20],[96,25,98,23,"d2"],[96,27,98,25],[97,4,99,2],[98,4,100,2],[98,8,100,6,"translate"],[98,17,100,15],[98,19,100,17],[99,6,101,4,"tx"],[99,8,101,6],[99,11,101,9,"a1"],[99,13,101,11],[99,16,101,14,"tx2"],[99,19,101,17],[99,22,101,20,"c1"],[99,24,101,22],[99,27,101,25,"ty2"],[99,30,101,28],[99,33,101,31,"tx"],[99,35,101,33],[100,6,102,4,"ty"],[100,8,102,6],[100,11,102,9,"b1"],[100,13,102,11],[100,16,102,14,"tx2"],[100,19,102,17],[100,22,102,20,"d1"],[100,24,102,22],[100,27,102,25,"ty2"],[100,30,102,28],[100,33,102,31,"ty"],[100,35,102,33],[101,4,103,2],[102,2,104,0],[104,2,106,0],[105,0,107,0],[106,0,108,0],[107,0,109,0],[108,0,110,0],[109,0,111,0],[110,0,112,0],[111,0,113,0],[112,0,114,0],[113,0,115,0],[114,0,116,0],[115,0,117,0],[116,0,118,0],[117,0,119,0],[118,0,120,0],[119,0,121,0],[120,0,122,0],[121,0,123,0],[122,0,124,0],[123,2,125,7],[123,11,125,16,"appendTransform"],[123,26,125,31,"appendTransform"],[123,27,126,2,"x"],[123,28,126,11],[123,30,127,2,"y"],[123,31,127,11],[123,33,128,2,"scaleX"],[123,39,128,16],[123,41,129,2,"scaleY"],[123,47,129,16],[123,49,130,2,"rotation"],[123,57,130,18],[123,59,131,2,"skewX"],[123,64,131,15],[123,66,132,2,"skewY"],[123,71,132,15],[123,73,133,2,"regX"],[123,77,133,14],[123,79,134,2,"regY"],[123,83,134,14],[123,85,135,2],[124,4,136,2],[124,8,137,4,"x"],[124,9,137,5],[124,14,137,10],[124,15,137,11],[124,19,138,4,"y"],[124,20,138,5],[124,25,138,10],[124,26,138,11],[124,30,139,4,"scaleX"],[124,36,139,10],[124,41,139,15],[124,42,139,16],[124,46,140,4,"scaleY"],[124,52,140,10],[124,57,140,15],[124,58,140,16],[124,62,141,4,"rotation"],[124,70,141,12],[124,75,141,17],[124,76,141,18],[124,80,142,4,"skewX"],[124,85,142,9],[124,90,142,14],[124,91,142,15],[124,95,143,4,"skewY"],[124,100,143,9],[124,105,143,14],[124,106,143,15],[124,110,144,4,"regX"],[124,114,144,8],[124,119,144,13],[124,120,144,14],[124,124,145,4,"regY"],[124,128,145,8],[124,133,145,13],[124,134,145,14],[124,136,146,4],[125,6,147,4],[126,4,148,2],[127,4,149,2],[127,8,149,6,"cos"],[127,11,149,9],[127,13,149,11,"sin"],[127,16,149,14],[128,4,150,2],[128,8,150,6,"rotation"],[128,16,150,14],[128,19,150,17],[128,22,150,20],[128,24,150,22],[129,6,151,4],[129,10,151,10,"r"],[129,11,151,11],[129,14,151,14,"rotation"],[129,22,151,22],[129,25,151,25,"DEG_TO_RAD"],[129,35,151,35],[130,6,152,4,"cos"],[130,9,152,7],[130,12,152,10,"Math"],[130,16,152,14],[130,17,152,15,"cos"],[130,20,152,18],[130,21,152,19,"r"],[130,22,152,20],[130,23,152,21],[131,6,153,4,"sin"],[131,9,153,7],[131,12,153,10,"Math"],[131,16,153,14],[131,17,153,15,"sin"],[131,20,153,18],[131,21,153,19,"r"],[131,22,153,20],[131,23,153,21],[132,4,154,2],[132,5,154,3],[132,11,154,9],[133,6,155,4,"cos"],[133,9,155,7],[133,12,155,10],[133,13,155,11],[134,6,156,4,"sin"],[134,9,156,7],[134,12,156,10],[134,13,156,11],[135,4,157,2],[136,4,159,2],[136,8,159,8,"a2"],[136,10,159,10],[136,13,159,13,"cos"],[136,16,159,16],[136,19,159,19,"scaleX"],[136,25,159,25],[137,4,160,2],[137,8,160,8,"b2"],[137,10,160,10],[137,13,160,13,"sin"],[137,16,160,16],[137,19,160,19,"scaleX"],[137,25,160,25],[138,4,161,2],[138,8,161,8,"c2"],[138,10,161,10],[138,13,161,13],[138,14,161,14,"sin"],[138,17,161,17],[138,20,161,20,"scaleY"],[138,26,161,26],[139,4,162,2],[139,8,162,8,"d2"],[139,10,162,10],[139,13,162,13,"cos"],[139,16,162,16],[139,19,162,19,"scaleY"],[139,25,162,25],[140,4,164,2],[140,8,164,6,"skewX"],[140,13,164,11],[140,17,164,15,"skewY"],[140,22,164,20],[140,24,164,22],[141,6,165,4],[141,10,165,10,"b1"],[141,12,165,12],[141,15,165,15,"Math"],[141,19,165,19],[141,20,165,20,"tan"],[141,23,165,23],[141,24,165,24,"skewY"],[141,29,165,29],[141,32,165,32,"DEG_TO_RAD"],[141,42,165,42],[141,43,165,43],[142,6,166,4],[142,10,166,10,"c1"],[142,12,166,12],[142,15,166,15,"Math"],[142,19,166,19],[142,20,166,20,"tan"],[142,23,166,23],[142,24,166,24,"skewX"],[142,29,166,29],[142,32,166,32,"DEG_TO_RAD"],[142,42,166,42],[142,43,166,43],[143,6,167,4,"append"],[143,12,167,10],[143,13,167,11,"a2"],[143,15,167,13],[143,18,167,16,"c1"],[143,20,167,18],[143,23,167,21,"b2"],[143,25,167,23],[143,27,167,25,"b1"],[143,29,167,27],[143,32,167,30,"a2"],[143,34,167,32],[143,37,167,35,"b2"],[143,39,167,37],[143,41,167,39,"c2"],[143,43,167,41],[143,46,167,44,"c1"],[143,48,167,46],[143,51,167,49,"d2"],[143,53,167,51],[143,55,167,53,"b1"],[143,57,167,55],[143,60,167,58,"c2"],[143,62,167,60],[143,65,167,63,"d2"],[143,67,167,65],[143,69,167,67,"x"],[143,70,167,68],[143,72,167,70,"y"],[143,73,167,71],[143,74,167,72],[144,4,168,2],[144,5,168,3],[144,11,168,9],[145,6,169,4,"append"],[145,12,169,10],[145,13,169,11,"a2"],[145,15,169,13],[145,17,169,15,"b2"],[145,19,169,17],[145,21,169,19,"c2"],[145,23,169,21],[145,25,169,23,"d2"],[145,27,169,25],[145,29,169,27,"x"],[145,30,169,28],[145,32,169,30,"y"],[145,33,169,31],[145,34,169,32],[146,4,170,2],[147,4,172,2],[147,8,172,6,"regX"],[147,12,172,10],[147,16,172,14,"regY"],[147,20,172,18],[147,22,172,20],[148,6,173,4],[149,6,174,4,"tx"],[149,8,174,6],[149,12,174,10,"regX"],[149,16,174,14],[149,19,174,17,"a"],[149,20,174,18],[149,23,174,21,"regY"],[149,27,174,25],[149,30,174,28,"c"],[149,31,174,29],[150,6,175,4,"ty"],[150,8,175,6],[150,12,175,10,"regX"],[150,16,175,14],[150,19,175,17,"b"],[150,20,175,18],[150,23,175,21,"regY"],[150,27,175,25],[150,30,175,28,"d"],[150,31,175,29],[151,6,176,4,"hasInitialState"],[151,21,176,19],[151,24,176,22],[151,29,176,27],[152,4,177,2],[153,2,178,0],[154,0,178,1],[154,3]],"functionMap":{"names":["<global>","reset","toArray","append","appendTransform"],"mappings":"AAA;OCkC;CDO;OEO;CFK;OGa;CHqC;OIqB;CJqD"}},"type":"js/module"}]}