{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":159,"column":0,"index":4579}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":159,"column":0,"index":4579}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./BlobManager","data":{"asyncType":null,"locs":[{"start":{"line":61,"column":24,"index":1686},"end":{"line":61,"column":48,"index":1710}},{"start":{"line":85,"column":24,"index":2391},"end":{"line":85,"column":48,"index":2415}},{"start":{"line":135,"column":24,"index":4054},"end":{"line":135,"column":48,"index":4078}}],"key":"gSjSnvxPMAlq4OnrEQF+EjqTVsQ="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  /**\n   * Opaque JS representation of some binary data in native.\n   *\n   * The API is modeled after the W3C Blob API, with one caveat\n   * regarding explicit deallocation. Refer to the `close()`\n   * method for further details.\n   *\n   * Example usage in a React component:\n   *\n   *   class WebSocketImage extends React.Component {\n   *      state = {blob: null};\n   *      componentDidMount() {\n   *        let ws = this.ws = new WebSocket(...);\n   *        ws.binaryType = 'blob';\n   *        ws.onmessage = (event) => {\n   *          if (this.state.blob) {\n   *            this.state.blob.close();\n   *          }\n   *          this.setState({blob: event.data});\n   *        };\n   *      }\n   *      componentUnmount() {\n   *        if (this.state.blob) {\n   *          this.state.blob.close();\n   *        }\n   *        this.ws.close();\n   *      }\n   *      render() {\n   *        if (!this.state.blob) {\n   *          return <View />;\n   *        }\n   *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n   *      }\n   *   }\n   *\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n   */\n  var Blob = /*#__PURE__*/function () {\n    /**\n     * Constructor for JS consumers.\n     * Currently we only support creating Blobs from other Blobs.\n     * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n     */\n    function Blob() {\n      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n      _classCallCheck(this, Blob);\n      var BlobManager = _$$_REQUIRE(_dependencyMap[2], \"./BlobManager\");\n      this.data = BlobManager.createFromParts(parts, options).data;\n    }\n\n    /*\n     * This method is used to create a new Blob object containing\n     * the data in the specified range of bytes of the source Blob.\n     * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n     */\n    // $FlowFixMe[unsafe-getters-setters]\n    return _createClass(Blob, [{\n      key: \"data\",\n      get:\n      // $FlowFixMe[unsafe-getters-setters]\n      function get() {\n        if (!this._data) {\n          throw new Error('Blob has been closed and is no longer available');\n        }\n        return this._data;\n      },\n      set: function set(data) {\n        this._data = data;\n      }\n    }, {\n      key: \"slice\",\n      value: function slice(start, end) {\n        var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n        var BlobManager = _$$_REQUIRE(_dependencyMap[2], \"./BlobManager\");\n        var _this$data = this.data,\n          offset = _this$data.offset,\n          size = _this$data.size;\n        if (typeof start === 'number') {\n          if (start > size) {\n            // $FlowFixMe[reassign-const]\n            start = size;\n          }\n          offset += start;\n          size -= start;\n          if (typeof end === 'number') {\n            if (end < 0) {\n              // $FlowFixMe[reassign-const]\n              end = this.size + end;\n            }\n            if (end > this.size) {\n              // $FlowFixMe[reassign-const]\n              end = this.size;\n            }\n            size = end - start;\n          }\n        }\n        return BlobManager.createFromOptions({\n          blobId: this.data.blobId,\n          offset: offset,\n          size: size,\n          type: contentType,\n          /* Since `blob.slice()` creates a new view onto the same binary\n           * data as the original blob, we should re-use the same collector\n           * object so that the underlying resource gets deallocated when\n           * the last view into the data is released, not the first.\n           */\n          __collector: this.data.__collector\n        });\n      }\n\n      /**\n       * This method is in the standard, but not actually implemented by\n       * any browsers at this point. It's important for how Blobs work in\n       * React Native, however, since we cannot de-allocate resources automatically,\n       * so consumers need to explicitly de-allocate them.\n       *\n       * Note that the semantics around Blobs created via `blob.slice()`\n       * and `new Blob([blob])` are different. `blob.slice()` creates a\n       * new *view* onto the same binary data, so calling `close()` on any\n       * of those views is enough to deallocate the data, whereas\n       * `new Blob([blob, ...])` actually copies the data in memory.\n       */\n    }, {\n      key: \"close\",\n      value: function close() {\n        var BlobManager = _$$_REQUIRE(_dependencyMap[2], \"./BlobManager\");\n        BlobManager.release(this.data.blobId);\n        this.data = null;\n      }\n\n      /**\n       * Size of the data contained in the Blob object, in bytes.\n       */\n      // $FlowFixMe[unsafe-getters-setters]\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this.data.size;\n      }\n\n      /*\n       * String indicating the MIME type of the data contained in the Blob.\n       * If the type is unknown, this string is empty.\n       */\n      // $FlowFixMe[unsafe-getters-setters]\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this.data.type || '';\n      }\n    }]);\n  }();\n  module.exports = Blob;\n});","lineCount":170,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_classCallCheck"],[14,21,11,13],[14,24,11,13,"_$$_REQUIRE"],[14,35,11,13],[14,36,11,13,"_dependencyMap"],[14,50,11,13],[15,2,11,13],[15,6,11,13,"_createClass"],[15,18,11,13],[15,21,11,13,"_$$_REQUIRE"],[15,32,11,13],[15,33,11,13,"_dependencyMap"],[15,47,11,13],[16,2,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,0,43,0],[45,0,44,0],[46,0,45,0],[47,0,46,0],[48,0,47,0],[49,0,48,0],[50,0,49,0],[51,0,50,0],[52,0,51,0],[53,2,15,0],[53,6,52,6,"Blob"],[53,10,52,10],[54,4,55,2],[55,0,56,0],[56,0,57,0],[57,0,58,0],[58,0,59,0],[59,4,60,2],[59,13,60,2,"Blob"],[59,18,60,2],[59,20,60,71],[60,6,60,71],[60,10,60,14,"parts"],[60,15,60,41],[60,18,60,41,"arguments"],[60,27,60,41],[60,28,60,41,"length"],[60,34,60,41],[60,42,60,41,"arguments"],[60,51,60,41],[60,59,60,41,"undefined"],[60,68,60,41],[60,71,60,41,"arguments"],[60,80,60,41],[60,86,60,44],[60,88,60,46],[61,6,60,46],[61,10,60,48,"options"],[61,17,60,69],[61,20,60,69,"arguments"],[61,29,60,69],[61,30,60,69,"length"],[61,36,60,69],[61,43,60,69,"arguments"],[61,52,60,69],[61,58,60,69,"undefined"],[61,67,60,69],[62,6,60,69,"_classCallCheck"],[62,21,60,69],[62,28,60,69,"Blob"],[62,32,60,69],[63,6,61,4],[63,10,61,10,"BlobManager"],[63,21,61,21],[63,24,61,24,"require"],[63,35,61,31],[63,36,61,31,"_dependencyMap"],[63,50,61,31],[63,70,61,47],[63,71,61,48],[64,6,62,4],[64,10,62,8],[64,11,62,9,"data"],[64,15,62,13],[64,18,62,16,"BlobManager"],[64,29,62,27],[64,30,62,28,"createFromParts"],[64,45,62,43],[64,46,62,44,"parts"],[64,51,62,49],[64,53,62,51,"options"],[64,60,62,58],[64,61,62,59],[64,62,62,60,"data"],[64,66,62,64],[65,4,63,2],[67,4,65,2],[68,0,66,0],[69,0,67,0],[70,0,68,0],[71,0,69,0],[72,4,70,2],[73,4,70,2],[73,11,70,2,"_createClass"],[73,23,70,2],[73,24,70,2,"Blob"],[73,28,70,2],[74,6,70,2,"key"],[74,9,70,2],[75,6,70,2,"get"],[75,9,70,2],[76,6,75,2],[77,6,76,2],[77,15,76,2,"get"],[77,19,76,2],[77,21,76,23],[78,8,77,4],[78,12,77,8],[78,13,77,9],[78,17,77,13],[78,18,77,14,"_data"],[78,23,77,19],[78,25,77,21],[79,10,78,6],[79,16,78,12],[79,20,78,16,"Error"],[79,25,78,21],[79,26,78,22],[79,75,78,71],[79,76,78,72],[80,8,79,4],[81,8,81,4],[81,15,81,11],[81,19,81,15],[81,20,81,16,"_data"],[81,25,81,21],[82,6,82,2],[82,7,82,3],[83,6,82,3,"set"],[83,9,82,3],[83,11,71,2],[83,20,71,2,"set"],[83,24,71,11,"data"],[83,28,71,26],[83,30,71,28],[84,8,72,4],[84,12,72,8],[84,13,72,9,"_data"],[84,18,72,14],[84,21,72,17,"data"],[84,25,72,21],[85,6,73,2],[86,4,73,3],[87,6,73,3,"key"],[87,9,73,3],[88,6,73,3,"value"],[88,11,73,3],[88,13,84,2],[88,22,84,2,"slice"],[88,27,84,7,"slice"],[88,28,84,8,"start"],[88,33,84,22],[88,35,84,24,"end"],[88,38,84,36],[88,40,84,70],[89,8,84,70],[89,12,84,38,"contentType"],[89,23,84,57],[89,26,84,57,"arguments"],[89,35,84,57],[89,36,84,57,"length"],[89,42,84,57],[89,50,84,57,"arguments"],[89,59,84,57],[89,67,84,57,"undefined"],[89,76,84,57],[89,79,84,57,"arguments"],[89,88,84,57],[89,94,84,60],[89,96,84,62],[90,8,85,4],[90,12,85,10,"BlobManager"],[90,23,85,21],[90,26,85,24,"require"],[90,37,85,31],[90,38,85,31,"_dependencyMap"],[90,52,85,31],[90,72,85,47],[90,73,85,48],[91,8,86,4],[91,12,86,4,"_this$data"],[91,22,86,4],[91,25,86,25],[91,29,86,29],[91,30,86,30,"data"],[91,34,86,34],[92,10,86,9,"offset"],[92,16,86,15],[92,19,86,15,"_this$data"],[92,29,86,15],[92,30,86,9,"offset"],[92,36,86,15],[93,10,86,17,"size"],[93,14,86,21],[93,17,86,21,"_this$data"],[93,27,86,21],[93,28,86,17,"size"],[93,32,86,21],[94,8,88,4],[94,12,88,8],[94,19,88,15,"start"],[94,24,88,20],[94,29,88,25],[94,37,88,33],[94,39,88,35],[95,10,89,6],[95,14,89,10,"start"],[95,19,89,15],[95,22,89,18,"size"],[95,26,89,22],[95,28,89,24],[96,12,90,8],[97,12,91,8,"start"],[97,17,91,13],[97,20,91,16,"size"],[97,24,91,20],[98,10,92,6],[99,10,93,6,"offset"],[99,16,93,12],[99,20,93,16,"start"],[99,25,93,21],[100,10,94,6,"size"],[100,14,94,10],[100,18,94,14,"start"],[100,23,94,19],[101,10,96,6],[101,14,96,10],[101,21,96,17,"end"],[101,24,96,20],[101,29,96,25],[101,37,96,33],[101,39,96,35],[102,12,97,8],[102,16,97,12,"end"],[102,19,97,15],[102,22,97,18],[102,23,97,19],[102,25,97,21],[103,14,98,10],[104,14,99,10,"end"],[104,17,99,13],[104,20,99,16],[104,24,99,20],[104,25,99,21,"size"],[104,29,99,25],[104,32,99,28,"end"],[104,35,99,31],[105,12,100,8],[106,12,101,8],[106,16,101,12,"end"],[106,19,101,15],[106,22,101,18],[106,26,101,22],[106,27,101,23,"size"],[106,31,101,27],[106,33,101,29],[107,14,102,10],[108,14,103,10,"end"],[108,17,103,13],[108,20,103,16],[108,24,103,20],[108,25,103,21,"size"],[108,29,103,25],[109,12,104,8],[110,12,105,8,"size"],[110,16,105,12],[110,19,105,15,"end"],[110,22,105,18],[110,25,105,21,"start"],[110,30,105,26],[111,10,106,6],[112,8,107,4],[113,8,108,4],[113,15,108,11,"BlobManager"],[113,26,108,22],[113,27,108,23,"createFromOptions"],[113,44,108,40],[113,45,108,41],[114,10,109,6,"blobId"],[114,16,109,12],[114,18,109,14],[114,22,109,18],[114,23,109,19,"data"],[114,27,109,23],[114,28,109,24,"blobId"],[114,34,109,30],[115,10,110,6,"offset"],[115,16,110,12],[115,18,110,6,"offset"],[115,24,110,12],[116,10,111,6,"size"],[116,14,111,10],[116,16,111,6,"size"],[116,20,111,10],[117,10,112,6,"type"],[117,14,112,10],[117,16,112,12,"contentType"],[117,27,112,23],[118,10,113,6],[119,0,114,0],[120,0,115,0],[121,0,116,0],[122,0,117,0],[123,10,118,6,"__collector"],[123,21,118,17],[123,23,118,19],[123,27,118,23],[123,28,118,24,"data"],[123,32,118,28],[123,33,118,29,"__collector"],[124,8,119,4],[124,9,119,5],[124,10,119,6],[125,6,120,2],[127,6,122,2],[128,0,123,0],[129,0,124,0],[130,0,125,0],[131,0,126,0],[132,0,127,0],[133,0,128,0],[134,0,129,0],[135,0,130,0],[136,0,131,0],[137,0,132,0],[138,0,133,0],[139,4,122,2],[140,6,122,2,"key"],[140,9,122,2],[141,6,122,2,"value"],[141,11,122,2],[141,13,134,2],[141,22,134,2,"close"],[141,27,134,7,"close"],[141,28,134,7],[141,30,134,10],[142,8,135,4],[142,12,135,10,"BlobManager"],[142,23,135,21],[142,26,135,24,"require"],[142,37,135,31],[142,38,135,31,"_dependencyMap"],[142,52,135,31],[142,72,135,47],[142,73,135,48],[143,8,136,4,"BlobManager"],[143,19,136,15],[143,20,136,16,"release"],[143,27,136,23],[143,28,136,24],[143,32,136,28],[143,33,136,29,"data"],[143,37,136,33],[143,38,136,34,"blobId"],[143,44,136,40],[143,45,136,41],[144,8,137,4],[144,12,137,8],[144,13,137,9,"data"],[144,17,137,13],[144,20,137,16],[144,24,137,20],[145,6,138,2],[147,6,140,2],[148,0,141,0],[149,0,142,0],[150,6,143,2],[151,4,143,2],[152,6,143,2,"key"],[152,9,143,2],[153,6,143,2,"get"],[153,9,143,2],[153,11,144,2],[153,20,144,2,"get"],[153,24,144,2],[153,26,144,21],[154,8,145,4],[154,15,145,11],[154,19,145,15],[154,20,145,16,"data"],[154,24,145,20],[154,25,145,21,"size"],[154,29,145,25],[155,6,146,2],[157,6,148,2],[158,0,149,0],[159,0,150,0],[160,0,151,0],[161,6,152,2],[162,4,152,2],[163,6,152,2,"key"],[163,9,152,2],[164,6,152,2,"get"],[164,9,152,2],[164,11,153,2],[164,20,153,2,"get"],[164,24,153,2],[164,26,153,21],[165,8,154,4],[165,15,154,11],[165,19,154,15],[165,20,154,16,"data"],[165,24,154,20],[165,25,154,21,"type"],[165,29,154,25],[165,33,154,29],[165,35,154,31],[166,6,155,2],[167,4,155,3],[168,2,155,3],[169,2,158,0,"module"],[169,8,158,6],[169,9,158,7,"exports"],[169,16,158,14],[169,19,158,17,"Blob"],[169,23,158,21],[170,0,158,22],[170,3]],"functionMap":{"names":["<global>","Blob","constructor","set__data","get__data","slice","close","get__size","get__type"],"mappings":"AAA;ACmD;ECQ;GDG;EEQ;GFE;EGG;GHM;EIE;GJoC;EKc;GLI;EMM;GNE;EOO;GPE;CDC"}},"type":"js/module"}]}