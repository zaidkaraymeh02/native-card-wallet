{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":246,"column":0,"index":7479}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":246,"column":0,"index":7479}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.computeWindowedRenderLimits = computeWindowedRenderLimits;\n  exports.elementsThatOverlapOffsets = elementsThatOverlapOffsets;\n  exports.keyExtractor = keyExtractor;\n  exports.newRangeCount = newRangeCount;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  /**\n   * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n   * items that bound different windows of content, such as the visible area or the buffered overscan\n   * area.\n   */\n  function elementsThatOverlapOffsets(offsets, props, listMetrics) {\n    var zoomScale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    var itemCount = props.getItemCount(props.data);\n    var result = [];\n    for (var offsetIndex = 0; offsetIndex < offsets.length; offsetIndex++) {\n      var currentOffset = offsets[offsetIndex];\n      var left = 0;\n      var right = itemCount - 1;\n      while (left <= right) {\n        var mid = left + Math.floor((right - left) / 2);\n        var frame = listMetrics.getCellMetricsApprox(mid, props);\n        var scaledOffsetStart = frame.offset * zoomScale;\n        var scaledOffsetEnd = (frame.offset + frame.length) * zoomScale;\n\n        // We want the first frame that contains the offset, with inclusive bounds. Thus, for the\n        // first frame the scaledOffsetStart is inclusive, while for other frames it is exclusive.\n        if (mid === 0 && currentOffset < scaledOffsetStart || mid !== 0 && currentOffset <= scaledOffsetStart) {\n          right = mid - 1;\n        } else if (currentOffset > scaledOffsetEnd) {\n          left = mid + 1;\n        } else {\n          result[offsetIndex] = mid;\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n   * Handy for calculating how many new items will be rendered when the render window changes so we\n   * can restrict the number of new items render at once so that content can appear on the screen\n   * faster.\n   */\n  function newRangeCount(prev, next) {\n    return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));\n  }\n\n  /**\n   * Custom logic for determining which items should be rendered given the current frame and scroll\n   * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n   * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n   * biased in the direction of scroll.\n   */\n  function computeWindowedRenderLimits(props, maxToRenderPerBatch, windowSize, prev, listMetrics, scrollMetrics) {\n    var itemCount = props.getItemCount(props.data);\n    if (itemCount === 0) {\n      return {\n        first: 0,\n        last: -1\n      };\n    }\n    var offset = scrollMetrics.offset,\n      velocity = scrollMetrics.velocity,\n      visibleLength = scrollMetrics.visibleLength,\n      _scrollMetrics$zoomSc = scrollMetrics.zoomScale,\n      zoomScale = _scrollMetrics$zoomSc === void 0 ? 1 : _scrollMetrics$zoomSc;\n\n    // Start with visible area, then compute maximum overscan region by expanding from there, biased\n    // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n    // too.\n    var visibleBegin = Math.max(0, offset);\n    var visibleEnd = visibleBegin + visibleLength;\n    var overscanLength = (windowSize - 1) * visibleLength;\n\n    // Considering velocity seems to introduce more churn than it's worth.\n    var leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n    var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n    var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);\n    var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n    var lastItemOffset = listMetrics.getCellMetricsApprox(itemCount - 1, props).offset * zoomScale;\n    if (lastItemOffset < overscanBegin) {\n      // Entire list is before our overscan window\n      return {\n        first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n        last: itemCount - 1\n      };\n    }\n\n    // Find the indices that correspond to the items at the render boundaries we're targeting.\n    var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props, listMetrics, zoomScale),\n      _elementsThatOverlapO2 = (0, _slicedToArray2.default)(_elementsThatOverlapO, 4),\n      overscanFirst = _elementsThatOverlapO2[0],\n      first = _elementsThatOverlapO2[1],\n      last = _elementsThatOverlapO2[2],\n      overscanLast = _elementsThatOverlapO2[3];\n    overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n    first = first == null ? Math.max(0, overscanFirst) : first;\n    overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n    last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;\n    var visible = {\n      first: first,\n      last: last\n    };\n\n    // We want to limit the number of new cells we're rendering per batch so that we can fill the\n    // content on the screen quickly. If we rendered the entire overscan window at once, the user\n    // could be staring at white space for a long time waiting for a bunch of offscreen content to\n    // render.\n    var newCellCount = newRangeCount(prev, visible);\n    while (true) {\n      if (first <= overscanFirst && last >= overscanLast) {\n        // If we fill the entire overscan range, we're done.\n        break;\n      }\n      var maxNewCells = newCellCount >= maxToRenderPerBatch;\n      var firstWillAddMore = first <= prev.first || first > prev.last;\n      var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n      var lastWillAddMore = last >= prev.last || last < prev.first;\n      var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);\n      if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n        // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n        // without rendering new items. This let's us preserve as many already rendered items as\n        // possible, reducing render churn and keeping the rendered overscan range as large as\n        // possible.\n        break;\n      }\n      if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {\n        if (firstWillAddMore) {\n          newCellCount++;\n        }\n        first--;\n      }\n      if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {\n        if (lastWillAddMore) {\n          newCellCount++;\n        }\n        last++;\n      }\n    }\n    if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {\n      throw new Error('Bad window calculation ' + JSON.stringify({\n        first: first,\n        last: last,\n        itemCount: itemCount,\n        overscanFirst: overscanFirst,\n        overscanLast: overscanLast,\n        visible: visible\n      }));\n    }\n    return {\n      first: first,\n      last: last\n    };\n  }\n  function keyExtractor(item, index) {\n    if (typeof item === 'object' && (item == null ? void 0 : item.key) != null) {\n      return item.key;\n    }\n    if (typeof item === 'object' && (item == null ? void 0 : item.id) != null) {\n      return item.id;\n    }\n    return String(index);\n  }\n});","lineCount":184,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_interopRequireDefault"],[14,28,11,13],[14,31,11,13,"_$$_REQUIRE"],[14,42,11,13],[14,43,11,13,"_dependencyMap"],[14,57,11,13],[15,2,11,13,"Object"],[15,8,11,13],[15,9,11,13,"defineProperty"],[15,23,11,13],[15,24,11,13,"exports"],[15,31,11,13],[16,4,11,13,"value"],[16,9,11,13],[17,2,11,13],[18,2,11,13,"exports"],[18,9,11,13],[18,10,11,13,"computeWindowedRenderLimits"],[18,37,11,13],[18,40,11,13,"computeWindowedRenderLimits"],[18,67,11,13],[19,2,11,13,"exports"],[19,9,11,13],[19,10,11,13,"elementsThatOverlapOffsets"],[19,36,11,13],[19,39,11,13,"elementsThatOverlapOffsets"],[19,65,11,13],[20,2,11,13,"exports"],[20,9,11,13],[20,10,11,13,"keyExtractor"],[20,22,11,13],[20,25,11,13,"keyExtractor"],[20,37,11,13],[21,2,11,13,"exports"],[21,9,11,13],[21,10,11,13,"newRangeCount"],[21,23,11,13],[21,26,11,13,"newRangeCount"],[21,39,11,13],[22,2,11,13],[22,6,11,13,"_slicedToArray2"],[22,21,11,13],[22,24,11,13,"_interopRequireDefault"],[22,46,11,13],[22,47,11,13,"_$$_REQUIRE"],[22,58,11,13],[22,59,11,13,"_dependencyMap"],[22,73,11,13],[23,2,17,0],[24,0,18,0],[25,0,19,0],[26,0,20,0],[27,0,21,0],[28,2,22,7],[28,11,22,16,"elementsThatOverlapOffsets"],[28,37,22,42,"elementsThatOverlapOffsets"],[28,38,23,2,"offsets"],[28,45,23,24],[28,47,24,2,"props"],[28,52,24,24],[28,54,25,2,"listMetrics"],[28,65,25,36],[28,67,27,17],[29,4,27,17],[29,8,26,2,"zoomScale"],[29,17,26,19],[29,20,26,19,"arguments"],[29,29,26,19],[29,30,26,19,"length"],[29,36,26,19],[29,44,26,19,"arguments"],[29,53,26,19],[29,61,26,19,"undefined"],[29,70,26,19],[29,73,26,19,"arguments"],[29,82,26,19],[29,88,26,22],[29,89,26,23],[30,4,28,2],[30,8,28,8,"itemCount"],[30,17,28,17],[30,20,28,20,"props"],[30,25,28,25],[30,26,28,26,"getItemCount"],[30,38,28,38],[30,39,28,39,"props"],[30,44,28,44],[30,45,28,45,"data"],[30,49,28,49],[30,50,28,50],[31,4,29,2],[31,8,29,8,"result"],[31,14,29,14],[31,17,29,17],[31,19,29,19],[32,4,30,2],[32,9,30,7],[32,13,30,11,"offsetIndex"],[32,24,30,22],[32,27,30,25],[32,28,30,26],[32,30,30,28,"offsetIndex"],[32,41,30,39],[32,44,30,42,"offsets"],[32,51,30,49],[32,52,30,50,"length"],[32,58,30,56],[32,60,30,58,"offsetIndex"],[32,71,30,69],[32,73,30,71],[32,75,30,73],[33,6,31,4],[33,10,31,10,"currentOffset"],[33,23,31,23],[33,26,31,26,"offsets"],[33,33,31,33],[33,34,31,34,"offsetIndex"],[33,45,31,45],[33,46,31,46],[34,6,32,4],[34,10,32,8,"left"],[34,14,32,12],[34,17,32,15],[34,18,32,16],[35,6,33,4],[35,10,33,8,"right"],[35,15,33,13],[35,18,33,16,"itemCount"],[35,27,33,25],[35,30,33,28],[35,31,33,29],[36,6,35,4],[36,13,35,11,"left"],[36,17,35,15],[36,21,35,19,"right"],[36,26,35,24],[36,28,35,26],[37,8,36,6],[37,12,36,12,"mid"],[37,15,36,15],[37,18,36,18,"left"],[37,22,36,22],[37,25,36,25,"Math"],[37,29,36,29],[37,30,36,30,"floor"],[37,35,36,35],[37,36,36,36],[37,37,36,37,"right"],[37,42,36,42],[37,45,36,45,"left"],[37,49,36,49],[37,53,36,53],[37,54,36,54],[37,55,36,55],[38,8,37,6],[38,12,37,12,"frame"],[38,17,37,17],[38,20,37,20,"listMetrics"],[38,31,37,31],[38,32,37,32,"getCellMetricsApprox"],[38,52,37,52],[38,53,37,53,"mid"],[38,56,37,56],[38,58,37,58,"props"],[38,63,37,63],[38,64,37,64],[39,8,38,6],[39,12,38,12,"scaledOffsetStart"],[39,29,38,29],[39,32,38,32,"frame"],[39,37,38,37],[39,38,38,38,"offset"],[39,44,38,44],[39,47,38,47,"zoomScale"],[39,56,38,56],[40,8,39,6],[40,12,39,12,"scaledOffsetEnd"],[40,27,39,27],[40,30,39,30],[40,31,39,31,"frame"],[40,36,39,36],[40,37,39,37,"offset"],[40,43,39,43],[40,46,39,46,"frame"],[40,51,39,51],[40,52,39,52,"length"],[40,58,39,58],[40,62,39,62,"zoomScale"],[40,71,39,71],[42,8,41,6],[43,8,42,6],[44,8,43,6],[44,12,44,9,"mid"],[44,15,44,12],[44,20,44,17],[44,21,44,18],[44,25,44,22,"currentOffset"],[44,38,44,35],[44,41,44,38,"scaledOffsetStart"],[44,58,44,55],[44,62,45,9,"mid"],[44,65,45,12],[44,70,45,17],[44,71,45,18],[44,75,45,22,"currentOffset"],[44,88,45,35],[44,92,45,39,"scaledOffsetStart"],[44,109,45,57],[44,111,46,8],[45,10,47,8,"right"],[45,15,47,13],[45,18,47,16,"mid"],[45,21,47,19],[45,24,47,22],[45,25,47,23],[46,8,48,6],[46,9,48,7],[46,15,48,13],[46,19,48,17,"currentOffset"],[46,32,48,30],[46,35,48,33,"scaledOffsetEnd"],[46,50,48,48],[46,52,48,50],[47,10,49,8,"left"],[47,14,49,12],[47,17,49,15,"mid"],[47,20,49,18],[47,23,49,21],[47,24,49,22],[48,8,50,6],[48,9,50,7],[48,15,50,13],[49,10,51,8,"result"],[49,16,51,14],[49,17,51,15,"offsetIndex"],[49,28,51,26],[49,29,51,27],[49,32,51,30,"mid"],[49,35,51,33],[50,10,52,8],[51,8,53,6],[52,6,54,4],[53,4,55,2],[54,4,57,2],[54,11,57,9,"result"],[54,17,57,15],[55,2,58,0],[57,2,60,0],[58,0,61,0],[59,0,62,0],[60,0,63,0],[61,0,64,0],[62,0,65,0],[63,2,66,7],[63,11,66,16,"newRangeCount"],[63,24,66,29,"newRangeCount"],[63,25,67,2,"prev"],[63,29,71,3],[63,31,72,2,"next"],[63,35,76,3],[63,37,77,10],[64,4,78,2],[64,11,79,4,"next"],[64,15,79,8],[64,16,79,9,"last"],[64,20,79,13],[64,23,80,4,"next"],[64,27,80,8],[64,28,80,9,"first"],[64,33,80,14],[64,36,81,4],[64,37,81,5],[64,40,82,4,"Math"],[64,44,82,8],[64,45,82,9,"max"],[64,48,82,12],[64,49,83,6],[64,50,83,7],[64,52,84,6],[64,53,84,7],[64,56,84,10,"Math"],[64,60,84,14],[64,61,84,15,"min"],[64,64,84,18],[64,65,84,19,"next"],[64,69,84,23],[64,70,84,24,"last"],[64,74,84,28],[64,76,84,30,"prev"],[64,80,84,34],[64,81,84,35,"last"],[64,85,84,39],[64,86,84,40],[64,89,84,43,"Math"],[64,93,84,47],[64,94,84,48,"max"],[64,97,84,51],[64,98,84,52,"next"],[64,102,84,56],[64,103,84,57,"first"],[64,108,84,62],[64,110,84,64,"prev"],[64,114,84,68],[64,115,84,69,"first"],[64,120,84,74],[64,121,85,4],[64,122,85,5],[65,2,87,0],[67,2,89,0],[68,0,90,0],[69,0,91,0],[70,0,92,0],[71,0,93,0],[72,0,94,0],[73,2,95,7],[73,11,95,16,"computeWindowedRenderLimits"],[73,38,95,43,"computeWindowedRenderLimits"],[73,39,96,2,"props"],[73,44,96,24],[73,46,97,2,"maxToRenderPerBatch"],[73,65,97,29],[73,67,98,2,"windowSize"],[73,77,98,20],[73,79,99,2,"prev"],[73,83,102,3],[73,85,103,2,"listMetrics"],[73,96,103,36],[73,98,104,2,"scrollMetrics"],[73,111,111,3],[73,113,115,2],[74,4,116,2],[74,8,116,8,"itemCount"],[74,17,116,17],[74,20,116,20,"props"],[74,25,116,25],[74,26,116,26,"getItemCount"],[74,38,116,38],[74,39,116,39,"props"],[74,44,116,44],[74,45,116,45,"data"],[74,49,116,49],[74,50,116,50],[75,4,117,2],[75,8,117,6,"itemCount"],[75,17,117,15],[75,22,117,20],[75,23,117,21],[75,25,117,23],[76,6,118,4],[76,13,118,11],[77,8,118,12,"first"],[77,13,118,17],[77,15,118,19],[77,16,118,20],[78,8,118,22,"last"],[78,12,118,26],[78,14,118,28],[78,15,118,29],[79,6,118,30],[79,7,118,31],[80,4,119,2],[81,4,120,2],[81,8,120,9,"offset"],[81,14,120,15],[81,17,120,59,"scrollMetrics"],[81,30,120,72],[81,31,120,9,"offset"],[81,37,120,15],[82,6,120,17,"velocity"],[82,14,120,25],[82,17,120,59,"scrollMetrics"],[82,30,120,72],[82,31,120,17,"velocity"],[82,39,120,25],[83,6,120,27,"visibleLength"],[83,19,120,40],[83,22,120,59,"scrollMetrics"],[83,35,120,72],[83,36,120,27,"visibleLength"],[83,49,120,40],[84,6,120,40,"_scrollMetrics$zoomSc"],[84,27,120,40],[84,30,120,59,"scrollMetrics"],[84,43,120,72],[84,44,120,42,"zoomScale"],[84,53,120,51],[85,6,120,42,"zoomScale"],[85,15,120,51],[85,18,120,51,"_scrollMetrics$zoomSc"],[85,39,120,51],[85,53,120,54],[85,54,120,55],[85,57,120,55,"_scrollMetrics$zoomSc"],[85,78,120,55],[87,4,122,2],[88,4,123,2],[89,4,124,2],[90,4,125,2],[90,8,125,8,"visibleBegin"],[90,20,125,20],[90,23,125,23,"Math"],[90,27,125,27],[90,28,125,28,"max"],[90,31,125,31],[90,32,125,32],[90,33,125,33],[90,35,125,35,"offset"],[90,41,125,41],[90,42,125,42],[91,4,126,2],[91,8,126,8,"visibleEnd"],[91,18,126,18],[91,21,126,21,"visibleBegin"],[91,33,126,33],[91,36,126,36,"visibleLength"],[91,49,126,49],[92,4,127,2],[92,8,127,8,"overscanLength"],[92,22,127,22],[92,25,127,25],[92,26,127,26,"windowSize"],[92,36,127,36],[92,39,127,39],[92,40,127,40],[92,44,127,44,"visibleLength"],[92,57,127,57],[94,4,129,2],[95,4,130,2],[95,8,130,8,"leadFactor"],[95,18,130,18],[95,21,130,21],[95,24,130,24],[95,25,130,25],[95,26,130,26],[97,4,132,2],[97,8,132,8,"fillPreference"],[97,22,132,22],[97,25,133,4,"velocity"],[97,33,133,12],[97,36,133,15],[97,37,133,16],[97,40,133,19],[97,47,133,26],[97,50,133,29,"velocity"],[97,58,133,37],[97,61,133,40],[97,62,133,41],[97,63,133,42],[97,66,133,45],[97,74,133,53],[97,77,133,56],[97,83,133,62],[98,4,135,2],[98,8,135,8,"overscanBegin"],[98,21,135,21],[98,24,135,24,"Math"],[98,28,135,28],[98,29,135,29,"max"],[98,32,135,32],[98,33,136,4],[98,34,136,5],[98,36,137,4,"visibleBegin"],[98,48,137,16],[98,51,137,19],[98,52,137,20],[98,53,137,21],[98,56,137,24,"leadFactor"],[98,66,137,34],[98,70,137,38,"overscanLength"],[98,84,138,2],[98,85,138,3],[99,4,139,2],[99,8,139,8,"overscanEnd"],[99,19,139,19],[99,22,139,22,"Math"],[99,26,139,26],[99,27,139,27,"max"],[99,30,139,30],[99,31,139,31],[99,32,139,32],[99,34,139,34,"visibleEnd"],[99,44,139,44],[99,47,139,47,"leadFactor"],[99,57,139,57],[99,60,139,60,"overscanLength"],[99,74,139,74],[99,75,139,75],[100,4,141,2],[100,8,141,8,"lastItemOffset"],[100,22,141,22],[100,25,142,4,"listMetrics"],[100,36,142,15],[100,37,142,16,"getCellMetricsApprox"],[100,57,142,36],[100,58,142,37,"itemCount"],[100,67,142,46],[100,70,142,49],[100,71,142,50],[100,73,142,52,"props"],[100,78,142,57],[100,79,142,58],[100,80,142,59,"offset"],[100,86,142,65],[100,89,142,68,"zoomScale"],[100,98,142,77],[101,4,143,2],[101,8,143,6,"lastItemOffset"],[101,22,143,20],[101,25,143,23,"overscanBegin"],[101,38,143,36],[101,40,143,38],[102,6,144,4],[103,6,145,4],[103,13,145,11],[104,8,146,6,"first"],[104,13,146,11],[104,15,146,13,"Math"],[104,19,146,17],[104,20,146,18,"max"],[104,23,146,21],[104,24,146,22],[104,25,146,23],[104,27,146,25,"itemCount"],[104,36,146,34],[104,39,146,37],[104,40,146,38],[104,43,146,41,"maxToRenderPerBatch"],[104,62,146,60],[104,63,146,61],[105,8,147,6,"last"],[105,12,147,10],[105,14,147,12,"itemCount"],[105,23,147,21],[105,26,147,24],[106,6,148,4],[106,7,148,5],[107,4,149,2],[109,4,151,2],[110,4,152,2],[110,8,152,2,"_elementsThatOverlapO"],[110,29,152,2],[110,32,152,51,"elementsThatOverlapOffsets"],[110,58,152,77],[110,59,153,4],[110,60,153,5,"overscanBegin"],[110,73,153,18],[110,75,153,20,"visibleBegin"],[110,87,153,32],[110,89,153,34,"visibleEnd"],[110,99,153,44],[110,101,153,46,"overscanEnd"],[110,112,153,57],[110,113,153,58],[110,115,154,4,"props"],[110,120,154,9],[110,122,155,4,"listMetrics"],[110,133,155,15],[110,135,156,4,"zoomScale"],[110,144,157,2],[110,145,157,3],[111,6,157,3,"_elementsThatOverlapO2"],[111,28,157,3],[111,35,157,3,"_slicedToArray2"],[111,50,157,3],[111,51,157,3,"default"],[111,58,157,3],[111,60,157,3,"_elementsThatOverlapO"],[111,81,157,3],[112,6,152,7,"overscanFirst"],[112,19,152,20],[112,22,152,20,"_elementsThatOverlapO2"],[112,44,152,20],[113,6,152,22,"first"],[113,11,152,27],[113,14,152,27,"_elementsThatOverlapO2"],[113,36,152,27],[114,6,152,29,"last"],[114,10,152,33],[114,13,152,33,"_elementsThatOverlapO2"],[114,35,152,33],[115,6,152,35,"overscanLast"],[115,18,152,47],[115,21,152,47,"_elementsThatOverlapO2"],[115,43,152,47],[116,4,158,2,"overscanFirst"],[116,17,158,15],[116,20,158,18,"overscanFirst"],[116,33,158,31],[116,37,158,35],[116,41,158,39],[116,44,158,42],[116,45,158,43],[116,48,158,46,"overscanFirst"],[116,61,158,59],[117,4,159,2,"first"],[117,9,159,7],[117,12,159,10,"first"],[117,17,159,15],[117,21,159,19],[117,25,159,23],[117,28,159,26,"Math"],[117,32,159,30],[117,33,159,31,"max"],[117,36,159,34],[117,37,159,35],[117,38,159,36],[117,40,159,38,"overscanFirst"],[117,53,159,51],[117,54,159,52],[117,57,159,55,"first"],[117,62,159,60],[118,4,160,2,"overscanLast"],[118,16,160,14],[118,19,160,17,"overscanLast"],[118,31,160,29],[118,35,160,33],[118,39,160,37],[118,42,160,40,"itemCount"],[118,51,160,49],[118,54,160,52],[118,55,160,53],[118,58,160,56,"overscanLast"],[118,70,160,68],[119,4,161,2,"last"],[119,8,161,6],[119,11,162,4,"last"],[119,15,162,8],[119,19,162,12],[119,23,162,16],[119,26,163,8,"Math"],[119,30,163,12],[119,31,163,13,"min"],[119,34,163,16],[119,35,163,17,"overscanLast"],[119,47,163,29],[119,49,163,31,"first"],[119,54,163,36],[119,57,163,39,"maxToRenderPerBatch"],[119,76,163,58],[119,79,163,61],[119,80,163,62],[119,81,163,63],[119,84,164,8,"last"],[119,88,164,12],[120,4,165,2],[120,8,165,8,"visible"],[120,15,165,15],[120,18,165,18],[121,6,165,19,"first"],[121,11,165,24],[121,13,165,19,"first"],[121,18,165,24],[122,6,165,26,"last"],[122,10,165,30],[122,12,165,26,"last"],[123,4,165,30],[123,5,165,31],[125,4,167,2],[126,4,168,2],[127,4,169,2],[128,4,170,2],[129,4,171,2],[129,8,171,6,"newCellCount"],[129,20,171,18],[129,23,171,21,"newRangeCount"],[129,36,171,34],[129,37,171,35,"prev"],[129,41,171,39],[129,43,171,41,"visible"],[129,50,171,48],[129,51,171,49],[130,4,173,2],[130,11,173,9],[130,15,173,13],[130,17,173,15],[131,6,174,4],[131,10,174,8,"first"],[131,15,174,13],[131,19,174,17,"overscanFirst"],[131,32,174,30],[131,36,174,34,"last"],[131,40,174,38],[131,44,174,42,"overscanLast"],[131,56,174,54],[131,58,174,56],[132,8,175,6],[133,8,176,6],[134,6,177,4],[135,6,178,4],[135,10,178,10,"maxNewCells"],[135,21,178,21],[135,24,178,24,"newCellCount"],[135,36,178,36],[135,40,178,40,"maxToRenderPerBatch"],[135,59,178,59],[136,6,179,4],[136,10,179,10,"firstWillAddMore"],[136,26,179,26],[136,29,179,29,"first"],[136,34,179,34],[136,38,179,38,"prev"],[136,42,179,42],[136,43,179,43,"first"],[136,48,179,48],[136,52,179,52,"first"],[136,57,179,57],[136,60,179,60,"prev"],[136,64,179,64],[136,65,179,65,"last"],[136,69,179,69],[137,6,180,4],[137,10,180,10,"firstShouldIncrement"],[137,30,180,30],[137,33,181,6,"first"],[137,38,181,11],[137,41,181,14,"overscanFirst"],[137,54,181,27],[137,59,181,32],[137,60,181,33,"maxNewCells"],[137,71,181,44],[137,75,181,48],[137,76,181,49,"firstWillAddMore"],[137,92,181,65],[137,93,181,66],[138,6,182,4],[138,10,182,10,"lastWillAddMore"],[138,25,182,25],[138,28,182,28,"last"],[138,32,182,32],[138,36,182,36,"prev"],[138,40,182,40],[138,41,182,41,"last"],[138,45,182,45],[138,49,182,49,"last"],[138,53,182,53],[138,56,182,56,"prev"],[138,60,182,60],[138,61,182,61,"first"],[138,66,182,66],[139,6,183,4],[139,10,183,10,"lastShouldIncrement"],[139,29,183,29],[139,32,184,6,"last"],[139,36,184,10],[139,39,184,13,"overscanLast"],[139,51,184,25],[139,56,184,30],[139,57,184,31,"maxNewCells"],[139,68,184,42],[139,72,184,46],[139,73,184,47,"lastWillAddMore"],[139,88,184,62],[139,89,184,63],[140,6,185,4],[140,10,185,8,"maxNewCells"],[140,21,185,19],[140,25,185,23],[140,26,185,24,"firstShouldIncrement"],[140,46,185,44],[140,50,185,48],[140,51,185,49,"lastShouldIncrement"],[140,70,185,68],[140,72,185,70],[141,8,186,6],[142,8,187,6],[143,8,188,6],[144,8,189,6],[145,8,190,6],[146,6,191,4],[147,6,192,4],[147,10,193,6,"firstShouldIncrement"],[147,30,193,26],[147,34,194,6],[147,36,194,8,"fillPreference"],[147,50,194,22],[147,55,194,27],[147,62,194,34],[147,66,194,38,"lastShouldIncrement"],[147,85,194,57],[147,89,194,61,"lastWillAddMore"],[147,104,194,76],[147,105,194,77],[147,107,195,6],[148,8,196,6],[148,12,196,10,"firstWillAddMore"],[148,28,196,26],[148,30,196,28],[149,10,197,8,"newCellCount"],[149,22,197,20],[149,24,197,22],[150,8,198,6],[151,8,199,6,"first"],[151,13,199,11],[151,15,199,13],[152,6,200,4],[153,6,201,4],[153,10,202,6,"lastShouldIncrement"],[153,29,202,25],[153,33,203,6],[153,35,203,8,"fillPreference"],[153,49,203,22],[153,54,203,27],[153,62,203,35],[153,66,203,39,"firstShouldIncrement"],[153,86,203,59],[153,90,203,63,"firstWillAddMore"],[153,106,203,79],[153,107,203,80],[153,109,204,6],[154,8,205,6],[154,12,205,10,"lastWillAddMore"],[154,27,205,25],[154,29,205,27],[155,10,206,8,"newCellCount"],[155,22,206,20],[155,24,206,22],[156,8,207,6],[157,8,208,6,"last"],[157,12,208,10],[157,14,208,12],[158,6,209,4],[159,4,210,2],[160,4,211,2],[160,8,212,4],[160,10,213,6,"last"],[160,14,213,10],[160,18,213,14,"first"],[160,23,213,19],[160,27,214,6,"first"],[160,32,214,11],[160,36,214,15],[160,37,214,16],[160,41,215,6,"last"],[160,45,215,10],[160,48,215,13,"itemCount"],[160,57,215,22],[160,61,216,6,"first"],[160,66,216,11],[160,70,216,15,"overscanFirst"],[160,83,216,28],[160,87,217,6,"last"],[160,91,217,10],[160,95,217,14,"overscanLast"],[160,107,217,26],[160,111,218,6,"first"],[160,116,218,11],[160,120,218,15,"visible"],[160,127,218,22],[160,128,218,23,"first"],[160,133,218,28],[160,137,219,6,"last"],[160,141,219,10],[160,145,219,14,"visible"],[160,152,219,21],[160,153,219,22,"last"],[160,157,219,26],[160,158,220,5],[160,160,221,4],[161,6,222,4],[161,12,222,10],[161,16,222,14,"Error"],[161,21,222,19],[161,22,223,6],[161,47,223,31],[161,50,224,8,"JSON"],[161,54,224,12],[161,55,224,13,"stringify"],[161,64,224,22],[161,65,224,23],[162,8,225,10,"first"],[162,13,225,15],[162,15,225,10,"first"],[162,20,225,15],[163,8,226,10,"last"],[163,12,226,14],[163,14,226,10,"last"],[163,18,226,14],[164,8,227,10,"itemCount"],[164,17,227,19],[164,19,227,10,"itemCount"],[164,28,227,19],[165,8,228,10,"overscanFirst"],[165,21,228,23],[165,23,228,10,"overscanFirst"],[165,36,228,23],[166,8,229,10,"overscanLast"],[166,20,229,22],[166,22,229,10,"overscanLast"],[166,34,229,22],[167,8,230,10,"visible"],[167,15,230,17],[167,17,230,10,"visible"],[168,6,231,8],[168,7,231,9],[168,8,232,4],[168,9,232,5],[169,4,233,2],[170,4,234,2],[170,11,234,9],[171,6,234,10,"first"],[171,11,234,15],[171,13,234,10,"first"],[171,18,234,15],[172,6,234,17,"last"],[172,10,234,21],[172,12,234,17,"last"],[173,4,234,21],[173,5,234,22],[174,2,235,0],[175,2,237,7],[175,11,237,16,"keyExtractor"],[175,23,237,28,"keyExtractor"],[175,24,237,29,"item"],[175,28,237,38],[175,30,237,40,"index"],[175,35,237,53],[175,37,237,63],[176,4,238,2],[176,8,238,6],[176,15,238,13,"item"],[176,19,238,17],[176,24,238,22],[176,32,238,30],[176,36,238,34],[176,37,238,34,"item"],[176,41,238,38],[176,61,238,34,"item"],[176,65,238,38],[176,66,238,40,"key"],[176,69,238,43],[176,74,238,47],[176,78,238,51],[176,80,238,53],[177,6,239,4],[177,13,239,11,"item"],[177,17,239,15],[177,18,239,16,"key"],[177,21,239,19],[178,4,240,2],[179,4,241,2],[179,8,241,6],[179,15,241,13,"item"],[179,19,241,17],[179,24,241,22],[179,32,241,30],[179,36,241,34],[179,37,241,34,"item"],[179,41,241,38],[179,61,241,34,"item"],[179,65,241,38],[179,66,241,40,"id"],[179,68,241,42],[179,73,241,46],[179,77,241,50],[179,79,241,52],[180,6,242,4],[180,13,242,11,"item"],[180,17,242,15],[180,18,242,16,"id"],[180,20,242,18],[181,4,243,2],[182,4,244,2],[182,11,244,9,"String"],[182,17,244,15],[182,18,244,16,"index"],[182,23,244,21],[182,24,244,22],[183,2,245,0],[184,0,245,1],[184,3]],"functionMap":{"names":["<global>","elementsThatOverlapOffsets","newRangeCount","computeWindowedRenderLimits","keyExtractor"],"mappings":"AAA;OCqB;CDoC;OEQ;CFqB;OGQ;CH4I;OIE;CJQ"}},"type":"js/module"}]}