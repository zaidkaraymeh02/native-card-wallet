{"dependencies":[{"name":"./conversions","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":20,"index":20},"end":{"line":1,"column":44,"index":44}},{"start":{"line":1,"column":20,"index":20},"end":{"line":1,"column":44,"index":44}},{"start":{"line":1,"column":20,"index":20},"end":{"line":1,"column":44,"index":44}},{"start":{"line":1,"column":20,"index":20},"end":{"line":1,"column":44,"index":44}}],"key":"ULVvOUxZjLNuq9LSOP7dM+d8ulg="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /*\n  \tThis function routes a model to all other models.\n  \n  \tall functions that are routed have a property `.conversion` attached\n  \tto the returned synthetic function. This property is an array\n  \tof strings, each with the steps in between the 'from' and 'to'\n  \tcolor models (inclusive).\n  \n  \tconversions that are not possible simply are not included.\n  */\n\n  function buildGraph() {\n    var graph = {};\n    // https://jsperf.com/object-keys-vs-for-in-with-closure/3\n    var models = Object.keys(_$$_REQUIRE(_dependencyMap[0], \"./conversions\"));\n    for (var len = models.length, i = 0; i < len; i++) {\n      graph[models[i]] = {\n        // http://jsperf.com/1-vs-infinity\n        // micro-opt, but this is simple.\n        distance: -1,\n        parent: null\n      };\n    }\n    return graph;\n  }\n\n  // https://en.wikipedia.org/wiki/Breadth-first_search\n  function deriveBFS(fromModel) {\n    var graph = buildGraph();\n    var queue = [fromModel]; // Unshift -> queue -> pop\n\n    graph[fromModel].distance = 0;\n    while (queue.length) {\n      var current = queue.pop();\n      var adjacents = Object.keys(_$$_REQUIRE(_dependencyMap[0], \"./conversions\")[current]);\n      for (var len = adjacents.length, i = 0; i < len; i++) {\n        var adjacent = adjacents[i];\n        var node = graph[adjacent];\n        if (node.distance === -1) {\n          node.distance = graph[current].distance + 1;\n          node.parent = current;\n          queue.unshift(adjacent);\n        }\n      }\n    }\n    return graph;\n  }\n  function link(from, to) {\n    return function (args) {\n      return to(from(args));\n    };\n  }\n  function wrapConversion(toModel, graph) {\n    var path = [graph[toModel].parent, toModel];\n    var fn = _$$_REQUIRE(_dependencyMap[0], \"./conversions\")[graph[toModel].parent][toModel];\n    var cur = graph[toModel].parent;\n    while (graph[cur].parent) {\n      path.unshift(graph[cur].parent);\n      fn = link(_$$_REQUIRE(_dependencyMap[0], \"./conversions\")[graph[cur].parent][cur], fn);\n      cur = graph[cur].parent;\n    }\n    fn.conversion = path;\n    return fn;\n  }\n  module.exports = function (fromModel) {\n    var graph = deriveBFS(fromModel);\n    var conversion = {};\n    var models = Object.keys(graph);\n    for (var len = models.length, i = 0; i < len; i++) {\n      var toModel = models[i];\n      var node = graph[toModel];\n      if (node.parent === null) {\n        // No possible conversion, or this node is the source model.\n        continue;\n      }\n      conversion[toModel] = wrapConversion(toModel, graph);\n    }\n    return conversion;\n  };\n});","lineCount":81,"map":[[2,2,3,0],[3,0,4,0],[4,0,5,0],[5,0,6,0],[6,0,7,0],[7,0,8,0],[8,0,9,0],[9,0,10,0],[10,0,11,0],[11,0,12,0],[13,2,14,0],[13,11,14,9,"buildGraph"],[13,21,14,19,"buildGraph"],[13,22,14,19],[13,24,14,22],[14,4,15,1],[14,8,15,7,"graph"],[14,13,15,12],[14,16,15,15],[14,17,15,16],[14,18,15,17],[15,4,16,1],[16,4,17,1],[16,8,17,7,"models"],[16,14,17,13],[16,17,17,16,"Object"],[16,23,17,22],[16,24,17,23,"keys"],[16,28,17,27],[16,29,17,27,"_$$_REQUIRE"],[16,40,17,27],[16,41,17,27,"_dependencyMap"],[16,55,17,27],[16,76,17,39],[16,77,17,40],[17,4,19,1],[17,9,19,6],[17,13,19,10,"len"],[17,16,19,13],[17,19,19,16,"models"],[17,25,19,22],[17,26,19,23,"length"],[17,32,19,29],[17,34,19,31,"i"],[17,35,19,32],[17,38,19,35],[17,39,19,36],[17,41,19,38,"i"],[17,42,19,39],[17,45,19,42,"len"],[17,48,19,45],[17,50,19,47,"i"],[17,51,19,48],[17,53,19,50],[17,55,19,52],[18,6,20,2,"graph"],[18,11,20,7],[18,12,20,8,"models"],[18,18,20,14],[18,19,20,15,"i"],[18,20,20,16],[18,21,20,17],[18,22,20,18],[18,25,20,21],[19,8,21,3],[20,8,22,3],[21,8,23,3,"distance"],[21,16,23,11],[21,18,23,13],[21,19,23,14],[21,20,23,15],[22,8,24,3,"parent"],[22,14,24,9],[22,16,24,11],[23,6,25,2],[23,7,25,3],[24,4,26,1],[25,4,28,1],[25,11,28,8,"graph"],[25,16,28,13],[26,2,29,0],[28,2,31,0],[29,2,32,0],[29,11,32,9,"deriveBFS"],[29,20,32,18,"deriveBFS"],[29,21,32,19,"fromModel"],[29,30,32,28],[29,32,32,30],[30,4,33,1],[30,8,33,7,"graph"],[30,13,33,12],[30,16,33,15,"buildGraph"],[30,26,33,25],[30,27,33,26],[30,28,33,27],[31,4,34,1],[31,8,34,7,"queue"],[31,13,34,12],[31,16,34,15],[31,17,34,16,"fromModel"],[31,26,34,25],[31,27,34,26],[31,28,34,27],[31,29,34,28],[33,4,36,1,"graph"],[33,9,36,6],[33,10,36,7,"fromModel"],[33,19,36,16],[33,20,36,17],[33,21,36,18,"distance"],[33,29,36,26],[33,32,36,29],[33,33,36,30],[34,4,38,1],[34,11,38,8,"queue"],[34,16,38,13],[34,17,38,14,"length"],[34,23,38,20],[34,25,38,22],[35,6,39,2],[35,10,39,8,"current"],[35,17,39,15],[35,20,39,18,"queue"],[35,25,39,23],[35,26,39,24,"pop"],[35,29,39,27],[35,30,39,28],[35,31,39,29],[36,6,40,2],[36,10,40,8,"adjacents"],[36,19,40,17],[36,22,40,20,"Object"],[36,28,40,26],[36,29,40,27,"keys"],[36,33,40,31],[36,34,40,32,"_$$_REQUIRE"],[36,45,40,32],[36,46,40,32,"_dependencyMap"],[36,60,40,32],[36,82,40,44,"current"],[36,89,40,51],[36,90,40,52],[36,91,40,53],[37,6,42,2],[37,11,42,7],[37,15,42,11,"len"],[37,18,42,14],[37,21,42,17,"adjacents"],[37,30,42,26],[37,31,42,27,"length"],[37,37,42,33],[37,39,42,35,"i"],[37,40,42,36],[37,43,42,39],[37,44,42,40],[37,46,42,42,"i"],[37,47,42,43],[37,50,42,46,"len"],[37,53,42,49],[37,55,42,51,"i"],[37,56,42,52],[37,58,42,54],[37,60,42,56],[38,8,43,3],[38,12,43,9,"adjacent"],[38,20,43,17],[38,23,43,20,"adjacents"],[38,32,43,29],[38,33,43,30,"i"],[38,34,43,31],[38,35,43,32],[39,8,44,3],[39,12,44,9,"node"],[39,16,44,13],[39,19,44,16,"graph"],[39,24,44,21],[39,25,44,22,"adjacent"],[39,33,44,30],[39,34,44,31],[40,8,46,3],[40,12,46,7,"node"],[40,16,46,11],[40,17,46,12,"distance"],[40,25,46,20],[40,30,46,25],[40,31,46,26],[40,32,46,27],[40,34,46,29],[41,10,47,4,"node"],[41,14,47,8],[41,15,47,9,"distance"],[41,23,47,17],[41,26,47,20,"graph"],[41,31,47,25],[41,32,47,26,"current"],[41,39,47,33],[41,40,47,34],[41,41,47,35,"distance"],[41,49,47,43],[41,52,47,46],[41,53,47,47],[42,10,48,4,"node"],[42,14,48,8],[42,15,48,9,"parent"],[42,21,48,15],[42,24,48,18,"current"],[42,31,48,25],[43,10,49,4,"queue"],[43,15,49,9],[43,16,49,10,"unshift"],[43,23,49,17],[43,24,49,18,"adjacent"],[43,32,49,26],[43,33,49,27],[44,8,50,3],[45,6,51,2],[46,4,52,1],[47,4,54,1],[47,11,54,8,"graph"],[47,16,54,13],[48,2,55,0],[49,2,57,0],[49,11,57,9,"link"],[49,15,57,13,"link"],[49,16,57,14,"from"],[49,20,57,18],[49,22,57,20,"to"],[49,24,57,22],[49,26,57,24],[50,4,58,1],[50,11,58,8],[50,21,58,18,"args"],[50,25,58,22],[50,27,58,24],[51,6,59,2],[51,13,59,9,"to"],[51,15,59,11],[51,16,59,12,"from"],[51,20,59,16],[51,21,59,17,"args"],[51,25,59,21],[51,26,59,22],[51,27,59,23],[52,4,60,1],[52,5,60,2],[53,2,61,0],[54,2,63,0],[54,11,63,9,"wrapConversion"],[54,25,63,23,"wrapConversion"],[54,26,63,24,"toModel"],[54,33,63,31],[54,35,63,33,"graph"],[54,40,63,38],[54,42,63,40],[55,4,64,1],[55,8,64,7,"path"],[55,12,64,11],[55,15,64,14],[55,16,64,15,"graph"],[55,21,64,20],[55,22,64,21,"toModel"],[55,29,64,28],[55,30,64,29],[55,31,64,30,"parent"],[55,37,64,36],[55,39,64,38,"toModel"],[55,46,64,45],[55,47,64,46],[56,4,65,1],[56,8,65,5,"fn"],[56,10,65,7],[56,13,65,10,"_$$_REQUIRE"],[56,24,65,10],[56,25,65,10,"_dependencyMap"],[56,39,65,10],[56,61,65,22,"graph"],[56,66,65,27],[56,67,65,28,"toModel"],[56,74,65,35],[56,75,65,36],[56,76,65,37,"parent"],[56,82,65,43],[56,83,65,44],[56,84,65,45,"toModel"],[56,91,65,52],[56,92,65,53],[57,4,67,1],[57,8,67,5,"cur"],[57,11,67,8],[57,14,67,11,"graph"],[57,19,67,16],[57,20,67,17,"toModel"],[57,27,67,24],[57,28,67,25],[57,29,67,26,"parent"],[57,35,67,32],[58,4,68,1],[58,11,68,8,"graph"],[58,16,68,13],[58,17,68,14,"cur"],[58,20,68,17],[58,21,68,18],[58,22,68,19,"parent"],[58,28,68,25],[58,30,68,27],[59,6,69,2,"path"],[59,10,69,6],[59,11,69,7,"unshift"],[59,18,69,14],[59,19,69,15,"graph"],[59,24,69,20],[59,25,69,21,"cur"],[59,28,69,24],[59,29,69,25],[59,30,69,26,"parent"],[59,36,69,32],[59,37,69,33],[60,6,70,2,"fn"],[60,8,70,4],[60,11,70,7,"link"],[60,15,70,11],[60,16,70,12,"_$$_REQUIRE"],[60,27,70,12],[60,28,70,12,"_dependencyMap"],[60,42,70,12],[60,64,70,24,"graph"],[60,69,70,29],[60,70,70,30,"cur"],[60,73,70,33],[60,74,70,34],[60,75,70,35,"parent"],[60,81,70,41],[60,82,70,42],[60,83,70,43,"cur"],[60,86,70,46],[60,87,70,47],[60,89,70,49,"fn"],[60,91,70,51],[60,92,70,52],[61,6,71,2,"cur"],[61,9,71,5],[61,12,71,8,"graph"],[61,17,71,13],[61,18,71,14,"cur"],[61,21,71,17],[61,22,71,18],[61,23,71,19,"parent"],[61,29,71,25],[62,4,72,1],[63,4,74,1,"fn"],[63,6,74,3],[63,7,74,4,"conversion"],[63,17,74,14],[63,20,74,17,"path"],[63,24,74,21],[64,4,75,1],[64,11,75,8,"fn"],[64,13,75,10],[65,2,76,0],[66,2,78,0,"module"],[66,8,78,6],[66,9,78,7,"exports"],[66,16,78,14],[66,19,78,17],[66,29,78,27,"fromModel"],[66,38,78,36],[66,40,78,38],[67,4,79,1],[67,8,79,7,"graph"],[67,13,79,12],[67,16,79,15,"deriveBFS"],[67,25,79,24],[67,26,79,25,"fromModel"],[67,35,79,34],[67,36,79,35],[68,4,80,1],[68,8,80,7,"conversion"],[68,18,80,17],[68,21,80,20],[68,22,80,21],[68,23,80,22],[69,4,82,1],[69,8,82,7,"models"],[69,14,82,13],[69,17,82,16,"Object"],[69,23,82,22],[69,24,82,23,"keys"],[69,28,82,27],[69,29,82,28,"graph"],[69,34,82,33],[69,35,82,34],[70,4,83,1],[70,9,83,6],[70,13,83,10,"len"],[70,16,83,13],[70,19,83,16,"models"],[70,25,83,22],[70,26,83,23,"length"],[70,32,83,29],[70,34,83,31,"i"],[70,35,83,32],[70,38,83,35],[70,39,83,36],[70,41,83,38,"i"],[70,42,83,39],[70,45,83,42,"len"],[70,48,83,45],[70,50,83,47,"i"],[70,51,83,48],[70,53,83,50],[70,55,83,52],[71,6,84,2],[71,10,84,8,"toModel"],[71,17,84,15],[71,20,84,18,"models"],[71,26,84,24],[71,27,84,25,"i"],[71,28,84,26],[71,29,84,27],[72,6,85,2],[72,10,85,8,"node"],[72,14,85,12],[72,17,85,15,"graph"],[72,22,85,20],[72,23,85,21,"toModel"],[72,30,85,28],[72,31,85,29],[73,6,87,2],[73,10,87,6,"node"],[73,14,87,10],[73,15,87,11,"parent"],[73,21,87,17],[73,26,87,22],[73,30,87,26],[73,32,87,28],[74,8,88,3],[75,8,89,3],[76,6,90,2],[77,6,92,2,"conversion"],[77,16,92,12],[77,17,92,13,"toModel"],[77,24,92,20],[77,25,92,21],[77,28,92,24,"wrapConversion"],[77,42,92,38],[77,43,92,39,"toModel"],[77,50,92,46],[77,52,92,48,"graph"],[77,57,92,53],[77,58,92,54],[78,4,93,1],[79,4,95,1],[79,11,95,8,"conversion"],[79,21,95,18],[80,2,96,0],[80,3,96,1],[81,0,96,2],[81,3]],"functionMap":{"names":["<global>","buildGraph","deriveBFS","link","<anonymous>","wrapConversion","module.exports"],"mappings":"AAA;ACa;CDe;AEG;CFuB;AGE;QCC;EDE;CHC;AKE;CLa;iBME;CNkB"}},"type":"js/module"}]}