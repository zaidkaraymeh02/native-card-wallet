{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":422,"column":0,"index":14427}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"../../EventEmitter/RCTDeviceEventEmitter","data":{"asyncType":null,"locs":[{"start":{"line":15,"column":0,"index":416},"end":{"line":15,"column":77,"index":493}}],"key":"r87Yt7vbAr+C1I9qeBMQ65TxQNU="}},{"name":"../../Utilities/Platform","data":{"asyncType":null,"locs":[{"start":{"line":17,"column":0,"index":566},"end":{"line":17,"column":48,"index":614}}],"key":"u8HkMskTipFtyna6raQCNa0ZU48="}},{"name":"./legacySendAccessibilityEvent","data":{"asyncType":null,"locs":[{"start":{"line":18,"column":0,"index":615},"end":{"line":18,"column":74,"index":689}}],"key":"tyfXp/aGwUYa7fV5QNchmcoIc/0="}},{"name":"./NativeAccessibilityInfo","data":{"asyncType":null,"locs":[{"start":{"line":19,"column":0,"index":690},"end":{"line":19,"column":71,"index":761}}],"key":"l3xdACzrGnutwLJ1TpOKOM+V44g="}},{"name":"./NativeAccessibilityManager","data":{"asyncType":null,"locs":[{"start":{"line":20,"column":0,"index":762},"end":{"line":20,"column":73,"index":835}}],"key":"MuIa7n68FHi91IuTdBFDVSRAuZ4="}},{"name":"../../ReactNative/RendererProxy","data":{"asyncType":null,"locs":[{"start":{"line":16,"column":0,"index":494},"end":{"line":16,"column":71,"index":565}}],"key":"QxznglvNF7hpOO8cCvqhdE7Uo6Y="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../../EventEmitter/RCTDeviceEventEmitter\"));\n  var _Platform = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"../../Utilities/Platform\"));\n  var _legacySendAccessibilityEvent = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./legacySendAccessibilityEvent\"));\n  var _NativeAccessibilityInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./NativeAccessibilityInfo\"));\n  var _NativeAccessibilityManager = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./NativeAccessibilityManager\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  // Events that are only supported on Android.\n\n  // Events that are only supported on iOS.\n\n  // Mapping of public event names to platform-specific event names.\n  var EventNames = _Platform.default.OS === 'android' ? new Map([['change', 'touchExplorationDidChange'], ['reduceMotionChanged', 'reduceMotionDidChange'], ['screenReaderChanged', 'touchExplorationDidChange'], ['accessibilityServiceChanged', 'accessibilityServiceDidChange']]) : new Map([['announcementFinished', 'announcementFinished'], ['boldTextChanged', 'boldTextChanged'], ['change', 'screenReaderChanged'], ['grayscaleChanged', 'grayscaleChanged'], ['invertColorsChanged', 'invertColorsChanged'], ['reduceMotionChanged', 'reduceMotionChanged'], ['reduceTransparencyChanged', 'reduceTransparencyChanged'], ['screenReaderChanged', 'screenReaderChanged']]);\n\n  /**\n   * Sometimes it's useful to know whether or not the device has a screen reader\n   * that is currently active. The `AccessibilityInfo` API is designed for this\n   * purpose. You can use it to query the current state of the screen reader as\n   * well as to register to be notified when the state of the screen reader\n   * changes.\n   *\n   * See https://reactnative.dev/docs/accessibilityinfo\n   */\n  var AccessibilityInfo = {\n    /**\n     * Query whether bold text is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when bold text is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isBoldTextEnabled\n     */\n    isBoldTextEnabled: function isBoldTextEnabled() {\n      if (_Platform.default.OS === 'android') {\n        return Promise.resolve(false);\n      } else {\n        return new Promise(function (resolve, reject) {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentBoldTextState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        });\n      }\n    },\n    /**\n     * Query whether grayscale is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when grayscale is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isGrayscaleEnabled\n     */\n    isGrayscaleEnabled: function isGrayscaleEnabled() {\n      if (_Platform.default.OS === 'android') {\n        return Promise.resolve(false);\n      } else {\n        return new Promise(function (resolve, reject) {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentGrayscaleState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        });\n      }\n    },\n    /**\n     * Query whether inverted colors are currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when invert color is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isInvertColorsEnabled\n     */\n    isInvertColorsEnabled: function isInvertColorsEnabled() {\n      if (_Platform.default.OS === 'android') {\n        return Promise.resolve(false);\n      } else {\n        return new Promise(function (resolve, reject) {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentInvertColorsState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        });\n      }\n    },\n    /**\n     * Query whether reduced motion is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when a reduce motion is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isReduceMotionEnabled\n     */\n    isReduceMotionEnabled: function isReduceMotionEnabled() {\n      return new Promise(function (resolve, reject) {\n        if (_Platform.default.OS === 'android') {\n          if (_NativeAccessibilityInfo.default != null) {\n            _NativeAccessibilityInfo.default.isReduceMotionEnabled(resolve);\n          } else {\n            reject(null);\n          }\n        } else {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentReduceMotionState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        }\n      });\n    },\n    /**\n     * Query whether reduce motion and prefer cross-fade transitions settings are currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when  prefer cross-fade transitions is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#prefersCrossFadeTransitions\n     */\n    prefersCrossFadeTransitions: function prefersCrossFadeTransitions() {\n      return new Promise(function (resolve, reject) {\n        if (_Platform.default.OS === 'android') {\n          return Promise.resolve(false);\n        } else {\n          if ((_NativeAccessibilityManager.default == null ? void 0 : _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState) != null) {\n            _NativeAccessibilityManager.default.getCurrentPrefersCrossFadeTransitionsState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        }\n      });\n    },\n    /**\n     * Query whether reduced transparency is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when a reduce transparency is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isReduceTransparencyEnabled\n     */\n    isReduceTransparencyEnabled: function isReduceTransparencyEnabled() {\n      if (_Platform.default.OS === 'android') {\n        return Promise.resolve(false);\n      } else {\n        return new Promise(function (resolve, reject) {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentReduceTransparencyState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        });\n      }\n    },\n    /**\n     * Query whether a screen reader is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when a screen reader is enabled and `false` otherwise.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#isScreenReaderEnabled\n     */\n    isScreenReaderEnabled: function isScreenReaderEnabled() {\n      return new Promise(function (resolve, reject) {\n        if (_Platform.default.OS === 'android') {\n          if (_NativeAccessibilityInfo.default != null) {\n            _NativeAccessibilityInfo.default.isTouchExplorationEnabled(resolve);\n          } else {\n            reject(null);\n          }\n        } else {\n          if (_NativeAccessibilityManager.default != null) {\n            _NativeAccessibilityManager.default.getCurrentVoiceOverState(resolve, reject);\n          } else {\n            reject(null);\n          }\n        }\n      });\n    },\n    /**\n     * Query whether Accessibility Service is currently enabled.\n     *\n     * Returns a promise which resolves to a boolean.\n     * The result is `true` when any service is enabled and `false` otherwise.\n     *\n     * @platform android\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo/#isaccessibilityserviceenabled-android\n     */\n    isAccessibilityServiceEnabled: function isAccessibilityServiceEnabled() {\n      return new Promise(function (resolve, reject) {\n        if (_Platform.default.OS === 'android') {\n          if (_NativeAccessibilityInfo.default != null && _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled != null) {\n            _NativeAccessibilityInfo.default.isAccessibilityServiceEnabled(resolve);\n          } else {\n            reject(null);\n          }\n        } else {\n          reject(null);\n        }\n      });\n    },\n    /**\n     * Add an event handler. Supported events:\n     *\n     * - `reduceMotionChanged`: Fires when the state of the reduce motion toggle changes.\n     *   The argument to the event handler is a boolean. The boolean is `true` when a reduce\n     *   motion is enabled (or when \"Transition Animation Scale\" in \"Developer options\" is\n     *   \"Animation off\") and `false` otherwise.\n     * - `screenReaderChanged`: Fires when the state of the screen reader changes. The argument\n     *   to the event handler is a boolean. The boolean is `true` when a screen\n     *   reader is enabled and `false` otherwise.\n     *\n     * These events are only supported on iOS:\n     *\n     * - `boldTextChanged`: iOS-only event. Fires when the state of the bold text toggle changes.\n     *   The argument to the event handler is a boolean. The boolean is `true` when a bold text\n     *   is enabled and `false` otherwise.\n     * - `grayscaleChanged`: iOS-only event. Fires when the state of the gray scale toggle changes.\n     *   The argument to the event handler is a boolean. The boolean is `true` when a gray scale\n     *   is enabled and `false` otherwise.\n     * - `invertColorsChanged`: iOS-only event. Fires when the state of the invert colors toggle\n     *   changes. The argument to the event handler is a boolean. The boolean is `true` when a invert\n     *   colors is enabled and `false` otherwise.\n     * - `reduceTransparencyChanged`: iOS-only event. Fires when the state of the reduce transparency\n     *   toggle changes.  The argument to the event handler is a boolean. The boolean is `true`\n     *   when a reduce transparency is enabled and `false` otherwise.\n     * - `announcementFinished`: iOS-only event. Fires when the screen reader has\n     *   finished making an announcement. The argument to the event handler is a\n     *   dictionary with these keys:\n     *     - `announcement`: The string announced by the screen reader.\n     *     - `success`: A boolean indicating whether the announcement was\n     *       successfully made.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#addeventlistener\n     */\n    addEventListener: function addEventListener(eventName,\n    // $FlowIssue[incompatible-type] - Flow bug with unions and generics (T128099423)\n    handler) {\n      var deviceEventName = EventNames.get(eventName);\n      return deviceEventName == null ? {\n        remove: function remove() {}\n      } :\n      // $FlowFixMe[incompatible-call]\n      _RCTDeviceEventEmitter.default.addListener(deviceEventName, handler);\n    },\n    /**\n     * Set accessibility focus to a React component.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#setaccessibilityfocus\n     */\n    setAccessibilityFocus: function setAccessibilityFocus(reactTag) {\n      (0, _legacySendAccessibilityEvent.default)(reactTag, 'focus');\n    },\n    /**\n     * Send a named accessibility event to a HostComponent.\n     */\n    sendAccessibilityEvent: function sendAccessibilityEvent(handle, eventType) {\n      // iOS only supports 'focus' event types\n      if (_Platform.default.OS === 'ios' && eventType === 'click') {\n        return;\n      }\n      // route through React renderer to distinguish between Fabric and non-Fabric handles\n      (0, _$$_REQUIRE(_dependencyMap[6], \"../../ReactNative/RendererProxy\").sendAccessibilityEvent)(handle, eventType);\n    },\n    /**\n     * Post a string to be announced by the screen reader.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#announceforaccessibility\n     */\n    announceForAccessibility: function announceForAccessibility(announcement) {\n      if (_Platform.default.OS === 'android') {\n        _NativeAccessibilityInfo.default == null || _NativeAccessibilityInfo.default.announceForAccessibility(announcement);\n      } else {\n        _NativeAccessibilityManager.default == null || _NativeAccessibilityManager.default.announceForAccessibility(announcement);\n      }\n    },\n    /**\n     * Post a string to be announced by the screen reader.\n     * - `announcement`: The string announced by the screen reader.\n     * - `options`: An object that configures the reading options.\n     *   - `queue`: The announcement will be queued behind existing announcements. iOS only.\n     */\n    announceForAccessibilityWithOptions: function announceForAccessibilityWithOptions(announcement, options) {\n      if (_Platform.default.OS === 'android') {\n        _NativeAccessibilityInfo.default == null || _NativeAccessibilityInfo.default.announceForAccessibility(announcement);\n      } else {\n        if (_NativeAccessibilityManager.default != null && _NativeAccessibilityManager.default.announceForAccessibilityWithOptions) {\n          _NativeAccessibilityManager.default == null || _NativeAccessibilityManager.default.announceForAccessibilityWithOptions(announcement, options);\n        } else {\n          _NativeAccessibilityManager.default == null || _NativeAccessibilityManager.default.announceForAccessibility(announcement);\n        }\n      }\n    },\n    /**\n     * Get the recommended timeout for changes to the UI needed by this user.\n     *\n     * See https://reactnative.dev/docs/accessibilityinfo#getrecommendedtimeoutmillis\n     */\n    getRecommendedTimeoutMillis: function getRecommendedTimeoutMillis(originalTimeout) {\n      if (_Platform.default.OS === 'android') {\n        return new Promise(function (resolve, reject) {\n          if (_NativeAccessibilityInfo.default != null && _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis) {\n            _NativeAccessibilityInfo.default.getRecommendedTimeoutMillis(originalTimeout, resolve);\n          } else {\n            resolve(originalTimeout);\n          }\n        });\n      } else {\n        return Promise.resolve(originalTimeout);\n      }\n    }\n  };\n  var _default = exports.default = AccessibilityInfo;\n});","lineCount":329,"map":[[7,2,15,0],[7,6,15,0,"_RCTDeviceEventEmitter"],[7,28,15,0],[7,31,15,0,"_interopRequireDefault"],[7,53,15,0],[7,54,15,0,"_$$_REQUIRE"],[7,65,15,0],[7,66,15,0,"_dependencyMap"],[7,80,15,0],[8,2,17,0],[8,6,17,0,"_Platform"],[8,15,17,0],[8,18,17,0,"_interopRequireDefault"],[8,40,17,0],[8,41,17,0,"_$$_REQUIRE"],[8,52,17,0],[8,53,17,0,"_dependencyMap"],[8,67,17,0],[9,2,18,0],[9,6,18,0,"_legacySendAccessibilityEvent"],[9,35,18,0],[9,38,18,0,"_interopRequireDefault"],[9,60,18,0],[9,61,18,0,"_$$_REQUIRE"],[9,72,18,0],[9,73,18,0,"_dependencyMap"],[9,87,18,0],[10,2,19,0],[10,6,19,0,"_NativeAccessibilityInfo"],[10,30,19,0],[10,33,19,0,"_interopRequireDefault"],[10,55,19,0],[10,56,19,0,"_$$_REQUIRE"],[10,67,19,0],[10,68,19,0,"_dependencyMap"],[10,82,19,0],[11,2,20,0],[11,6,20,0,"_NativeAccessibilityManager"],[11,33,20,0],[11,36,20,0,"_interopRequireDefault"],[11,58,20,0],[11,59,20,0,"_$$_REQUIRE"],[11,70,20,0],[11,71,20,0,"_dependencyMap"],[11,85,20,0],[12,2,1,0],[13,0,2,0],[14,0,3,0],[15,0,4,0],[16,0,5,0],[17,0,6,0],[18,0,7,0],[19,0,8,0],[20,0,9,0],[22,2,22,0],[24,2,27,0],[26,2,46,0],[27,2,47,0],[27,6,47,6,"EventNames"],[27,16,50,1],[27,19,50,4,"Platform"],[27,36,50,12],[27,37,50,13,"OS"],[27,39,50,15],[27,44,50,20],[27,53,50,29],[27,56,51,4],[27,60,51,8,"Map"],[27,63,51,11],[27,64,51,12],[27,65,52,6],[27,66,52,7],[27,74,52,15],[27,76,52,17],[27,103,52,44],[27,104,52,45],[27,106,53,6],[27,107,53,7],[27,128,53,28],[27,130,53,30],[27,153,53,53],[27,154,53,54],[27,156,54,6],[27,157,54,7],[27,178,54,28],[27,180,54,30],[27,207,54,57],[27,208,54,58],[27,210,55,6],[27,211,55,7],[27,240,55,36],[27,242,55,38],[27,273,55,69],[27,274,55,70],[27,275,56,5],[27,276,56,6],[27,279,57,4],[27,283,57,8,"Map"],[27,286,57,11],[27,287,57,12],[27,288,58,6],[27,289,58,7],[27,311,58,29],[27,313,58,31],[27,335,58,53],[27,336,58,54],[27,338,59,6],[27,339,59,7],[27,356,59,24],[27,358,59,26],[27,375,59,43],[27,376,59,44],[27,378,60,6],[27,379,60,7],[27,387,60,15],[27,389,60,17],[27,410,60,38],[27,411,60,39],[27,413,61,6],[27,414,61,7],[27,432,61,25],[27,434,61,27],[27,452,61,45],[27,453,61,46],[27,455,62,6],[27,456,62,7],[27,477,62,28],[27,479,62,30],[27,500,62,51],[27,501,62,52],[27,503,63,6],[27,504,63,7],[27,525,63,28],[27,527,63,30],[27,548,63,51],[27,549,63,52],[27,551,64,6],[27,552,64,7],[27,579,64,34],[27,581,64,36],[27,608,64,63],[27,609,64,64],[27,611,65,6],[27,612,65,7],[27,633,65,28],[27,635,65,30],[27,656,65,51],[27,657,65,52],[27,658,66,5],[27,659,66,6],[29,2,68,0],[30,0,69,0],[31,0,70,0],[32,0,71,0],[33,0,72,0],[34,0,73,0],[35,0,74,0],[36,0,75,0],[37,0,76,0],[38,2,77,0],[38,6,77,6,"AccessibilityInfo"],[38,23,77,23],[38,26,77,26],[39,4,78,2],[40,0,79,0],[41,0,80,0],[42,0,81,0],[43,0,82,0],[44,0,83,0],[45,0,84,0],[46,0,85,0],[47,4,86,2,"isBoldTextEnabled"],[47,21,86,19],[47,32,86,2,"isBoldTextEnabled"],[47,49,86,19,"isBoldTextEnabled"],[47,50,86,19],[47,52,86,40],[48,6,87,4],[48,10,87,8,"Platform"],[48,27,87,16],[48,28,87,17,"OS"],[48,30,87,19],[48,35,87,24],[48,44,87,33],[48,46,87,35],[49,8,88,6],[49,15,88,13,"Promise"],[49,22,88,20],[49,23,88,21,"resolve"],[49,30,88,28],[49,31,88,29],[49,36,88,34],[49,37,88,35],[50,6,89,4],[50,7,89,5],[50,13,89,11],[51,8,90,6],[51,15,90,13],[51,19,90,17,"Promise"],[51,26,90,24],[51,27,90,25],[51,37,90,26,"resolve"],[51,44,90,33],[51,46,90,35,"reject"],[51,52,90,41],[51,54,90,46],[52,10,91,8],[52,14,91,12,"NativeAccessibilityManagerIOS"],[52,49,91,41],[52,53,91,45],[52,57,91,49],[52,59,91,51],[53,12,92,10,"NativeAccessibilityManagerIOS"],[53,47,92,39],[53,48,92,40,"getCurrentBoldTextState"],[53,71,92,63],[53,72,93,12,"resolve"],[53,79,93,19],[53,81,94,12,"reject"],[53,87,95,10],[53,88,95,11],[54,10,96,8],[54,11,96,9],[54,17,96,15],[55,12,97,10,"reject"],[55,18,97,16],[55,19,97,17],[55,23,97,21],[55,24,97,22],[56,10,98,8],[57,8,99,6],[57,9,99,7],[57,10,99,8],[58,6,100,4],[59,4,101,2],[59,5,101,3],[60,4,103,2],[61,0,104,0],[62,0,105,0],[63,0,106,0],[64,0,107,0],[65,0,108,0],[66,0,109,0],[67,0,110,0],[68,4,111,2,"isGrayscaleEnabled"],[68,22,111,20],[68,33,111,2,"isGrayscaleEnabled"],[68,51,111,20,"isGrayscaleEnabled"],[68,52,111,20],[68,54,111,41],[69,6,112,4],[69,10,112,8,"Platform"],[69,27,112,16],[69,28,112,17,"OS"],[69,30,112,19],[69,35,112,24],[69,44,112,33],[69,46,112,35],[70,8,113,6],[70,15,113,13,"Promise"],[70,22,113,20],[70,23,113,21,"resolve"],[70,30,113,28],[70,31,113,29],[70,36,113,34],[70,37,113,35],[71,6,114,4],[71,7,114,5],[71,13,114,11],[72,8,115,6],[72,15,115,13],[72,19,115,17,"Promise"],[72,26,115,24],[72,27,115,25],[72,37,115,26,"resolve"],[72,44,115,33],[72,46,115,35,"reject"],[72,52,115,41],[72,54,115,46],[73,10,116,8],[73,14,116,12,"NativeAccessibilityManagerIOS"],[73,49,116,41],[73,53,116,45],[73,57,116,49],[73,59,116,51],[74,12,117,10,"NativeAccessibilityManagerIOS"],[74,47,117,39],[74,48,117,40,"getCurrentGrayscaleState"],[74,72,117,64],[74,73,118,12,"resolve"],[74,80,118,19],[74,82,119,12,"reject"],[74,88,120,10],[74,89,120,11],[75,10,121,8],[75,11,121,9],[75,17,121,15],[76,12,122,10,"reject"],[76,18,122,16],[76,19,122,17],[76,23,122,21],[76,24,122,22],[77,10,123,8],[78,8,124,6],[78,9,124,7],[78,10,124,8],[79,6,125,4],[80,4,126,2],[80,5,126,3],[81,4,128,2],[82,0,129,0],[83,0,130,0],[84,0,131,0],[85,0,132,0],[86,0,133,0],[87,0,134,0],[88,0,135,0],[89,4,136,2,"isInvertColorsEnabled"],[89,25,136,23],[89,36,136,2,"isInvertColorsEnabled"],[89,57,136,23,"isInvertColorsEnabled"],[89,58,136,23],[89,60,136,44],[90,6,137,4],[90,10,137,8,"Platform"],[90,27,137,16],[90,28,137,17,"OS"],[90,30,137,19],[90,35,137,24],[90,44,137,33],[90,46,137,35],[91,8,138,6],[91,15,138,13,"Promise"],[91,22,138,20],[91,23,138,21,"resolve"],[91,30,138,28],[91,31,138,29],[91,36,138,34],[91,37,138,35],[92,6,139,4],[92,7,139,5],[92,13,139,11],[93,8,140,6],[93,15,140,13],[93,19,140,17,"Promise"],[93,26,140,24],[93,27,140,25],[93,37,140,26,"resolve"],[93,44,140,33],[93,46,140,35,"reject"],[93,52,140,41],[93,54,140,46],[94,10,141,8],[94,14,141,12,"NativeAccessibilityManagerIOS"],[94,49,141,41],[94,53,141,45],[94,57,141,49],[94,59,141,51],[95,12,142,10,"NativeAccessibilityManagerIOS"],[95,47,142,39],[95,48,142,40,"getCurrentInvertColorsState"],[95,75,142,67],[95,76,143,12,"resolve"],[95,83,143,19],[95,85,144,12,"reject"],[95,91,145,10],[95,92,145,11],[96,10,146,8],[96,11,146,9],[96,17,146,15],[97,12,147,10,"reject"],[97,18,147,16],[97,19,147,17],[97,23,147,21],[97,24,147,22],[98,10,148,8],[99,8,149,6],[99,9,149,7],[99,10,149,8],[100,6,150,4],[101,4,151,2],[101,5,151,3],[102,4,153,2],[103,0,154,0],[104,0,155,0],[105,0,156,0],[106,0,157,0],[107,0,158,0],[108,0,159,0],[109,0,160,0],[110,4,161,2,"isReduceMotionEnabled"],[110,25,161,23],[110,36,161,2,"isReduceMotionEnabled"],[110,57,161,23,"isReduceMotionEnabled"],[110,58,161,23],[110,60,161,44],[111,6,162,4],[111,13,162,11],[111,17,162,15,"Promise"],[111,24,162,22],[111,25,162,23],[111,35,162,24,"resolve"],[111,42,162,31],[111,44,162,33,"reject"],[111,50,162,39],[111,52,162,44],[112,8,163,6],[112,12,163,10,"Platform"],[112,29,163,18],[112,30,163,19,"OS"],[112,32,163,21],[112,37,163,26],[112,46,163,35],[112,48,163,37],[113,10,164,8],[113,14,164,12,"NativeAccessibilityInfoAndroid"],[113,46,164,42],[113,50,164,46],[113,54,164,50],[113,56,164,52],[114,12,165,10,"NativeAccessibilityInfoAndroid"],[114,44,165,40],[114,45,165,41,"isReduceMotionEnabled"],[114,66,165,62],[114,67,165,63,"resolve"],[114,74,165,70],[114,75,165,71],[115,10,166,8],[115,11,166,9],[115,17,166,15],[116,12,167,10,"reject"],[116,18,167,16],[116,19,167,17],[116,23,167,21],[116,24,167,22],[117,10,168,8],[118,8,169,6],[118,9,169,7],[118,15,169,13],[119,10,170,8],[119,14,170,12,"NativeAccessibilityManagerIOS"],[119,49,170,41],[119,53,170,45],[119,57,170,49],[119,59,170,51],[120,12,171,10,"NativeAccessibilityManagerIOS"],[120,47,171,39],[120,48,171,40,"getCurrentReduceMotionState"],[120,75,171,67],[120,76,172,12,"resolve"],[120,83,172,19],[120,85,173,12,"reject"],[120,91,174,10],[120,92,174,11],[121,10,175,8],[121,11,175,9],[121,17,175,15],[122,12,176,10,"reject"],[122,18,176,16],[122,19,176,17],[122,23,176,21],[122,24,176,22],[123,10,177,8],[124,8,178,6],[125,6,179,4],[125,7,179,5],[125,8,179,6],[126,4,180,2],[126,5,180,3],[127,4,182,2],[128,0,183,0],[129,0,184,0],[130,0,185,0],[131,0,186,0],[132,0,187,0],[133,0,188,0],[134,0,189,0],[135,4,190,2,"prefersCrossFadeTransitions"],[135,31,190,29],[135,42,190,2,"prefersCrossFadeTransitions"],[135,69,190,29,"prefersCrossFadeTransitions"],[135,70,190,29],[135,72,190,50],[136,6,191,4],[136,13,191,11],[136,17,191,15,"Promise"],[136,24,191,22],[136,25,191,23],[136,35,191,24,"resolve"],[136,42,191,31],[136,44,191,33,"reject"],[136,50,191,39],[136,52,191,44],[137,8,192,6],[137,12,192,10,"Platform"],[137,29,192,18],[137,30,192,19,"OS"],[137,32,192,21],[137,37,192,26],[137,46,192,35],[137,48,192,37],[138,10,193,8],[138,17,193,15,"Promise"],[138,24,193,22],[138,25,193,23,"resolve"],[138,32,193,30],[138,33,193,31],[138,38,193,36],[138,39,193,37],[139,8,194,6],[139,9,194,7],[139,15,194,13],[140,10,195,8],[140,14,196,10],[140,15,196,10,"NativeAccessibilityManagerIOS"],[140,50,196,39],[140,70,196,10,"NativeAccessibilityManagerIOS"],[140,105,196,39],[140,106,196,41,"getCurrentPrefersCrossFadeTransitionsState"],[140,148,196,83],[140,153,197,10],[140,157,197,14],[140,159,198,10],[141,12,199,10,"NativeAccessibilityManagerIOS"],[141,47,199,39],[141,48,199,40,"getCurrentPrefersCrossFadeTransitionsState"],[141,90,199,82],[141,91,200,12,"resolve"],[141,98,200,19],[141,100,201,12,"reject"],[141,106,202,10],[141,107,202,11],[142,10,203,8],[142,11,203,9],[142,17,203,15],[143,12,204,10,"reject"],[143,18,204,16],[143,19,204,17],[143,23,204,21],[143,24,204,22],[144,10,205,8],[145,8,206,6],[146,6,207,4],[146,7,207,5],[146,8,207,6],[147,4,208,2],[147,5,208,3],[148,4,210,2],[149,0,211,0],[150,0,212,0],[151,0,213,0],[152,0,214,0],[153,0,215,0],[154,0,216,0],[155,0,217,0],[156,4,218,2,"isReduceTransparencyEnabled"],[156,31,218,29],[156,42,218,2,"isReduceTransparencyEnabled"],[156,69,218,29,"isReduceTransparencyEnabled"],[156,70,218,29],[156,72,218,50],[157,6,219,4],[157,10,219,8,"Platform"],[157,27,219,16],[157,28,219,17,"OS"],[157,30,219,19],[157,35,219,24],[157,44,219,33],[157,46,219,35],[158,8,220,6],[158,15,220,13,"Promise"],[158,22,220,20],[158,23,220,21,"resolve"],[158,30,220,28],[158,31,220,29],[158,36,220,34],[158,37,220,35],[159,6,221,4],[159,7,221,5],[159,13,221,11],[160,8,222,6],[160,15,222,13],[160,19,222,17,"Promise"],[160,26,222,24],[160,27,222,25],[160,37,222,26,"resolve"],[160,44,222,33],[160,46,222,35,"reject"],[160,52,222,41],[160,54,222,46],[161,10,223,8],[161,14,223,12,"NativeAccessibilityManagerIOS"],[161,49,223,41],[161,53,223,45],[161,57,223,49],[161,59,223,51],[162,12,224,10,"NativeAccessibilityManagerIOS"],[162,47,224,39],[162,48,224,40,"getCurrentReduceTransparencyState"],[162,81,224,73],[162,82,225,12,"resolve"],[162,89,225,19],[162,91,226,12,"reject"],[162,97,227,10],[162,98,227,11],[163,10,228,8],[163,11,228,9],[163,17,228,15],[164,12,229,10,"reject"],[164,18,229,16],[164,19,229,17],[164,23,229,21],[164,24,229,22],[165,10,230,8],[166,8,231,6],[166,9,231,7],[166,10,231,8],[167,6,232,4],[168,4,233,2],[168,5,233,3],[169,4,235,2],[170,0,236,0],[171,0,237,0],[172,0,238,0],[173,0,239,0],[174,0,240,0],[175,0,241,0],[176,0,242,0],[177,4,243,2,"isScreenReaderEnabled"],[177,25,243,23],[177,36,243,2,"isScreenReaderEnabled"],[177,57,243,23,"isScreenReaderEnabled"],[177,58,243,23],[177,60,243,44],[178,6,244,4],[178,13,244,11],[178,17,244,15,"Promise"],[178,24,244,22],[178,25,244,23],[178,35,244,24,"resolve"],[178,42,244,31],[178,44,244,33,"reject"],[178,50,244,39],[178,52,244,44],[179,8,245,6],[179,12,245,10,"Platform"],[179,29,245,18],[179,30,245,19,"OS"],[179,32,245,21],[179,37,245,26],[179,46,245,35],[179,48,245,37],[180,10,246,8],[180,14,246,12,"NativeAccessibilityInfoAndroid"],[180,46,246,42],[180,50,246,46],[180,54,246,50],[180,56,246,52],[181,12,247,10,"NativeAccessibilityInfoAndroid"],[181,44,247,40],[181,45,247,41,"isTouchExplorationEnabled"],[181,70,247,66],[181,71,247,67,"resolve"],[181,78,247,74],[181,79,247,75],[182,10,248,8],[182,11,248,9],[182,17,248,15],[183,12,249,10,"reject"],[183,18,249,16],[183,19,249,17],[183,23,249,21],[183,24,249,22],[184,10,250,8],[185,8,251,6],[185,9,251,7],[185,15,251,13],[186,10,252,8],[186,14,252,12,"NativeAccessibilityManagerIOS"],[186,49,252,41],[186,53,252,45],[186,57,252,49],[186,59,252,51],[187,12,253,10,"NativeAccessibilityManagerIOS"],[187,47,253,39],[187,48,253,40,"getCurrentVoiceOverState"],[187,72,253,64],[187,73,254,12,"resolve"],[187,80,254,19],[187,82,255,12,"reject"],[187,88,256,10],[187,89,256,11],[188,10,257,8],[188,11,257,9],[188,17,257,15],[189,12,258,10,"reject"],[189,18,258,16],[189,19,258,17],[189,23,258,21],[189,24,258,22],[190,10,259,8],[191,8,260,6],[192,6,261,4],[192,7,261,5],[192,8,261,6],[193,4,262,2],[193,5,262,3],[194,4,264,2],[195,0,265,0],[196,0,266,0],[197,0,267,0],[198,0,268,0],[199,0,269,0],[200,0,270,0],[201,0,271,0],[202,0,272,0],[203,0,273,0],[204,4,274,2,"isAccessibilityServiceEnabled"],[204,33,274,31],[204,44,274,2,"isAccessibilityServiceEnabled"],[204,73,274,31,"isAccessibilityServiceEnabled"],[204,74,274,31],[204,76,274,52],[205,6,275,4],[205,13,275,11],[205,17,275,15,"Promise"],[205,24,275,22],[205,25,275,23],[205,35,275,24,"resolve"],[205,42,275,31],[205,44,275,33,"reject"],[205,50,275,39],[205,52,275,44],[206,8,276,6],[206,12,276,10,"Platform"],[206,29,276,18],[206,30,276,19,"OS"],[206,32,276,21],[206,37,276,26],[206,46,276,35],[206,48,276,37],[207,10,277,8],[207,14,278,10,"NativeAccessibilityInfoAndroid"],[207,46,278,40],[207,50,278,44],[207,54,278,48],[207,58,279,10,"NativeAccessibilityInfoAndroid"],[207,90,279,40],[207,91,279,41,"isAccessibilityServiceEnabled"],[207,120,279,70],[207,124,279,74],[207,128,279,78],[207,130,280,10],[208,12,281,10,"NativeAccessibilityInfoAndroid"],[208,44,281,40],[208,45,281,41,"isAccessibilityServiceEnabled"],[208,74,281,70],[208,75,281,71,"resolve"],[208,82,281,78],[208,83,281,79],[209,10,282,8],[209,11,282,9],[209,17,282,15],[210,12,283,10,"reject"],[210,18,283,16],[210,19,283,17],[210,23,283,21],[210,24,283,22],[211,10,284,8],[212,8,285,6],[212,9,285,7],[212,15,285,13],[213,10,286,8,"reject"],[213,16,286,14],[213,17,286,15],[213,21,286,19],[213,22,286,20],[214,8,287,6],[215,6,288,4],[215,7,288,5],[215,8,288,6],[216,4,289,2],[216,5,289,3],[217,4,291,2],[218,0,292,0],[219,0,293,0],[220,0,294,0],[221,0,295,0],[222,0,296,0],[223,0,297,0],[224,0,298,0],[225,0,299,0],[226,0,300,0],[227,0,301,0],[228,0,302,0],[229,0,303,0],[230,0,304,0],[231,0,305,0],[232,0,306,0],[233,0,307,0],[234,0,308,0],[235,0,309,0],[236,0,310,0],[237,0,311,0],[238,0,312,0],[239,0,313,0],[240,0,314,0],[241,0,315,0],[242,0,316,0],[243,0,317,0],[244,0,318,0],[245,0,319,0],[246,0,320,0],[247,0,321,0],[248,0,322,0],[249,0,323,0],[250,0,324,0],[251,4,325,2,"addEventListener"],[251,20,325,18],[251,31,325,2,"addEventListener"],[251,47,325,18,"addEventListener"],[251,48,326,4,"eventName"],[251,57,326,16],[252,4,327,4],[253,4,328,4,"handler"],[253,11,328,72],[253,13,329,23],[254,6,330,4],[254,10,330,10,"deviceEventName"],[254,25,330,25],[254,28,330,28,"EventNames"],[254,38,330,38],[254,39,330,39,"get"],[254,42,330,42],[254,43,330,43,"eventName"],[254,52,330,52],[254,53,330,53],[255,6,331,4],[255,13,331,11,"deviceEventName"],[255,28,331,26],[255,32,331,30],[255,36,331,34],[255,39,332,8],[256,8,332,9,"remove"],[256,14,332,15],[256,25,332,9,"remove"],[256,31,332,15,"remove"],[256,32,332,15],[256,34,332,24],[256,35,332,25],[257,6,332,26],[257,7,332,27],[258,6,333,8],[259,6,334,8,"RCTDeviceEventEmitter"],[259,36,334,29],[259,37,334,30,"addListener"],[259,48,334,41],[259,49,334,42,"deviceEventName"],[259,64,334,57],[259,66,334,59,"handler"],[259,73,334,66],[259,74,334,67],[260,4,335,2],[260,5,335,3],[261,4,337,2],[262,0,338,0],[263,0,339,0],[264,0,340,0],[265,0,341,0],[266,4,342,2,"setAccessibilityFocus"],[266,25,342,23],[266,36,342,2,"setAccessibilityFocus"],[266,57,342,23,"setAccessibilityFocus"],[266,58,342,24,"reactTag"],[266,66,342,40],[266,68,342,48],[267,6,343,4],[267,10,343,4,"legacySendAccessibilityEvent"],[267,47,343,32],[267,49,343,33,"reactTag"],[267,57,343,41],[267,59,343,43],[267,66,343,50],[267,67,343,51],[268,4,344,2],[268,5,344,3],[269,4,346,2],[270,0,347,0],[271,0,348,0],[272,4,349,2,"sendAccessibilityEvent"],[272,26,349,24],[272,37,349,2,"sendAccessibilityEvent"],[272,59,349,24,"sendAccessibilityEvent"],[272,60,350,4,"handle"],[272,66,350,44],[272,68,351,4,"eventType"],[272,77,351,38],[272,79,352,4],[273,6,353,4],[274,6,354,4],[274,10,354,8,"Platform"],[274,27,354,16],[274,28,354,17,"OS"],[274,30,354,19],[274,35,354,24],[274,40,354,29],[274,44,354,33,"eventType"],[274,53,354,42],[274,58,354,47],[274,65,354,54],[274,67,354,56],[275,8,355,6],[276,6,356,4],[277,6,357,4],[278,6,358,4],[278,10,358,4,"sendAccessibilityEvent"],[278,40,358,4],[278,41,358,4,"sendAccessibilityEvent"],[278,98,358,26],[278,100,358,27,"handle"],[278,106,358,33],[278,108,358,35,"eventType"],[278,117,358,44],[278,118,358,45],[279,4,359,2],[279,5,359,3],[280,4,361,2],[281,0,362,0],[282,0,363,0],[283,0,364,0],[284,0,365,0],[285,4,366,2,"announceForAccessibility"],[285,28,366,26],[285,39,366,2,"announceForAccessibility"],[285,63,366,26,"announceForAccessibility"],[285,64,366,27,"announcement"],[285,76,366,47],[285,78,366,55],[286,6,367,4],[286,10,367,8,"Platform"],[286,27,367,16],[286,28,367,17,"OS"],[286,30,367,19],[286,35,367,24],[286,44,367,33],[286,46,367,35],[287,8,368,6,"NativeAccessibilityInfoAndroid"],[287,40,368,36],[287,52,368,6,"NativeAccessibilityInfoAndroid"],[287,84,368,36],[287,85,368,38,"announceForAccessibility"],[287,109,368,62],[287,110,368,63,"announcement"],[287,122,368,75],[287,123,368,76],[288,6,369,4],[288,7,369,5],[288,13,369,11],[289,8,370,6,"NativeAccessibilityManagerIOS"],[289,43,370,35],[289,55,370,6,"NativeAccessibilityManagerIOS"],[289,90,370,35],[289,91,370,37,"announceForAccessibility"],[289,115,370,61],[289,116,370,62,"announcement"],[289,128,370,74],[289,129,370,75],[290,6,371,4],[291,4,372,2],[291,5,372,3],[292,4,374,2],[293,0,375,0],[294,0,376,0],[295,0,377,0],[296,0,378,0],[297,0,379,0],[298,4,380,2,"announceForAccessibilityWithOptions"],[298,39,380,37],[298,50,380,2,"announceForAccessibilityWithOptions"],[298,85,380,37,"announceForAccessibilityWithOptions"],[298,86,381,4,"announcement"],[298,98,381,24],[298,100,382,4,"options"],[298,107,382,30],[298,109,383,10],[299,6,384,4],[299,10,384,8,"Platform"],[299,27,384,16],[299,28,384,17,"OS"],[299,30,384,19],[299,35,384,24],[299,44,384,33],[299,46,384,35],[300,8,385,6,"NativeAccessibilityInfoAndroid"],[300,40,385,36],[300,52,385,6,"NativeAccessibilityInfoAndroid"],[300,84,385,36],[300,85,385,38,"announceForAccessibility"],[300,109,385,62],[300,110,385,63,"announcement"],[300,122,385,75],[300,123,385,76],[301,6,386,4],[301,7,386,5],[301,13,386,11],[302,8,387,6],[302,12,387,10,"NativeAccessibilityManagerIOS"],[302,47,387,39],[302,59,387,10,"NativeAccessibilityManagerIOS"],[302,94,387,39],[302,95,387,41,"announceForAccessibilityWithOptions"],[302,130,387,76],[302,132,387,78],[303,10,388,8,"NativeAccessibilityManagerIOS"],[303,45,388,37],[303,57,388,8,"NativeAccessibilityManagerIOS"],[303,92,388,37],[303,93,388,39,"announceForAccessibilityWithOptions"],[303,128,388,74],[303,129,389,10,"announcement"],[303,141,389,22],[303,143,390,10,"options"],[303,150,391,8],[303,151,391,9],[304,8,392,6],[304,9,392,7],[304,15,392,13],[305,10,393,8,"NativeAccessibilityManagerIOS"],[305,45,393,37],[305,57,393,8,"NativeAccessibilityManagerIOS"],[305,92,393,37],[305,93,393,39,"announceForAccessibility"],[305,117,393,63],[305,118,393,64,"announcement"],[305,130,393,76],[305,131,393,77],[306,8,394,6],[307,6,395,4],[308,4,396,2],[308,5,396,3],[309,4,398,2],[310,0,399,0],[311,0,400,0],[312,0,401,0],[313,0,402,0],[314,4,403,2,"getRecommendedTimeoutMillis"],[314,31,403,29],[314,42,403,2,"getRecommendedTimeoutMillis"],[314,69,403,29,"getRecommendedTimeoutMillis"],[314,70,403,30,"originalTimeout"],[314,85,403,53],[314,87,403,72],[315,6,404,4],[315,10,404,8,"Platform"],[315,27,404,16],[315,28,404,17,"OS"],[315,30,404,19],[315,35,404,24],[315,44,404,33],[315,46,404,35],[316,8,405,6],[316,15,405,13],[316,19,405,17,"Promise"],[316,26,405,24],[316,27,405,25],[316,37,405,26,"resolve"],[316,44,405,33],[316,46,405,35,"reject"],[316,52,405,41],[316,54,405,46],[317,10,406,8],[317,14,406,12,"NativeAccessibilityInfoAndroid"],[317,46,406,42],[317,58,406,12,"NativeAccessibilityInfoAndroid"],[317,90,406,42],[317,91,406,44,"getRecommendedTimeoutMillis"],[317,118,406,71],[317,120,406,73],[318,12,407,10,"NativeAccessibilityInfoAndroid"],[318,44,407,40],[318,45,407,41,"getRecommendedTimeoutMillis"],[318,72,407,68],[318,73,408,12,"originalTimeout"],[318,88,408,27],[318,90,409,12,"resolve"],[318,97,410,10],[318,98,410,11],[319,10,411,8],[319,11,411,9],[319,17,411,15],[320,12,412,10,"resolve"],[320,19,412,17],[320,20,412,18,"originalTimeout"],[320,35,412,33],[320,36,412,34],[321,10,413,8],[322,8,414,6],[322,9,414,7],[322,10,414,8],[323,6,415,4],[323,7,415,5],[323,13,415,11],[324,8,416,6],[324,15,416,13,"Promise"],[324,22,416,20],[324,23,416,21,"resolve"],[324,30,416,28],[324,31,416,29,"originalTimeout"],[324,46,416,44],[324,47,416,45],[325,6,417,4],[326,4,418,2],[327,2,419,0],[327,3,419,1],[328,2,419,2],[328,6,419,2,"_default"],[328,14,419,2],[328,17,419,2,"exports"],[328,24,419,2],[328,25,419,2,"default"],[328,32,419,2],[328,35,421,15,"AccessibilityInfo"],[328,52,421,32],[329,0,421,32],[329,3]],"functionMap":{"names":["<global>","isBoldTextEnabled","Promise$argument_0","isGrayscaleEnabled","isInvertColorsEnabled","isReduceMotionEnabled","prefersCrossFadeTransitions","isReduceTransparencyEnabled","isScreenReaderEnabled","isAccessibilityServiceEnabled","addEventListener","remove","setAccessibilityFocus","sendAccessibilityEvent","announceForAccessibility","announceForAccessibilityWithOptions","getRecommendedTimeoutMillis"],"mappings":"AAA;ECqF;yBCI;ODS;GDE;EGU;yBDI;OCS;GHE;EIU;yBFI;OES;GJE;EKU;uBHC;KGiB;GLC;EMU;uBJC;KIgB;GNC;EOU;yBLI;OKS;GPE;EQU;uBNC;KMiB;GRC;ESY;uBPC;KOa;GTC;EUoC;SCO,iBD;GVG;EYO;GZE;EaK;GbU;EcO;GdM;EeQ;GfgB;EgBO;yBdE;OcS;GhBI"}},"type":"js/module"}]}