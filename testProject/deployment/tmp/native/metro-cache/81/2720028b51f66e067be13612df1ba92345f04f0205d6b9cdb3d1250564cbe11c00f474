{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":2,"column":0,"index":2346}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":2,"column":0,"index":2346}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./RCUzEzLD.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":24,"index":24},"end":{"line":1,"column":46,"index":46}}],"key":"Uam3tdyLSmBb+TI0V9VrAVkDXGc="}},{"name":"./B1284HK7.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":89,"index":89},"end":{"line":1,"column":111,"index":111}}],"key":"TvtMygusJR3dLhb9tM4DjLZ6lgA="}},{"name":"react","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":111,"index":111},"end":{"line":1,"column":125,"index":125}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}},{"name":"./ChXXo8Rz.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":125,"index":125},"end":{"line":1,"column":167,"index":167}},{"start":{"line":1,"column":125,"index":125},"end":{"line":1,"column":167,"index":167}}],"key":"L+FG9VqI9kxRYa0NoEJKWk0zdSA="}},{"name":"big.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":24,"index":24}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":24,"index":24}}],"key":"4tCRwD9N5ERyaoFVdmCYsa7NAVA=","isOptional":false}},{"name":"./DNuPbXEE.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":46,"index":46},"end":{"line":1,"column":89,"index":89}}],"key":"/vsfjzoJee4I0u1P/+uVdeX4IC8="}},{"name":"./oW-a68gO.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":167,"index":167},"end":{"line":1,"column":209,"index":209}}],"key":"kRHQVJ7LHm83ssJJgyNgAPNCM1o="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.a = formatValue;\n  exports.f = formatNumber;\n  exports.p = parseNumber;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  _$$_REQUIRE(_dependencyMap[2], \"./RCUzEzLD.js\");\n  _$$_REQUIRE(_dependencyMap[3], \"./B1284HK7.js\");\n  _$$_REQUIRE(_dependencyMap[4], \"react\");\n  function parseNumber(text, decimalsCount) {\n    var _getLocale = (0, _$$_REQUIRE(_dependencyMap[5], \"./ChXXo8Rz.js\").g)(),\n      numbers = _getLocale.numbers;\n    if (!function (text, groupingSeparator, decimalSeparator) {\n      var decimalPart = `\\\\${decimalSeparator}\\\\d+`;\n      return Boolean(new RegExp(`^-?((\\\\d+|\\\\d{1,3}(?:\\\\${groupingSeparator}\\\\d{3})*)(${decimalPart})?|${decimalPart})(e[+-]?\\\\d+)?$`).exec(text));\n    }(text, numbers.groupingSeparator, numbers.decimalSeparator)) return;\n    var value;\n    try {\n      value = new (_$$_REQUIRE(_dependencyMap[6], \"big.js\").Big)(text.split(numbers.groupingSeparator).join(\"\").split(numbers.decimalSeparator).join(\".\"));\n    } catch (_unused) {\n      return;\n    }\n    return null != decimalsCount && decimalsCount >= 0 ? value.round(decimalsCount) : value;\n  }\n  function formatNumber(value, groupDigits, decimalsCount) {\n    var _getLocale2 = (0, _$$_REQUIRE(_dependencyMap[5], \"./ChXXo8Rz.js\").g)(),\n      numbers = _getLocale2.numbers,\n      isNegative = value.lt(0),\n      decimalPrecision = void 0 !== decimalsCount && decimalsCount < 0 ? void 0 : decimalsCount;\n    var _value$toFixed$split = value.toFixed(decimalPrecision).split(\".\"),\n      _value$toFixed$split2 = (0, _slicedToArray2.default)(_value$toFixed$split, 2),\n      intPart = _value$toFixed$split2[0],\n      _value$toFixed$split3 = _value$toFixed$split2[1],\n      decimalPart = _value$toFixed$split3 === void 0 ? \"\" : _value$toFixed$split3;\n    if (!intPart) throw new Error(`Value '${value}' cannot be formatted as number.`);\n    return isNegative && (intPart = intPart.slice(1)), groupDigits && (intPart = function (digits) {\n      var groupSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n      var parts = [];\n      var remainder = digits;\n      for (; remainder.length > groupSize;) {\n        var groupPosition = remainder.length - groupSize;\n        parts.unshift(remainder.substring(groupPosition)), remainder = remainder.substring(0, groupPosition);\n      }\n      remainder && parts.unshift(remainder);\n      return parts;\n    }(intPart).join(numbers.groupingSeparator)), decimalPart && (decimalPart = numbers.decimalSeparator + decimalPart), (isNegative ? numbers.minusSign : \"\") + intPart + decimalPart;\n  }\n  function formatValue(value, type, config) {\n    if (void 0 === value) return \"\";\n    switch (type) {\n      case \"Decimal\":\n      case \"Integer\":\n      case \"Long\":\n        if (!(value instanceof _$$_REQUIRE(_dependencyMap[6], \"big.js\").Big)) throw new Error(`Value '${value}' cannot be formatted as a numeric value.`);\n        var numberConfig = config,\n          groupDigits = numberConfig == null ? void 0 : numberConfig.groupDigits,\n          decimalPrecision = numberConfig == null ? void 0 : numberConfig.decimalPrecision;\n        return formatNumber(value, groupDigits, decimalPrecision);\n      case \"DateTime\":\n        if (!(value instanceof Date)) throw new Error(`Value '${value}' cannot be formatted as Date.`);\n        return (0, _$$_REQUIRE(_dependencyMap[7], \"./DNuPbXEE.js\").f)(value, config);\n      case \"Boolean\":\n        return (0, _$$_REQUIRE(_dependencyMap[8], \"./oW-a68gO.js\").t)(\"mxui.common\", value.toString());\n      default:\n        return String(value);\n    }\n  }\n});","lineCount":71,"map":[[10,2,1,24,"_$$_REQUIRE"],[10,13,1,24],[10,14,1,24,"_dependencyMap"],[10,28,1,24],[11,2,1,89,"_$$_REQUIRE"],[11,13,1,89],[11,14,1,89,"_dependencyMap"],[11,28,1,89],[12,2,1,111,"_$$_REQUIRE"],[12,13,1,111],[12,14,1,111,"_dependencyMap"],[12,28,1,111],[13,2,1,209],[13,11,1,218,"parseNumber"],[13,22,1,229,"parseNumber"],[13,23,1,230,"text"],[13,27,1,234],[13,29,1,235,"decimalsCount"],[13,42,1,248],[13,44,1,249],[14,4,1,250],[14,8,1,250,"_getLocale"],[14,18,1,250],[14,21,1,273],[14,25,1,273,"getLocale"],[14,55,1,273],[14,56,1,273,"getLocale"],[14,74,1,282],[14,76,1,283],[14,77,1,284],[15,6,1,264,"numbers"],[15,13,1,271],[15,16,1,271,"_getLocale"],[15,26,1,271],[15,27,1,256,"numbers"],[15,34,1,263],[16,4,1,285],[16,8,1,288],[16,9,1,289],[16,19,1,298,"text"],[16,23,1,302],[16,25,1,303,"groupingSeparator"],[16,42,1,320],[16,44,1,321,"decimalSeparator"],[16,60,1,337],[16,62,1,338],[17,6,1,339],[17,10,1,345,"decimalPart"],[17,21,1,356],[17,24,1,357],[17,29,1,362,"decimalSeparator"],[17,45,1,378],[17,51,1,384],[18,6,1,385],[18,13,1,392,"Boolean"],[18,20,1,399],[18,21,1,400],[18,25,1,404,"RegExp"],[18,31,1,410],[18,32,1,411],[18,58,1,437,"groupingSeparator"],[18,75,1,454],[18,88,1,467,"decimalPart"],[18,99,1,478],[18,105,1,484,"decimalPart"],[18,116,1,495],[18,133,1,512],[18,134,1,513],[18,135,1,514,"exec"],[18,139,1,518],[18,140,1,519,"text"],[18,144,1,523],[18,145,1,524],[18,146,1,525],[19,4,1,525],[19,5,1,526],[19,6,1,527,"text"],[19,10,1,531],[19,12,1,532,"numbers"],[19,19,1,539],[19,20,1,540,"groupingSeparator"],[19,37,1,557],[19,39,1,558,"numbers"],[19,46,1,565],[19,47,1,566,"decimalSeparator"],[19,63,1,582],[19,64,1,583],[19,66,1,584],[20,4,1,591],[20,8,1,595,"value"],[20,13,1,600],[21,4,1,601],[21,8,1,604],[22,6,1,605,"value"],[22,11,1,610],[22,14,1,611],[22,19,1,615,"Big"],[22,49,1,615],[22,50,1,615,"Big"],[22,63,1,618],[22,65,1,619,"text"],[22,69,1,623],[22,70,1,624,"split"],[22,75,1,629],[22,76,1,630,"numbers"],[22,83,1,637],[22,84,1,638,"groupingSeparator"],[22,101,1,655],[22,102,1,656],[22,103,1,657,"join"],[22,107,1,661],[22,108,1,662],[22,110,1,664],[22,111,1,665],[22,112,1,666,"split"],[22,117,1,671],[22,118,1,672,"numbers"],[22,125,1,679],[22,126,1,680,"decimalSeparator"],[22,142,1,696],[22,143,1,697],[22,144,1,698,"join"],[22,148,1,702],[22,149,1,703],[22,152,1,706],[22,153,1,707],[22,154,1,708],[23,4,1,708],[23,5,1,709],[23,13,1,709,"_unused"],[23,20,1,709],[23,22,1,714],[24,6,1,715],[25,4,1,721],[26,4,1,722],[26,11,1,729],[26,15,1,733],[26,19,1,735,"decimalsCount"],[26,32,1,748],[26,36,1,750,"decimalsCount"],[26,49,1,763],[26,53,1,765],[26,54,1,766],[26,57,1,767,"value"],[26,62,1,772],[26,63,1,773,"round"],[26,68,1,778],[26,69,1,779,"decimalsCount"],[26,82,1,792],[26,83,1,793],[26,86,1,794,"value"],[26,91,1,799],[27,2,1,799],[28,2,1,800],[28,11,1,809,"formatNumber"],[28,23,1,821,"formatNumber"],[28,24,1,822,"value"],[28,29,1,827],[28,31,1,828,"groupDigits"],[28,42,1,839],[28,44,1,840,"decimalsCount"],[28,57,1,853],[28,59,1,854],[29,4,1,855],[29,8,1,855,"_getLocale2"],[29,19,1,855],[29,22,1,878],[29,26,1,878,"getLocale"],[29,56,1,878],[29,57,1,878,"getLocale"],[29,75,1,887],[29,77,1,888],[29,78,1,889],[30,6,1,869,"numbers"],[30,13,1,876],[30,16,1,876,"_getLocale2"],[30,27,1,876],[30,28,1,861,"numbers"],[30,35,1,868],[31,6,1,890,"isNegative"],[31,16,1,900],[31,19,1,901,"value"],[31,24,1,906],[31,25,1,907,"lt"],[31,27,1,909],[31,28,1,910],[31,29,1,911],[31,30,1,912],[32,6,1,913,"decimalPrecision"],[32,22,1,929],[32,25,1,930],[32,30,1,935],[32,31,1,936],[32,36,1,939,"decimalsCount"],[32,49,1,952],[32,53,1,954,"decimalsCount"],[32,66,1,967],[32,69,1,968],[32,70,1,969],[32,73,1,970],[32,78,1,975],[32,79,1,976],[32,82,1,977,"decimalsCount"],[32,95,1,990],[33,4,1,991],[33,8,1,991,"_value$toFixed$split"],[33,28,1,991],[33,31,1,1019,"value"],[33,36,1,1024],[33,37,1,1025,"toFixed"],[33,44,1,1032],[33,45,1,1033,"decimalPrecision"],[33,61,1,1049],[33,62,1,1050],[33,63,1,1051,"split"],[33,68,1,1056],[33,69,1,1057],[33,72,1,1060],[33,73,1,1061],[34,6,1,1061,"_value$toFixed$split2"],[34,27,1,1061],[34,34,1,1061,"_slicedToArray2"],[34,49,1,1061],[34,50,1,1061,"default"],[34,57,1,1061],[34,59,1,1061,"_value$toFixed$split"],[34,79,1,1061],[35,6,1,995,"intPart"],[35,13,1,1002],[35,16,1,1002,"_value$toFixed$split2"],[35,37,1,1002],[36,6,1,1002,"_value$toFixed$split3"],[36,27,1,1002],[36,30,1,1002,"_value$toFixed$split2"],[36,51,1,1002],[37,6,1,1003,"decimalPart"],[37,17,1,1014],[37,20,1,1014,"_value$toFixed$split3"],[37,41,1,1014],[37,55,1,1015],[37,57,1,1017],[37,60,1,1017,"_value$toFixed$split3"],[37,81,1,1017],[38,4,1,1062],[38,8,1,1065],[38,9,1,1066,"intPart"],[38,16,1,1073],[38,18,1,1074],[38,24,1,1080],[38,28,1,1084,"Error"],[38,33,1,1089],[38,34,1,1090],[38,44,1,1100,"value"],[38,49,1,1105],[38,83,1,1139],[38,84,1,1140],[39,4,1,1141],[39,11,1,1148,"isNegative"],[39,21,1,1158],[39,26,1,1161,"intPart"],[39,33,1,1168],[39,36,1,1169,"intPart"],[39,43,1,1176],[39,44,1,1177,"slice"],[39,49,1,1182],[39,50,1,1183],[39,51,1,1184],[39,52,1,1185],[39,53,1,1186],[39,55,1,1187,"groupDigits"],[39,66,1,1198],[39,71,1,1201,"intPart"],[39,78,1,1208],[39,81,1,1209],[39,91,1,1218,"digits"],[39,97,1,1224],[39,99,1,1237],[40,6,1,1237],[40,10,1,1225,"groupSize"],[40,19,1,1234],[40,22,1,1234,"arguments"],[40,31,1,1234],[40,32,1,1234,"length"],[40,38,1,1234],[40,46,1,1234,"arguments"],[40,55,1,1234],[40,63,1,1234,"undefined"],[40,72,1,1234],[40,75,1,1234,"arguments"],[40,84,1,1234],[40,90,1,1235],[40,91,1,1236],[41,6,1,1238],[41,10,1,1244,"parts"],[41,15,1,1249],[41,18,1,1250],[41,20,1,1252],[42,6,1,1253],[42,10,1,1257,"remainder"],[42,19,1,1266],[42,22,1,1267,"digits"],[42,28,1,1273],[43,6,1,1274],[43,13,1,1279,"remainder"],[43,22,1,1288],[43,23,1,1289,"length"],[43,29,1,1295],[43,32,1,1296,"groupSize"],[43,41,1,1305],[43,44,1,1307],[44,8,1,1308],[44,12,1,1314,"groupPosition"],[44,25,1,1327],[44,28,1,1328,"remainder"],[44,37,1,1337],[44,38,1,1338,"length"],[44,44,1,1344],[44,47,1,1345,"groupSize"],[44,56,1,1354],[45,8,1,1355,"parts"],[45,13,1,1360],[45,14,1,1361,"unshift"],[45,21,1,1368],[45,22,1,1369,"remainder"],[45,31,1,1378],[45,32,1,1379,"substring"],[45,41,1,1388],[45,42,1,1389,"groupPosition"],[45,55,1,1402],[45,56,1,1403],[45,57,1,1404],[45,59,1,1405,"remainder"],[45,68,1,1414],[45,71,1,1415,"remainder"],[45,80,1,1424],[45,81,1,1425,"substring"],[45,90,1,1434],[45,91,1,1435],[45,92,1,1436],[45,94,1,1437,"groupPosition"],[45,107,1,1450],[45,108,1,1451],[46,6,1,1451],[47,6,1,1452,"remainder"],[47,15,1,1461],[47,19,1,1463,"parts"],[47,24,1,1468],[47,25,1,1469,"unshift"],[47,32,1,1476],[47,33,1,1477,"remainder"],[47,42,1,1486],[47,43,1,1487],[48,6,1,1488],[48,13,1,1495,"parts"],[48,18,1,1500],[49,4,1,1500],[49,5,1,1501],[49,6,1,1502,"intPart"],[49,13,1,1509],[49,14,1,1510],[49,15,1,1511,"join"],[49,19,1,1515],[49,20,1,1516,"numbers"],[49,27,1,1523],[49,28,1,1524,"groupingSeparator"],[49,45,1,1541],[49,46,1,1542],[49,47,1,1543],[49,49,1,1544,"decimalPart"],[49,60,1,1555],[49,65,1,1558,"decimalPart"],[49,76,1,1569],[49,79,1,1570,"numbers"],[49,86,1,1577],[49,87,1,1578,"decimalSeparator"],[49,103,1,1594],[49,106,1,1595,"decimalPart"],[49,117,1,1606],[49,118,1,1607],[49,120,1,1608],[49,121,1,1609,"isNegative"],[49,131,1,1619],[49,134,1,1620,"numbers"],[49,141,1,1627],[49,142,1,1628,"minusSign"],[49,151,1,1637],[49,154,1,1638],[49,156,1,1640],[49,160,1,1642,"intPart"],[49,167,1,1649],[49,170,1,1650,"decimalPart"],[49,181,1,1661],[50,2,1,1661],[51,2,1,1662],[51,11,1,1671,"formatValue"],[51,22,1,1682,"formatValue"],[51,23,1,1683,"value"],[51,28,1,1688],[51,30,1,1689,"type"],[51,34,1,1693],[51,36,1,1694,"config"],[51,42,1,1700],[51,44,1,1701],[52,4,1,1702],[52,8,1,1705],[52,13,1,1710],[52,14,1,1711],[52,19,1,1714,"value"],[52,24,1,1719],[52,26,1,1720],[52,33,1,1726],[52,35,1,1728],[53,4,1,1729],[53,12,1,1736,"type"],[53,16,1,1740],[54,6,1,1742],[54,11,1,1746],[54,20,1,1755],[55,6,1,1756],[55,11,1,1760],[55,20,1,1769],[56,6,1,1770],[56,11,1,1774],[56,17,1,1780],[57,8,1,1781],[57,12,1,1784],[57,14,1,1786,"value"],[57,19,1,1791],[57,31,1,1803,"Big"],[57,61,1,1803],[57,62,1,1803,"Big"],[57,75,1,1806],[57,76,1,1807],[57,78,1,1808],[57,84,1,1814],[57,88,1,1818,"Error"],[57,93,1,1823],[57,94,1,1824],[57,104,1,1834,"value"],[57,109,1,1839],[57,152,1,1882],[57,153,1,1883],[58,8,1,1884],[58,12,1,1890,"numberConfig"],[58,24,1,1902],[58,27,1,1903,"config"],[58,33,1,1909],[59,10,1,1910,"groupDigits"],[59,21,1,1921],[59,24,1,1922,"numberConfig"],[59,36,1,1934],[59,56,1,1922,"numberConfig"],[59,68,1,1934],[59,69,1,1936,"groupDigits"],[59,80,1,1947],[60,10,1,1948,"decimalPrecision"],[60,26,1,1964],[60,29,1,1965,"numberConfig"],[60,41,1,1977],[60,61,1,1965,"numberConfig"],[60,73,1,1977],[60,74,1,1979,"decimalPrecision"],[60,90,1,1995],[61,8,1,1996],[61,15,1,2003,"formatNumber"],[61,27,1,2015],[61,28,1,2016,"value"],[61,33,1,2021],[61,35,1,2022,"groupDigits"],[61,46,1,2033],[61,48,1,2034,"decimalPrecision"],[61,64,1,2050],[61,65,1,2051],[62,6,1,2052],[62,11,1,2056],[62,21,1,2066],[63,8,1,2067],[63,12,1,2070],[63,14,1,2072,"value"],[63,19,1,2077],[63,31,1,2089,"Date"],[63,35,1,2093],[63,36,1,2094],[63,38,1,2095],[63,44,1,2101],[63,48,1,2105,"Error"],[63,53,1,2110],[63,54,1,2111],[63,64,1,2121,"value"],[63,69,1,2126],[63,101,1,2158],[63,102,1,2159],[64,8,1,2160],[64,15,1,2167],[64,19,1,2167,"formatDate"],[64,49,1,2167],[64,50,1,2167,"formatDate"],[64,68,1,2177],[64,70,1,2178,"value"],[64,75,1,2183],[64,77,1,2184,"config"],[64,83,1,2190],[64,84,1,2191],[65,6,1,2192],[65,11,1,2196],[65,20,1,2205],[66,8,1,2206],[66,15,1,2213],[66,19,1,2213,"translate"],[66,49,1,2213],[66,50,1,2213,"translate"],[66,68,1,2222],[66,70,1,2223],[66,83,1,2236],[66,85,1,2237,"value"],[66,90,1,2242],[66,91,1,2243,"toString"],[66,99,1,2251],[66,100,1,2252],[66,101,1,2253],[66,102,1,2254],[67,6,1,2255],[68,8,1,2263],[68,15,1,2270,"String"],[68,21,1,2276],[68,22,1,2277,"value"],[68,27,1,2282],[68,28,1,2283],[69,4,1,2283],[70,2,1,2284],[71,0,1,2285],[71,3]],"functionMap":{"names":["<global>","parseNumber","<anonymous>","formatNumber","formatValue"],"mappings":"AAA,iNC,gFC,6OD,kRE,yZD,oSC,iKC,+mBJ"}},"type":"js/module"}]}