{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":304,"column":0,"index":8450}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":304,"column":0,"index":8450}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":304,"column":0,"index":8450}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":15,"column":0,"index":448},"end":{"line":15,"column":34,"index":482}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}},{"name":"./VirtualizeUtils","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":0,"index":377},"end":{"line":14,"column":70,"index":447}}],"key":"Wl6GyPbjTp2tYGf7EdH/3upwFzg="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  // TODO: `inverted` can be incorporated here if it is moved to an order\n  // based implementation instead of transform.\n  /**\n   * Subset of VirtualizedList props needed to calculate cell metrics\n   */\n  /**\n   * Provides an interface to query information about the metrics of a list and its cells.\n   */\n  var ListMetricsAggregator = exports.default = /*#__PURE__*/function () {\n    function ListMetricsAggregator() {\n      (0, _classCallCheck2.default)(this, ListMetricsAggregator);\n      this._averageCellLength = 0;\n      this._cellMetrics = new Map();\n      this._highestMeasuredCellIndex = 0;\n      this._measuredCellsLength = 0;\n      this._measuredCellsCount = 0;\n      this._orientation = {\n        horizontal: false,\n        rtl: false\n      };\n    }\n    return (0, _createClass2.default)(ListMetricsAggregator, [{\n      key: \"notifyCellLayout\",\n      value:\n      /**\n       * Notify the ListMetricsAggregator that a cell has been laid out.\n       *\n       * @returns whether the cell layout has changed since last notification\n       */\n      function notifyCellLayout(_ref) {\n        var cellIndex = _ref.cellIndex,\n          cellKey = _ref.cellKey,\n          orientation = _ref.orientation,\n          layout = _ref.layout;\n        this._invalidateIfOrientationChanged(orientation);\n        var next = {\n          index: cellIndex,\n          length: this._selectLength(layout),\n          isMounted: true,\n          offset: this.flowRelativeOffset(layout)\n        };\n        var curr = this._cellMetrics.get(cellKey);\n        if (!curr || next.offset !== curr.offset || next.length !== curr.length) {\n          if (curr) {\n            var dLength = next.length - curr.length;\n            this._measuredCellsLength += dLength;\n          } else {\n            this._measuredCellsLength += next.length;\n            this._measuredCellsCount += 1;\n          }\n          this._averageCellLength = this._measuredCellsLength / this._measuredCellsCount;\n          this._cellMetrics.set(cellKey, next);\n          this._highestMeasuredCellIndex = Math.max(this._highestMeasuredCellIndex, cellIndex);\n          return true;\n        } else {\n          curr.isMounted = true;\n          return false;\n        }\n      }\n\n      /**\n       * Notify ListMetricsAggregator that a cell has been unmounted.\n       */\n    }, {\n      key: \"notifyCellUnmounted\",\n      value: function notifyCellUnmounted(cellKey) {\n        var curr = this._cellMetrics.get(cellKey);\n        if (curr) {\n          curr.isMounted = false;\n        }\n      }\n\n      /**\n       * Notify ListMetricsAggregator that the lists content container has been laid out.\n       */\n    }, {\n      key: \"notifyListContentLayout\",\n      value: function notifyListContentLayout(_ref2) {\n        var orientation = _ref2.orientation,\n          layout = _ref2.layout;\n        this._invalidateIfOrientationChanged(orientation);\n        this._contentLength = this._selectLength(layout);\n      }\n\n      /**\n       * Return the average length of the cells which have been measured\n       */\n    }, {\n      key: \"getAverageCellLength\",\n      value: function getAverageCellLength() {\n        return this._averageCellLength;\n      }\n\n      /**\n       * Return the highest measured cell index (or 0 if nothing has been measured\n       * yet)\n       */\n    }, {\n      key: \"getHighestMeasuredCellIndex\",\n      value: function getHighestMeasuredCellIndex() {\n        return this._highestMeasuredCellIndex;\n      }\n\n      /**\n       * Returns the exact metrics of a cell if it has already been laid out,\n       * otherwise an estimate based on the average length of previously measured\n       * cells\n       */\n    }, {\n      key: \"getCellMetricsApprox\",\n      value: function getCellMetricsApprox(index, props) {\n        var frame = this.getCellMetrics(index, props);\n        if (frame && frame.index === index) {\n          // check for invalid frames due to row re-ordering\n          return frame;\n        } else {\n          var data = props.data,\n            getItemCount = props.getItemCount;\n          (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get frame for out of range index ' + index);\n          return {\n            length: this._averageCellLength,\n            offset: this._averageCellLength * index,\n            index: index,\n            isMounted: false\n          };\n        }\n      }\n\n      /**\n       * Returns the exact metrics of a cell if it has already been laid out\n       */\n    }, {\n      key: \"getCellMetrics\",\n      value: function getCellMetrics(index, props) {\n        var _props$keyExtractor;\n        var data = props.data,\n          getItem = props.getItem,\n          getItemCount = props.getItemCount,\n          getItemLayout = props.getItemLayout;\n        (0, _invariant.default)(index >= 0 && index < getItemCount(data), 'Tried to get metrics for out of range cell index ' + index);\n        var keyExtractor = (_props$keyExtractor = props.keyExtractor) != null ? _props$keyExtractor : _$$_REQUIRE(_dependencyMap[4], \"./VirtualizeUtils\").keyExtractor;\n        var frame = this._cellMetrics.get(keyExtractor(getItem(data, index), index));\n        if (frame && frame.index === index) {\n          return frame;\n        }\n        if (getItemLayout) {\n          var _getItemLayout = getItemLayout(data, index),\n            length = _getItemLayout.length,\n            offset = _getItemLayout.offset;\n          // TODO: `isMounted` is used for both \"is exact layout\" and \"has been\n          // unmounted\". Should be refactored.\n          return {\n            index: index,\n            length: length,\n            offset: offset,\n            isMounted: true\n          };\n        }\n        return null;\n      }\n\n      /**\n       * Gets an approximate offset to an item at a given index. Supports\n       * fractional indices.\n       */\n    }, {\n      key: \"getCellOffsetApprox\",\n      value: function getCellOffsetApprox(index, props) {\n        if (Number.isInteger(index)) {\n          return this.getCellMetricsApprox(index, props).offset;\n        } else {\n          var frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);\n          var remainder = index - Math.floor(index);\n          return frameMetrics.offset + remainder * frameMetrics.length;\n        }\n      }\n\n      /**\n       * Returns the length of all ScrollView content along the scrolling axis.\n       */\n    }, {\n      key: \"getContentLength\",\n      value: function getContentLength() {\n        var _this$_contentLength;\n        return (_this$_contentLength = this._contentLength) != null ? _this$_contentLength : 0;\n      }\n\n      /**\n       * Whether a content length has been observed\n       */\n    }, {\n      key: \"hasContentLength\",\n      value: function hasContentLength() {\n        return this._contentLength != null;\n      }\n\n      /**\n       * Finds the flow-relative offset (e.g. starting from the left in LTR, but\n       * right in RTL) from a layout box.\n       */\n    }, {\n      key: \"flowRelativeOffset\",\n      value: function flowRelativeOffset(layout, referenceContentLength) {\n        var _this$_orientation = this._orientation,\n          horizontal = _this$_orientation.horizontal,\n          rtl = _this$_orientation.rtl;\n        if (horizontal && rtl) {\n          var contentLength = referenceContentLength != null ? referenceContentLength : this._contentLength;\n          (0, _invariant.default)(contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');\n          return contentLength - (this._selectOffset(layout) + this._selectLength(layout));\n        } else {\n          return this._selectOffset(layout);\n        }\n      }\n\n      /**\n       * Converts a flow-relative offset to a cartesian offset\n       */\n    }, {\n      key: \"cartesianOffset\",\n      value: function cartesianOffset(flowRelativeOffset) {\n        var _this$_orientation2 = this._orientation,\n          horizontal = _this$_orientation2.horizontal,\n          rtl = _this$_orientation2.rtl;\n        if (horizontal && rtl) {\n          (0, _invariant.default)(this._contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');\n          return this._contentLength - flowRelativeOffset;\n        } else {\n          return flowRelativeOffset;\n        }\n      }\n    }, {\n      key: \"_invalidateIfOrientationChanged\",\n      value: function _invalidateIfOrientationChanged(orientation) {\n        if (orientation.rtl !== this._orientation.rtl) {\n          this._cellMetrics.clear();\n        }\n        if (orientation.horizontal !== this._orientation.horizontal) {\n          this._averageCellLength = 0;\n          this._highestMeasuredCellIndex = 0;\n          this._measuredCellsLength = 0;\n          this._measuredCellsCount = 0;\n        }\n        this._orientation = orientation;\n      }\n    }, {\n      key: \"_selectLength\",\n      value: function _selectLength(_ref3) {\n        var width = _ref3.width,\n          height = _ref3.height;\n        return this._orientation.horizontal ? width : height;\n      }\n    }, {\n      key: \"_selectOffset\",\n      value: function _selectOffset(_ref4) {\n        var x = _ref4.x,\n          y = _ref4.y;\n        return this._orientation.horizontal ? x : y;\n      }\n    }]);\n  }();\n});","lineCount":280,"map":[[9,2,15,0],[9,6,15,0,"_invariant"],[9,16,15,0],[9,19,15,0,"_interopRequireDefault"],[9,41,15,0],[9,42,15,0,"_$$_REQUIRE"],[9,53,15,0],[9,54,15,0,"_dependencyMap"],[9,68,15,0],[10,2,1,0],[11,0,2,0],[12,0,3,0],[13,0,4,0],[14,0,5,0],[15,0,6,0],[16,0,7,0],[17,0,8,0],[18,0,9,0],[19,2,37,0],[20,2,38,0],[21,2,44,0],[22,0,45,0],[23,0,46,0],[24,2,56,0],[25,0,57,0],[26,0,58,0],[27,2,56,0],[27,6,59,21,"ListMetricsAggregator"],[27,27,59,42],[27,30,59,42,"exports"],[27,37,59,42],[27,38,59,42,"default"],[27,45,59,42],[28,4,59,42],[28,13,59,42,"ListMetricsAggregator"],[28,35,59,42],[29,6,59,42],[29,10,59,42,"_classCallCheck2"],[29,26,59,42],[29,27,59,42,"default"],[29,34,59,42],[29,42,59,42,"ListMetricsAggregator"],[29,63,59,42],[30,6,59,42],[30,11,60,2,"_averageCellLength"],[30,29,60,20],[30,32,60,23],[30,33,60,24],[31,6,60,24],[31,11,61,2,"_cellMetrics"],[31,23,61,14],[31,26,61,43],[31,30,61,47,"Map"],[31,33,61,50],[31,34,61,51],[31,35,61,52],[32,6,61,52],[32,11,63,2,"_highestMeasuredCellIndex"],[32,36,63,27],[32,39,63,30],[32,40,63,31],[33,6,63,31],[33,11,64,2,"_measuredCellsLength"],[33,31,64,22],[33,34,64,25],[33,35,64,26],[34,6,64,26],[34,11,65,2,"_measuredCellsCount"],[34,30,65,21],[34,33,65,24],[34,34,65,25],[35,6,65,25],[35,11,66,2,"_orientation"],[35,23,66,14],[35,26,66,34],[36,8,67,4,"horizontal"],[36,18,67,14],[36,20,67,16],[36,25,67,21],[37,8,68,4,"rtl"],[37,11,68,7],[37,13,68,9],[38,6,69,2],[38,7,69,3],[39,4,69,3],[40,4,69,3],[40,15,69,3,"_createClass2"],[40,28,69,3],[40,29,69,3,"default"],[40,36,69,3],[40,38,69,3,"ListMetricsAggregator"],[40,59,69,3],[41,6,69,3,"key"],[41,9,69,3],[42,6,69,3,"value"],[42,11,69,3],[43,6,71,2],[44,0,72,0],[45,0,73,0],[46,0,74,0],[47,0,75,0],[48,6,76,2],[48,15,76,2,"notifyCellLayout"],[48,31,76,18,"notifyCellLayout"],[48,32,76,18,"_ref"],[48,36,76,18],[48,38,86,14],[49,8,86,14],[49,12,77,4,"cellIndex"],[49,21,77,13],[49,24,77,13,"_ref"],[49,28,77,13],[49,29,77,4,"cellIndex"],[49,38,77,13],[50,10,78,4,"cellKey"],[50,17,78,11],[50,20,78,11,"_ref"],[50,24,78,11],[50,25,78,4,"cellKey"],[50,32,78,11],[51,10,79,4,"orientation"],[51,21,79,15],[51,24,79,15,"_ref"],[51,28,79,15],[51,29,79,4,"orientation"],[51,40,79,15],[52,10,80,4,"layout"],[52,16,80,10],[52,19,80,10,"_ref"],[52,23,80,10],[52,24,80,4,"layout"],[52,30,80,10],[53,8,87,4],[53,12,87,8],[53,13,87,9,"_invalidateIfOrientationChanged"],[53,44,87,40],[53,45,87,41,"orientation"],[53,56,87,52],[53,57,87,53],[54,8,89,4],[54,12,89,10,"next"],[54,16,89,27],[54,19,89,30],[55,10,90,6,"index"],[55,15,90,11],[55,17,90,13,"cellIndex"],[55,26,90,22],[56,10,91,6,"length"],[56,16,91,12],[56,18,91,14],[56,22,91,18],[56,23,91,19,"_selectLength"],[56,36,91,32],[56,37,91,33,"layout"],[56,43,91,39],[56,44,91,40],[57,10,92,6,"isMounted"],[57,19,92,15],[57,21,92,17],[57,25,92,21],[58,10,93,6,"offset"],[58,16,93,12],[58,18,93,14],[58,22,93,18],[58,23,93,19,"flowRelativeOffset"],[58,41,93,37],[58,42,93,38,"layout"],[58,48,93,44],[59,8,94,4],[59,9,94,5],[60,8,95,4],[60,12,95,10,"curr"],[60,16,95,14],[60,19,95,17],[60,23,95,21],[60,24,95,22,"_cellMetrics"],[60,36,95,34],[60,37,95,35,"get"],[60,40,95,38],[60,41,95,39,"cellKey"],[60,48,95,46],[60,49,95,47],[61,8,97,4],[61,12,97,8],[61,13,97,9,"curr"],[61,17,97,13],[61,21,97,17,"next"],[61,25,97,21],[61,26,97,22,"offset"],[61,32,97,28],[61,37,97,33,"curr"],[61,41,97,37],[61,42,97,38,"offset"],[61,48,97,44],[61,52,97,48,"next"],[61,56,97,52],[61,57,97,53,"length"],[61,63,97,59],[61,68,97,64,"curr"],[61,72,97,68],[61,73,97,69,"length"],[61,79,97,75],[61,81,97,77],[62,10,98,6],[62,14,98,10,"curr"],[62,18,98,14],[62,20,98,16],[63,12,99,8],[63,16,99,14,"dLength"],[63,23,99,21],[63,26,99,24,"next"],[63,30,99,28],[63,31,99,29,"length"],[63,37,99,35],[63,40,99,38,"curr"],[63,44,99,42],[63,45,99,43,"length"],[63,51,99,49],[64,12,100,8],[64,16,100,12],[64,17,100,13,"_measuredCellsLength"],[64,37,100,33],[64,41,100,37,"dLength"],[64,48,100,44],[65,10,101,6],[65,11,101,7],[65,17,101,13],[66,12,102,8],[66,16,102,12],[66,17,102,13,"_measuredCellsLength"],[66,37,102,33],[66,41,102,37,"next"],[66,45,102,41],[66,46,102,42,"length"],[66,52,102,48],[67,12,103,8],[67,16,103,12],[67,17,103,13,"_measuredCellsCount"],[67,36,103,32],[67,40,103,36],[67,41,103,37],[68,10,104,6],[69,10,106,6],[69,14,106,10],[69,15,106,11,"_averageCellLength"],[69,33,106,29],[69,36,107,8],[69,40,107,12],[69,41,107,13,"_measuredCellsLength"],[69,61,107,33],[69,64,107,36],[69,68,107,40],[69,69,107,41,"_measuredCellsCount"],[69,88,107,60],[70,10,108,6],[70,14,108,10],[70,15,108,11,"_cellMetrics"],[70,27,108,23],[70,28,108,24,"set"],[70,31,108,27],[70,32,108,28,"cellKey"],[70,39,108,35],[70,41,108,37,"next"],[70,45,108,41],[70,46,108,42],[71,10,109,6],[71,14,109,10],[71,15,109,11,"_highestMeasuredCellIndex"],[71,40,109,36],[71,43,109,39,"Math"],[71,47,109,43],[71,48,109,44,"max"],[71,51,109,47],[71,52,110,8],[71,56,110,12],[71,57,110,13,"_highestMeasuredCellIndex"],[71,82,110,38],[71,84,111,8,"cellIndex"],[71,93,112,6],[71,94,112,7],[72,10,113,6],[72,17,113,13],[72,21,113,17],[73,8,114,4],[73,9,114,5],[73,15,114,11],[74,10,115,6,"curr"],[74,14,115,10],[74,15,115,11,"isMounted"],[74,24,115,20],[74,27,115,23],[74,31,115,27],[75,10,116,6],[75,17,116,13],[75,22,116,18],[76,8,117,4],[77,6,118,2],[79,6,120,2],[80,0,121,0],[81,0,122,0],[82,4,120,2],[83,6,120,2,"key"],[83,9,120,2],[84,6,120,2,"value"],[84,11,120,2],[84,13,123,2],[84,22,123,2,"notifyCellUnmounted"],[84,41,123,21,"notifyCellUnmounted"],[84,42,123,22,"cellKey"],[84,49,123,37],[84,51,123,45],[85,8,124,4],[85,12,124,10,"curr"],[85,16,124,14],[85,19,124,17],[85,23,124,21],[85,24,124,22,"_cellMetrics"],[85,36,124,34],[85,37,124,35,"get"],[85,40,124,38],[85,41,124,39,"cellKey"],[85,48,124,46],[85,49,124,47],[86,8,125,4],[86,12,125,8,"curr"],[86,16,125,12],[86,18,125,14],[87,10,126,6,"curr"],[87,14,126,10],[87,15,126,11,"isMounted"],[87,24,126,20],[87,27,126,23],[87,32,126,28],[88,8,127,4],[89,6,128,2],[91,6,130,2],[92,0,131,0],[93,0,132,0],[94,4,130,2],[95,6,130,2,"key"],[95,9,130,2],[96,6,130,2,"value"],[96,11,130,2],[96,13,133,2],[96,22,133,2,"notifyListContentLayout"],[96,45,133,25,"notifyListContentLayout"],[96,46,133,25,"_ref2"],[96,51,133,25],[96,53,139,11],[97,8,139,11],[97,12,134,4,"orientation"],[97,23,134,15],[97,26,134,15,"_ref2"],[97,31,134,15],[97,32,134,4,"orientation"],[97,43,134,15],[98,10,135,4,"layout"],[98,16,135,10],[98,19,135,10,"_ref2"],[98,24,135,10],[98,25,135,4,"layout"],[98,31,135,10],[99,8,140,4],[99,12,140,8],[99,13,140,9,"_invalidateIfOrientationChanged"],[99,44,140,40],[99,45,140,41,"orientation"],[99,56,140,52],[99,57,140,53],[100,8,141,4],[100,12,141,8],[100,13,141,9,"_contentLength"],[100,27,141,23],[100,30,141,26],[100,34,141,30],[100,35,141,31,"_selectLength"],[100,48,141,44],[100,49,141,45,"layout"],[100,55,141,51],[100,56,141,52],[101,6,142,2],[103,6,144,2],[104,0,145,0],[105,0,146,0],[106,4,144,2],[107,6,144,2,"key"],[107,9,144,2],[108,6,144,2,"value"],[108,11,144,2],[108,13,147,2],[108,22,147,2,"getAverageCellLength"],[108,42,147,22,"getAverageCellLength"],[108,43,147,22],[108,45,147,33],[109,8,148,4],[109,15,148,11],[109,19,148,15],[109,20,148,16,"_averageCellLength"],[109,38,148,34],[110,6,149,2],[112,6,151,2],[113,0,152,0],[114,0,153,0],[115,0,154,0],[116,4,151,2],[117,6,151,2,"key"],[117,9,151,2],[118,6,151,2,"value"],[118,11,151,2],[118,13,155,2],[118,22,155,2,"getHighestMeasuredCellIndex"],[118,49,155,29,"getHighestMeasuredCellIndex"],[118,50,155,29],[118,52,155,40],[119,8,156,4],[119,15,156,11],[119,19,156,15],[119,20,156,16,"_highestMeasuredCellIndex"],[119,45,156,41],[120,6,157,2],[122,6,159,2],[123,0,160,0],[124,0,161,0],[125,0,162,0],[126,0,163,0],[127,4,159,2],[128,6,159,2,"key"],[128,9,159,2],[129,6,159,2,"value"],[129,11,159,2],[129,13,164,2],[129,22,164,2,"getCellMetricsApprox"],[129,42,164,22,"getCellMetricsApprox"],[129,43,164,23,"index"],[129,48,164,36],[129,50,164,38,"props"],[129,55,164,60],[129,57,164,75],[130,8,165,4],[130,12,165,10,"frame"],[130,17,165,15],[130,20,165,18],[130,24,165,22],[130,25,165,23,"getCellMetrics"],[130,39,165,37],[130,40,165,38,"index"],[130,45,165,43],[130,47,165,45,"props"],[130,52,165,50],[130,53,165,51],[131,8,166,4],[131,12,166,8,"frame"],[131,17,166,13],[131,21,166,17,"frame"],[131,26,166,22],[131,27,166,23,"index"],[131,32,166,28],[131,37,166,33,"index"],[131,42,166,38],[131,44,166,40],[132,10,167,6],[133,10,168,6],[133,17,168,13,"frame"],[133,22,168,18],[134,8,169,4],[134,9,169,5],[134,15,169,11],[135,10,170,6],[135,14,170,13,"data"],[135,18,170,17],[135,21,170,35,"props"],[135,26,170,40],[135,27,170,13,"data"],[135,31,170,17],[136,12,170,19,"getItemCount"],[136,24,170,31],[136,27,170,35,"props"],[136,32,170,40],[136,33,170,19,"getItemCount"],[136,45,170,31],[137,10,171,6],[137,14,171,6,"invariant"],[137,32,171,15],[137,34,172,8,"index"],[137,39,172,13],[137,43,172,17],[137,44,172,18],[137,48,172,22,"index"],[137,53,172,27],[137,56,172,30,"getItemCount"],[137,68,172,42],[137,69,172,43,"data"],[137,73,172,47],[137,74,172,48],[137,76,173,8],[137,120,173,52],[137,123,173,55,"index"],[137,128,174,6],[137,129,174,7],[138,10,175,6],[138,17,175,13],[139,12,176,8,"length"],[139,18,176,14],[139,20,176,16],[139,24,176,20],[139,25,176,21,"_averageCellLength"],[139,43,176,39],[140,12,177,8,"offset"],[140,18,177,14],[140,20,177,16],[140,24,177,20],[140,25,177,21,"_averageCellLength"],[140,43,177,39],[140,46,177,42,"index"],[140,51,177,47],[141,12,178,8,"index"],[141,17,178,13],[141,19,178,8,"index"],[141,24,178,13],[142,12,179,8,"isMounted"],[142,21,179,17],[142,23,179,19],[143,10,180,6],[143,11,180,7],[144,8,181,4],[145,6,182,2],[147,6,184,2],[148,0,185,0],[149,0,186,0],[150,4,184,2],[151,6,184,2,"key"],[151,9,184,2],[152,6,184,2,"value"],[152,11,184,2],[152,13,187,2],[152,22,187,2,"getCellMetrics"],[152,36,187,16,"getCellMetrics"],[152,37,187,17,"index"],[152,42,187,30],[152,44,187,32,"props"],[152,49,187,54],[152,51,187,70],[153,8,187,70],[153,12,187,70,"_props$keyExtractor"],[153,31,187,70],[154,8,188,4],[154,12,188,11,"data"],[154,16,188,15],[154,19,188,57,"props"],[154,24,188,62],[154,25,188,11,"data"],[154,29,188,15],[155,10,188,17,"getItem"],[155,17,188,24],[155,20,188,57,"props"],[155,25,188,62],[155,26,188,17,"getItem"],[155,33,188,24],[156,10,188,26,"getItemCount"],[156,22,188,38],[156,25,188,57,"props"],[156,30,188,62],[156,31,188,26,"getItemCount"],[156,43,188,38],[157,10,188,40,"getItemLayout"],[157,23,188,53],[157,26,188,57,"props"],[157,31,188,62],[157,32,188,40,"getItemLayout"],[157,45,188,53],[158,8,189,4],[158,12,189,4,"invariant"],[158,30,189,13],[158,32,190,6,"index"],[158,37,190,11],[158,41,190,15],[158,42,190,16],[158,46,190,20,"index"],[158,51,190,25],[158,54,190,28,"getItemCount"],[158,66,190,40],[158,67,190,41,"data"],[158,71,190,45],[158,72,190,46],[158,74,191,6],[158,125,191,57],[158,128,191,60,"index"],[158,133,192,4],[158,134,192,5],[159,8,193,4],[159,12,193,10,"keyExtractor"],[159,24,193,22],[159,28,193,22,"_props$keyExtractor"],[159,47,193,22],[159,50,193,25,"props"],[159,55,193,30],[159,56,193,31,"keyExtractor"],[159,68,193,43],[159,80,193,43,"_props$keyExtractor"],[159,99,193,43],[159,102,193,47,"defaultKeyExtractor"],[159,132,193,47],[159,133,193,47,"defaultKeyExtractor"],[159,166,193,66],[160,8,194,4],[160,12,194,10,"frame"],[160,17,194,15],[160,20,194,18],[160,24,194,22],[160,25,194,23,"_cellMetrics"],[160,37,194,35],[160,38,194,36,"get"],[160,41,194,39],[160,42,195,6,"keyExtractor"],[160,54,195,18],[160,55,195,19,"getItem"],[160,62,195,26],[160,63,195,27,"data"],[160,67,195,31],[160,69,195,33,"index"],[160,74,195,38],[160,75,195,39],[160,77,195,41,"index"],[160,82,195,46],[160,83,196,4],[160,84,196,5],[161,8,197,4],[161,12,197,8,"frame"],[161,17,197,13],[161,21,197,17,"frame"],[161,26,197,22],[161,27,197,23,"index"],[161,32,197,28],[161,37,197,33,"index"],[161,42,197,38],[161,44,197,40],[162,10,198,6],[162,17,198,13,"frame"],[162,22,198,18],[163,8,199,4],[164,8,201,4],[164,12,201,8,"getItemLayout"],[164,25,201,21],[164,27,201,23],[165,10,202,6],[165,14,202,6,"_getItemLayout"],[165,28,202,6],[165,31,202,31,"getItemLayout"],[165,44,202,44],[165,45,202,45,"data"],[165,49,202,49],[165,51,202,51,"index"],[165,56,202,56],[165,57,202,57],[166,12,202,13,"length"],[166,18,202,19],[166,21,202,19,"_getItemLayout"],[166,35,202,19],[166,36,202,13,"length"],[166,42,202,19],[167,12,202,21,"offset"],[167,18,202,27],[167,21,202,27,"_getItemLayout"],[167,35,202,27],[167,36,202,21,"offset"],[167,42,202,27],[168,10,203,6],[169,10,204,6],[170,10,205,6],[170,17,205,13],[171,12,205,14,"index"],[171,17,205,19],[171,19,205,14,"index"],[171,24,205,19],[172,12,205,21,"length"],[172,18,205,27],[172,20,205,21,"length"],[172,26,205,27],[173,12,205,29,"offset"],[173,18,205,35],[173,20,205,29,"offset"],[173,26,205,35],[174,12,205,37,"isMounted"],[174,21,205,46],[174,23,205,48],[175,10,205,52],[175,11,205,53],[176,8,206,4],[177,8,208,4],[177,15,208,11],[177,19,208,15],[178,6,209,2],[180,6,211,2],[181,0,212,0],[182,0,213,0],[183,0,214,0],[184,4,211,2],[185,6,211,2,"key"],[185,9,211,2],[186,6,211,2,"value"],[186,11,211,2],[186,13,215,2],[186,22,215,2,"getCellOffsetApprox"],[186,41,215,21,"getCellOffsetApprox"],[186,42,215,22,"index"],[186,47,215,35],[186,49,215,37,"props"],[186,54,215,59],[186,56,215,69],[187,8,216,4],[187,12,216,8,"Number"],[187,18,216,14],[187,19,216,15,"isInteger"],[187,28,216,24],[187,29,216,25,"index"],[187,34,216,30],[187,35,216,31],[187,37,216,33],[188,10,217,6],[188,17,217,13],[188,21,217,17],[188,22,217,18,"getCellMetricsApprox"],[188,42,217,38],[188,43,217,39,"index"],[188,48,217,44],[188,50,217,46,"props"],[188,55,217,51],[188,56,217,52],[188,57,217,53,"offset"],[188,63,217,59],[189,8,218,4],[189,9,218,5],[189,15,218,11],[190,10,219,6],[190,14,219,12,"frameMetrics"],[190,26,219,24],[190,29,219,27],[190,33,219,31],[190,34,219,32,"getCellMetricsApprox"],[190,54,219,52],[190,55,219,53,"Math"],[190,59,219,57],[190,60,219,58,"floor"],[190,65,219,63],[190,66,219,64,"index"],[190,71,219,69],[190,72,219,70],[190,74,219,72,"props"],[190,79,219,77],[190,80,219,78],[191,10,220,6],[191,14,220,12,"remainder"],[191,23,220,21],[191,26,220,24,"index"],[191,31,220,29],[191,34,220,32,"Math"],[191,38,220,36],[191,39,220,37,"floor"],[191,44,220,42],[191,45,220,43,"index"],[191,50,220,48],[191,51,220,49],[192,10,221,6],[192,17,221,13,"frameMetrics"],[192,29,221,25],[192,30,221,26,"offset"],[192,36,221,32],[192,39,221,35,"remainder"],[192,48,221,44],[192,51,221,47,"frameMetrics"],[192,63,221,59],[192,64,221,60,"length"],[192,70,221,66],[193,8,222,4],[194,6,223,2],[196,6,225,2],[197,0,226,0],[198,0,227,0],[199,4,225,2],[200,6,225,2,"key"],[200,9,225,2],[201,6,225,2,"value"],[201,11,225,2],[201,13,228,2],[201,22,228,2,"getContentLength"],[201,38,228,18,"getContentLength"],[201,39,228,18],[201,41,228,29],[202,8,228,29],[202,12,228,29,"_this$_contentLength"],[202,32,228,29],[203,8,229,4],[203,16,229,4,"_this$_contentLength"],[203,36,229,4],[203,39,229,11],[203,43,229,15],[203,44,229,16,"_contentLength"],[203,58,229,30],[203,70,229,30,"_this$_contentLength"],[203,90,229,30],[203,93,229,34],[203,94,229,35],[204,6,230,2],[206,6,232,2],[207,0,233,0],[208,0,234,0],[209,4,232,2],[210,6,232,2,"key"],[210,9,232,2],[211,6,232,2,"value"],[211,11,232,2],[211,13,235,2],[211,22,235,2,"hasContentLength"],[211,38,235,18,"hasContentLength"],[211,39,235,18],[211,41,235,30],[212,8,236,4],[212,15,236,11],[212,19,236,15],[212,20,236,16,"_contentLength"],[212,34,236,30],[212,38,236,34],[212,42,236,38],[213,6,237,2],[215,6,239,2],[216,0,240,0],[217,0,241,0],[218,0,242,0],[219,4,239,2],[220,6,239,2,"key"],[220,9,239,2],[221,6,239,2,"value"],[221,11,239,2],[221,13,243,2],[221,22,243,2,"flowRelativeOffset"],[221,40,243,20,"flowRelativeOffset"],[221,41,243,21,"layout"],[221,47,243,35],[221,49,243,37,"referenceContentLength"],[221,71,243,69],[221,73,243,79],[222,8,244,4],[222,12,244,4,"_this$_orientation"],[222,30,244,4],[222,33,244,30],[222,37,244,34],[222,38,244,35,"_orientation"],[222,50,244,47],[223,10,244,11,"horizontal"],[223,20,244,21],[223,23,244,21,"_this$_orientation"],[223,41,244,21],[223,42,244,11,"horizontal"],[223,52,244,21],[224,10,244,23,"rtl"],[224,13,244,26],[224,16,244,26,"_this$_orientation"],[224,34,244,26],[224,35,244,23,"rtl"],[224,38,244,26],[225,8,246,4],[225,12,246,8,"horizontal"],[225,22,246,18],[225,26,246,22,"rtl"],[225,29,246,25],[225,31,246,27],[226,10,247,6],[226,14,247,12,"contentLength"],[226,27,247,25],[226,30,247,28,"referenceContentLength"],[226,52,247,50],[226,63,247,28,"referenceContentLength"],[226,85,247,50],[226,88,247,54],[226,92,247,58],[226,93,247,59,"_contentLength"],[226,107,247,73],[227,10,248,6],[227,14,248,6,"invariant"],[227,32,248,15],[227,34,249,8,"contentLength"],[227,47,249,21],[227,51,249,25],[227,55,249,29],[227,57,250,8],[227,145,251,6],[227,146,251,7],[228,10,252,6],[228,17,253,8,"contentLength"],[228,30,253,21],[228,34,254,9],[228,38,254,13],[228,39,254,14,"_selectOffset"],[228,52,254,27],[228,53,254,28,"layout"],[228,59,254,34],[228,60,254,35],[228,63,254,38],[228,67,254,42],[228,68,254,43,"_selectLength"],[228,81,254,56],[228,82,254,57,"layout"],[228,88,254,63],[228,89,254,64],[228,90,254,65],[229,8,256,4],[229,9,256,5],[229,15,256,11],[230,10,257,6],[230,17,257,13],[230,21,257,17],[230,22,257,18,"_selectOffset"],[230,35,257,31],[230,36,257,32,"layout"],[230,42,257,38],[230,43,257,39],[231,8,258,4],[232,6,259,2],[234,6,261,2],[235,0,262,0],[236,0,263,0],[237,4,261,2],[238,6,261,2,"key"],[238,9,261,2],[239,6,261,2,"value"],[239,11,261,2],[239,13,264,2],[239,22,264,2,"cartesianOffset"],[239,37,264,17,"cartesianOffset"],[239,38,264,18,"flowRelativeOffset"],[239,56,264,44],[239,58,264,54],[240,8,265,4],[240,12,265,4,"_this$_orientation2"],[240,31,265,4],[240,34,265,30],[240,38,265,34],[240,39,265,35,"_orientation"],[240,51,265,47],[241,10,265,11,"horizontal"],[241,20,265,21],[241,23,265,21,"_this$_orientation2"],[241,42,265,21],[241,43,265,11,"horizontal"],[241,53,265,21],[242,10,265,23,"rtl"],[242,13,265,26],[242,16,265,26,"_this$_orientation2"],[242,35,265,26],[242,36,265,23,"rtl"],[242,39,265,26],[243,8,267,4],[243,12,267,8,"horizontal"],[243,22,267,18],[243,26,267,22,"rtl"],[243,29,267,25],[243,31,267,27],[244,10,268,6],[244,14,268,6,"invariant"],[244,32,268,15],[244,34,269,8],[244,38,269,12],[244,39,269,13,"_contentLength"],[244,53,269,27],[244,57,269,31],[244,61,269,35],[244,63,270,8],[244,151,271,6],[244,152,271,7],[245,10,272,6],[245,17,272,13],[245,21,272,17],[245,22,272,18,"_contentLength"],[245,36,272,32],[245,39,272,35,"flowRelativeOffset"],[245,57,272,53],[246,8,273,4],[246,9,273,5],[246,15,273,11],[247,10,274,6],[247,17,274,13,"flowRelativeOffset"],[247,35,274,31],[248,8,275,4],[249,6,276,2],[250,4,276,3],[251,6,276,3,"key"],[251,9,276,3],[252,6,276,3,"value"],[252,11,276,3],[252,13,278,2],[252,22,278,2,"_invalidateIfOrientationChanged"],[252,53,278,33,"_invalidateIfOrientationChanged"],[252,54,278,34,"orientation"],[252,65,278,62],[252,67,278,70],[253,8,279,4],[253,12,279,8,"orientation"],[253,23,279,19],[253,24,279,20,"rtl"],[253,27,279,23],[253,32,279,28],[253,36,279,32],[253,37,279,33,"_orientation"],[253,49,279,45],[253,50,279,46,"rtl"],[253,53,279,49],[253,55,279,51],[254,10,280,6],[254,14,280,10],[254,15,280,11,"_cellMetrics"],[254,27,280,23],[254,28,280,24,"clear"],[254,33,280,29],[254,34,280,30],[254,35,280,31],[255,8,281,4],[256,8,283,4],[256,12,283,8,"orientation"],[256,23,283,19],[256,24,283,20,"horizontal"],[256,34,283,30],[256,39,283,35],[256,43,283,39],[256,44,283,40,"_orientation"],[256,56,283,52],[256,57,283,53,"horizontal"],[256,67,283,63],[256,69,283,65],[257,10,284,6],[257,14,284,10],[257,15,284,11,"_averageCellLength"],[257,33,284,29],[257,36,284,32],[257,37,284,33],[258,10,285,6],[258,14,285,10],[258,15,285,11,"_highestMeasuredCellIndex"],[258,40,285,36],[258,43,285,39],[258,44,285,40],[259,10,286,6],[259,14,286,10],[259,15,286,11,"_measuredCellsLength"],[259,35,286,31],[259,38,286,34],[259,39,286,35],[260,10,287,6],[260,14,287,10],[260,15,287,11,"_measuredCellsCount"],[260,34,287,30],[260,37,287,33],[260,38,287,34],[261,8,288,4],[262,8,290,4],[262,12,290,8],[262,13,290,9,"_orientation"],[262,25,290,21],[262,28,290,24,"orientation"],[262,39,290,35],[263,6,291,2],[264,4,291,3],[265,6,291,3,"key"],[265,9,291,3],[266,6,291,3,"value"],[266,11,291,3],[266,13,293,2],[266,22,293,2,"_selectLength"],[266,35,293,15,"_selectLength"],[266,36,293,15,"_ref3"],[266,41,293,15],[266,43,296,62],[267,8,296,62],[267,12,294,4,"width"],[267,17,294,9],[267,20,294,9,"_ref3"],[267,25,294,9],[267,26,294,4,"width"],[267,31,294,9],[268,10,295,4,"height"],[268,16,295,10],[268,19,295,10,"_ref3"],[268,24,295,10],[268,25,295,4,"height"],[268,31,295,10],[269,8,297,4],[269,15,297,11],[269,19,297,15],[269,20,297,16,"_orientation"],[269,32,297,28],[269,33,297,29,"horizontal"],[269,43,297,39],[269,46,297,42,"width"],[269,51,297,47],[269,54,297,50,"height"],[269,60,297,56],[270,6,298,2],[271,4,298,3],[272,6,298,3,"key"],[272,9,298,3],[273,6,298,3,"value"],[273,11,298,3],[273,13,300,2],[273,22,300,2,"_selectOffset"],[273,35,300,15,"_selectOffset"],[273,36,300,15,"_ref4"],[273,41,300,15],[273,43,300,72],[274,8,300,72],[274,12,300,17,"x"],[274,13,300,18],[274,16,300,18,"_ref4"],[274,21,300,18],[274,22,300,17,"x"],[274,23,300,18],[275,10,300,20,"y"],[275,11,300,21],[275,14,300,21,"_ref4"],[275,19,300,21],[275,20,300,20,"y"],[275,21,300,21],[276,8,301,4],[276,15,301,11],[276,19,301,15],[276,20,301,16,"_orientation"],[276,32,301,28],[276,33,301,29,"horizontal"],[276,43,301,39],[276,46,301,42,"x"],[276,47,301,43],[276,50,301,46,"y"],[276,51,301,47],[277,6,302,2],[278,4,302,3],[279,2,302,3],[280,0,302,3],[280,3]],"functionMap":{"names":["<global>","ListMetricsAggregator","notifyCellLayout","notifyCellUnmounted","notifyListContentLayout","getAverageCellLength","getHighestMeasuredCellIndex","getCellMetricsApprox","getCellMetrics","getCellOffsetApprox","getContentLength","hasContentLength","flowRelativeOffset","cartesianOffset","_invalidateIfOrientationChanged","_selectLength","_selectOffset"],"mappings":"AAA;eC0D;ECiB;GD0C;EEK;GFK;EGK;GHS;EIK;GJE;EKM;GLE;EMO;GNkB;EOK;GPsB;EQM;GRQ;ESK;GTE;EUK;GVE;EWM;GXgB;EYK;GZY;EaE;Gba;EcE;GdK;EeE;GfE;CDC"}},"type":"js/module"}]}