{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":58,"column":0,"index":1556}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":58,"column":0,"index":1556}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":58,"column":0,"index":1556}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":58,"column":0,"index":1556}}],"key":"rcd0dMwf8BS2g+8U1wyhIOxtYEo="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":58,"column":0,"index":1556}}],"key":"4pxOr+e+5cSZAdeEKxSt3F7LoKY="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":58,"column":0,"index":1556}}],"key":"EDnOjopp9yNVawSzfBRsy2dq5dM="}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":43,"index":43}}],"key":"avnjoAx2FQYjx6eZ7ALk+OuZk68="}},{"name":"./AnimatedNode","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":0,"index":121},"end":{"line":4,"column":42,"index":163}}],"key":"3roa5JYtcfxCkpexJXwVNW3mWv0="}},{"name":"../val","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":91},"end":{"line":3,"column":29,"index":120}},{"start":{"line":3,"column":0,"index":91},"end":{"line":3,"column":29,"index":120}},{"start":{"line":3,"column":0,"index":91},"end":{"line":3,"column":29,"index":120}}],"key":"CDlYAz5y1JiXWGTtKqaFUSMXIf0="}},{"name":"../core/AnimatedBlock","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":44},"end":{"line":2,"column":46,"index":90}},{"start":{"line":2,"column":0,"index":44},"end":{"line":2,"column":46,"index":90}},{"start":{"line":2,"column":0,"index":44},"end":{"line":2,"column":46,"index":90}}],"key":"6gyDiq4QU4flc8Or/XN5uYrwPPw="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createAnimatedCond = createAnimatedCond;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"fbjs/lib/invariant\"));\n  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./AnimatedNode\"));\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n  var AnimatedCond = /*#__PURE__*/function (_AnimatedNode) {\n    function AnimatedCond(condition, ifBlock, elseBlock) {\n      var _this;\n      (0, _classCallCheck2.default)(this, AnimatedCond);\n      (0, _invariant.default)(condition instanceof _AnimatedNode2.default, `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`);\n      (0, _invariant.default)(ifBlock instanceof _AnimatedNode2.default, `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`);\n      (0, _invariant.default)(elseBlock instanceof _AnimatedNode2.default || elseBlock === undefined, `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`);\n      _this = _callSuper(this, AnimatedCond, [{\n        type: 'cond',\n        cond: condition,\n        ifBlock: ifBlock,\n        elseBlock: elseBlock\n      }, [condition, ifBlock, elseBlock]]);\n      _this._condition = condition;\n      _this._ifBlock = ifBlock;\n      _this._elseBlock = elseBlock;\n      return _this;\n    }\n    (0, _inherits2.default)(AnimatedCond, _AnimatedNode);\n    return (0, _createClass2.default)(AnimatedCond, [{\n      key: \"toString\",\n      value: function toString() {\n        return `AnimatedCond, id: ${this.__nodeID}`;\n      }\n    }, {\n      key: \"__onEvaluate\",\n      value: function __onEvaluate() {\n        if ((0, _$$_REQUIRE(_dependencyMap[8], \"../val\").val)(this._condition)) {\n          return (0, _$$_REQUIRE(_dependencyMap[8], \"../val\").val)(this._ifBlock);\n        } else {\n          return this._elseBlock !== undefined ? (0, _$$_REQUIRE(_dependencyMap[8], \"../val\").val)(this._elseBlock) : undefined;\n        }\n      }\n    }]);\n  }(_AnimatedNode2.default);\n  function createAnimatedCond(cond, ifBlock, elseBlock) {\n    return new AnimatedCond((0, _$$_REQUIRE(_dependencyMap[9], \"../core/AnimatedBlock\").adapt)(cond), (0, _$$_REQUIRE(_dependencyMap[9], \"../core/AnimatedBlock\").adapt)(ifBlock), elseBlock === undefined ? undefined : (0, _$$_REQUIRE(_dependencyMap[9], \"../core/AnimatedBlock\").adapt)(elseBlock));\n  }\n});","lineCount":54,"map":[[12,2,1,0],[12,6,1,0,"_invariant"],[12,16,1,0],[12,19,1,0,"_interopRequireDefault"],[12,41,1,0],[12,42,1,0,"_$$_REQUIRE"],[12,53,1,0],[12,54,1,0,"_dependencyMap"],[12,68,1,0],[13,2,4,0],[13,6,4,0,"_AnimatedNode2"],[13,20,4,0],[13,23,4,0,"_interopRequireDefault"],[13,45,4,0],[13,46,4,0,"_$$_REQUIRE"],[13,57,4,0],[13,58,4,0,"_dependencyMap"],[13,72,4,0],[14,2,4,42],[14,11,4,42,"_callSuper"],[14,22,4,42,"t"],[14,23,4,42],[14,25,4,42,"o"],[14,26,4,42],[14,28,4,42,"e"],[14,29,4,42],[14,40,4,42,"o"],[14,41,4,42],[14,48,4,42,"_getPrototypeOf2"],[14,64,4,42],[14,65,4,42,"default"],[14,72,4,42],[14,74,4,42,"o"],[14,75,4,42],[14,82,4,42,"_possibleConstructorReturn2"],[14,109,4,42],[14,110,4,42,"default"],[14,117,4,42],[14,119,4,42,"t"],[14,120,4,42],[14,122,4,42,"_isNativeReflectConstruct"],[14,147,4,42],[14,152,4,42,"Reflect"],[14,159,4,42],[14,160,4,42,"construct"],[14,169,4,42],[14,170,4,42,"o"],[14,171,4,42],[14,173,4,42,"e"],[14,174,4,42],[14,186,4,42,"_getPrototypeOf2"],[14,202,4,42],[14,203,4,42,"default"],[14,210,4,42],[14,212,4,42,"t"],[14,213,4,42],[14,215,4,42,"constructor"],[14,226,4,42],[14,230,4,42,"o"],[14,231,4,42],[14,232,4,42,"apply"],[14,237,4,42],[14,238,4,42,"t"],[14,239,4,42],[14,241,4,42,"e"],[14,242,4,42],[15,2,4,42],[15,11,4,42,"_isNativeReflectConstruct"],[15,37,4,42],[15,51,4,42,"t"],[15,52,4,42],[15,56,4,42,"Boolean"],[15,63,4,42],[15,64,4,42,"prototype"],[15,73,4,42],[15,74,4,42,"valueOf"],[15,81,4,42],[15,82,4,42,"call"],[15,86,4,42],[15,87,4,42,"Reflect"],[15,94,4,42],[15,95,4,42,"construct"],[15,104,4,42],[15,105,4,42,"Boolean"],[15,112,4,42],[15,145,4,42,"t"],[15,146,4,42],[15,159,4,42,"_isNativeReflectConstruct"],[15,184,4,42],[15,196,4,42,"_isNativeReflectConstruct"],[15,222,4,42],[15,235,4,42,"t"],[15,236,4,42],[16,2,4,42],[16,6,6,6,"AnimatedCond"],[16,18,6,18],[16,44,6,18,"_AnimatedNode"],[16,57,6,18],[17,4,11,2],[17,13,11,2,"AnimatedCond"],[17,26,11,14,"condition"],[17,35,11,23],[17,37,11,25,"ifBlock"],[17,44,11,32],[17,46,11,34,"elseBlock"],[17,55,11,43],[17,57,11,45],[18,6,11,45],[18,10,11,45,"_this"],[18,15,11,45],[19,6,11,45],[19,10,11,45,"_classCallCheck2"],[19,26,11,45],[19,27,11,45,"default"],[19,34,11,45],[19,42,11,45,"AnimatedCond"],[19,54,11,45],[20,6,12,4],[20,10,12,4,"invariant"],[20,28,12,13],[20,30,13,6,"condition"],[20,39,13,15],[20,51,13,27,"AnimatedNode"],[20,73,13,39],[20,75,14,6],[20,163,14,94,"condition"],[20,172,14,103],[20,174,15,4],[20,175,15,5],[21,6,16,4],[21,10,16,4,"invariant"],[21,28,16,13],[21,30,17,6,"ifBlock"],[21,37,17,13],[21,49,17,25,"AnimatedNode"],[21,71,17,37],[21,73,18,6],[21,162,18,95,"ifBlock"],[21,169,18,102],[21,171,19,4],[21,172,19,5],[22,6,20,4],[22,10,20,4,"invariant"],[22,28,20,13],[22,30,21,6,"elseBlock"],[22,39,21,15],[22,51,21,27,"AnimatedNode"],[22,73,21,39],[22,77,21,43,"elseBlock"],[22,86,21,52],[22,91,21,57,"undefined"],[22,100,21,66],[22,102,22,6],[22,213,22,117,"elseBlock"],[22,222,22,126],[22,224,23,4],[22,225,23,5],[23,6,24,4,"_this"],[23,11,24,4],[23,14,24,4,"_callSuper"],[23,24,24,4],[23,31,24,4,"AnimatedCond"],[23,43,24,4],[23,46,25,6],[24,8,26,8,"type"],[24,12,26,12],[24,14,26,14],[24,20,26,20],[25,8,27,8,"cond"],[25,12,27,12],[25,14,27,14,"condition"],[25,23,27,23],[26,8,28,8,"ifBlock"],[26,15,28,15],[26,17,28,8,"ifBlock"],[26,24,28,15],[27,8,29,8,"elseBlock"],[27,17,29,17],[27,19,29,8,"elseBlock"],[28,6,30,6],[28,7,30,7],[28,9,31,6],[28,10,31,7,"condition"],[28,19,31,16],[28,21,31,18,"ifBlock"],[28,28,31,25],[28,30,31,27,"elseBlock"],[28,39,31,36],[28,40,31,37],[29,6,33,4,"_this"],[29,11,33,4],[29,12,33,9,"_condition"],[29,22,33,19],[29,25,33,22,"condition"],[29,34,33,31],[30,6,34,4,"_this"],[30,11,34,4],[30,12,34,9,"_ifBlock"],[30,20,34,17],[30,23,34,20,"ifBlock"],[30,30,34,27],[31,6,35,4,"_this"],[31,11,35,4],[31,12,35,9,"_elseBlock"],[31,22,35,19],[31,25,35,22,"elseBlock"],[31,34,35,31],[32,6,35,32],[32,13,35,32,"_this"],[32,18,35,32],[33,4,36,2],[34,4,36,3],[34,8,36,3,"_inherits2"],[34,18,36,3],[34,19,36,3,"default"],[34,26,36,3],[34,28,36,3,"AnimatedCond"],[34,40,36,3],[34,42,36,3,"_AnimatedNode"],[34,55,36,3],[35,4,36,3],[35,15,36,3,"_createClass2"],[35,28,36,3],[35,29,36,3,"default"],[35,36,36,3],[35,38,36,3,"AnimatedCond"],[35,50,36,3],[36,6,36,3,"key"],[36,9,36,3],[37,6,36,3,"value"],[37,11,36,3],[37,13,38,2],[37,22,38,2,"toString"],[37,30,38,10,"toString"],[37,31,38,10],[37,33,38,13],[38,8,39,4],[38,15,39,11],[38,36,39,32],[38,40,39,36],[38,41,39,37,"__nodeID"],[38,49,39,45],[38,51,39,47],[39,6,40,2],[40,4,40,3],[41,6,40,3,"key"],[41,9,40,3],[42,6,40,3,"value"],[42,11,40,3],[42,13,42,2],[42,22,42,2,"__onEvaluate"],[42,34,42,14,"__onEvaluate"],[42,35,42,14],[42,37,42,17],[43,8,43,4],[43,12,43,8],[43,16,43,8,"val"],[43,46,43,8],[43,47,43,8,"val"],[43,60,43,11],[43,62,43,12],[43,66,43,16],[43,67,43,17,"_condition"],[43,77,43,27],[43,78,43,28],[43,80,43,30],[44,10,44,6],[44,17,44,13],[44,21,44,13,"val"],[44,51,44,13],[44,52,44,13,"val"],[44,65,44,16],[44,67,44,17],[44,71,44,21],[44,72,44,22,"_ifBlock"],[44,80,44,30],[44,81,44,31],[45,8,45,4],[45,9,45,5],[45,15,45,11],[46,10,46,6],[46,17,46,13],[46,21,46,17],[46,22,46,18,"_elseBlock"],[46,32,46,28],[46,37,46,33,"undefined"],[46,46,46,42],[46,49,46,45],[46,53,46,45,"val"],[46,83,46,45],[46,84,46,45,"val"],[46,97,46,48],[46,99,46,49],[46,103,46,53],[46,104,46,54,"_elseBlock"],[46,114,46,64],[46,115,46,65],[46,118,46,68,"undefined"],[46,127,46,77],[47,8,47,4],[48,6,48,2],[49,4,48,3],[50,2,48,3],[50,4,6,27,"AnimatedNode"],[50,26,6,39],[51,2,51,7],[51,11,51,16,"createAnimatedCond"],[51,29,51,34,"createAnimatedCond"],[51,30,51,35,"cond"],[51,34,51,39],[51,36,51,41,"ifBlock"],[51,43,51,48],[51,45,51,50,"elseBlock"],[51,54,51,59],[51,56,51,61],[52,4,52,2],[52,11,52,9],[52,15,52,13,"AnimatedCond"],[52,27,52,25],[52,28,53,4],[52,32,53,4,"adapt"],[52,62,53,4],[52,63,53,4,"adapt"],[52,93,53,9],[52,95,53,10,"cond"],[52,99,53,14],[52,100,53,15],[52,102,54,4],[52,106,54,4,"adapt"],[52,136,54,4],[52,137,54,4,"adapt"],[52,167,54,9],[52,169,54,10,"ifBlock"],[52,176,54,17],[52,177,54,18],[52,179,55,4,"elseBlock"],[52,188,55,13],[52,193,55,18,"undefined"],[52,202,55,27],[52,205,55,30,"undefined"],[52,214,55,39],[52,217,55,42],[52,221,55,42,"adapt"],[52,251,55,42],[52,252,55,42,"adapt"],[52,282,55,47],[52,284,55,48,"elseBlock"],[52,293,55,57],[52,294,56,2],[52,295,56,3],[53,2,57,0],[54,0,57,1],[54,3]],"functionMap":{"names":["<global>","AnimatedCond","constructor","toString","__onEvaluate","createAnimatedCond"],"mappings":"AAA;ACK;ECK;GDyB;EEE;GFE;EGE;GHM;CDC;OKE;CLM"}},"type":"js/module"}]}