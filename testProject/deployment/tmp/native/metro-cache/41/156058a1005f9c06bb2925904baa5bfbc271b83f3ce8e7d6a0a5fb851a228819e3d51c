{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  // Capturing groups:\n  // 1. function name\n  // 2. is this a native stack frame?\n  // 3. is this a bytecode address or a source location?\n  // 4. source URL (filename)\n  // 5. line number (1 based)\n  // 6. column number (1 based) or virtual offset (0 based)\n  var RE_FRAME = /^ {4}at (.+?)(?: \\((native)\\)?| \\((address at )?(.*?):(\\d+):(\\d+)\\))$/;\n\n  // Capturing groups:\n  // 1. count of skipped frames\n  var RE_SKIPPED = /^ {4}... skipping (\\d+) frames$/;\n  var RE_COMPONENT_NO_STACK = /^ {4}at .*$/;\n  function isInternalBytecodeSourceUrl(sourceUrl) {\n    // See https://github.com/facebook/hermes/blob/3332fa020cae0bab751f648db7c94e1d687eeec7/lib/VM/Runtime.cpp#L1100\n    return sourceUrl === 'InternalBytecode.js';\n  }\n  function parseLine(line) {\n    var asFrame = line.match(RE_FRAME);\n    if (asFrame) {\n      return {\n        type: 'FRAME',\n        functionName: asFrame[1],\n        location: asFrame[2] === 'native' ? {\n          type: 'NATIVE'\n        } : asFrame[3] === 'address at ' ? isInternalBytecodeSourceUrl(asFrame[4]) ? {\n          type: 'INTERNAL_BYTECODE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          virtualOffset0Based: Number.parseInt(asFrame[6], 10)\n        } : {\n          type: 'BYTECODE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          virtualOffset0Based: Number.parseInt(asFrame[6], 10)\n        } : {\n          type: 'SOURCE',\n          sourceUrl: asFrame[4],\n          line1Based: Number.parseInt(asFrame[5], 10),\n          column1Based: Number.parseInt(asFrame[6], 10)\n        }\n      };\n    }\n    var asSkipped = line.match(RE_SKIPPED);\n    if (asSkipped) {\n      return {\n        type: 'SKIPPED',\n        count: Number.parseInt(asSkipped[1], 10)\n      };\n    }\n  }\n  module.exports = function parseHermesStack(stack) {\n    var lines = stack.split(/\\n/);\n    var entries = [];\n    var lastMessageLine = -1;\n    for (var i = 0; i < lines.length; ++i) {\n      var line = lines[i];\n      if (!line) {\n        continue;\n      }\n      var entry = parseLine(line);\n      if (entry) {\n        entries.push(entry);\n        continue;\n      }\n      if (RE_COMPONENT_NO_STACK.test(line)) {\n        // Skip component stacks without source location.\n        // TODO: This will not be displayed, not sure how to handle it.\n        continue;\n      }\n      // No match - we're still in the message\n      lastMessageLine = i;\n      entries = [];\n    }\n    var message = lines.slice(0, lastMessageLine + 1).join('\\n');\n    return {\n      message: message,\n      entries: entries\n    };\n  };\n});","lineCount":94,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,62,0],[15,2,63,0],[16,2,64,0],[17,2,65,0],[18,2,66,0],[19,2,67,0],[20,2,68,0],[21,2,69,0],[21,6,69,6,"RE_FRAME"],[21,14,69,14],[21,17,70,2],[21,88,70,73],[23,2,72,0],[24,2,73,0],[25,2,74,0],[25,6,74,6,"RE_SKIPPED"],[25,16,74,16],[25,19,74,19],[25,52,74,52],[26,2,75,0],[26,6,75,6,"RE_COMPONENT_NO_STACK"],[26,27,75,27],[26,30,75,30],[26,43,75,43],[27,2,77,0],[27,11,77,9,"isInternalBytecodeSourceUrl"],[27,38,77,36,"isInternalBytecodeSourceUrl"],[27,39,77,37,"sourceUrl"],[27,48,77,54],[27,50,77,65],[28,4,78,2],[29,4,79,2],[29,11,79,9,"sourceUrl"],[29,20,79,18],[29,25,79,23],[29,46,79,44],[30,2,80,0],[31,2,82,0],[31,11,82,9,"parseLine"],[31,20,82,18,"parseLine"],[31,21,82,19,"line"],[31,25,82,31],[31,27,82,52],[32,4,83,2],[32,8,83,8,"asFrame"],[32,15,83,15],[32,18,83,18,"line"],[32,22,83,22],[32,23,83,23,"match"],[32,28,83,28],[32,29,83,29,"RE_FRAME"],[32,37,83,37],[32,38,83,38],[33,4,84,2],[33,8,84,6,"asFrame"],[33,15,84,13],[33,17,84,15],[34,6,85,4],[34,13,85,11],[35,8,86,6,"type"],[35,12,86,10],[35,14,86,12],[35,21,86,19],[36,8,87,6,"functionName"],[36,20,87,18],[36,22,87,20,"asFrame"],[36,29,87,27],[36,30,87,28],[36,31,87,29],[36,32,87,30],[37,8,88,6,"location"],[37,16,88,14],[37,18,89,8,"asFrame"],[37,25,89,15],[37,26,89,16],[37,27,89,17],[37,28,89,18],[37,33,89,23],[37,41,89,31],[37,44,90,12],[38,10,90,13,"type"],[38,14,90,17],[38,16,90,19],[39,8,90,27],[39,9,90,28],[39,12,91,12,"asFrame"],[39,19,91,19],[39,20,91,20],[39,21,91,21],[39,22,91,22],[39,27,91,27],[39,40,91,40],[39,43,92,14,"isInternalBytecodeSourceUrl"],[39,70,92,41],[39,71,92,42,"asFrame"],[39,78,92,49],[39,79,92,50],[39,80,92,51],[39,81,92,52],[39,82,92,53],[39,85,93,16],[40,10,94,18,"type"],[40,14,94,22],[40,16,94,24],[40,35,94,43],[41,10,95,18,"sourceUrl"],[41,19,95,27],[41,21,95,29,"asFrame"],[41,28,95,36],[41,29,95,37],[41,30,95,38],[41,31,95,39],[42,10,96,18,"line1Based"],[42,20,96,28],[42,22,96,30,"Number"],[42,28,96,36],[42,29,96,37,"parseInt"],[42,37,96,45],[42,38,96,46,"asFrame"],[42,45,96,53],[42,46,96,54],[42,47,96,55],[42,48,96,56],[42,50,96,58],[42,52,96,60],[42,53,96,61],[43,10,97,18,"virtualOffset0Based"],[43,29,97,37],[43,31,97,39,"Number"],[43,37,97,45],[43,38,97,46,"parseInt"],[43,46,97,54],[43,47,97,55,"asFrame"],[43,54,97,62],[43,55,97,63],[43,56,97,64],[43,57,97,65],[43,59,97,67],[43,61,97,69],[44,8,98,16],[44,9,98,17],[44,12,99,16],[45,10,100,18,"type"],[45,14,100,22],[45,16,100,24],[45,26,100,34],[46,10,101,18,"sourceUrl"],[46,19,101,27],[46,21,101,29,"asFrame"],[46,28,101,36],[46,29,101,37],[46,30,101,38],[46,31,101,39],[47,10,102,18,"line1Based"],[47,20,102,28],[47,22,102,30,"Number"],[47,28,102,36],[47,29,102,37,"parseInt"],[47,37,102,45],[47,38,102,46,"asFrame"],[47,45,102,53],[47,46,102,54],[47,47,102,55],[47,48,102,56],[47,50,102,58],[47,52,102,60],[47,53,102,61],[48,10,103,18,"virtualOffset0Based"],[48,29,103,37],[48,31,103,39,"Number"],[48,37,103,45],[48,38,103,46,"parseInt"],[48,46,103,54],[48,47,103,55,"asFrame"],[48,54,103,62],[48,55,103,63],[48,56,103,64],[48,57,103,65],[48,59,103,67],[48,61,103,69],[49,8,104,16],[49,9,104,17],[49,12,105,14],[50,10,106,16,"type"],[50,14,106,20],[50,16,106,22],[50,24,106,30],[51,10,107,16,"sourceUrl"],[51,19,107,25],[51,21,107,27,"asFrame"],[51,28,107,34],[51,29,107,35],[51,30,107,36],[51,31,107,37],[52,10,108,16,"line1Based"],[52,20,108,26],[52,22,108,28,"Number"],[52,28,108,34],[52,29,108,35,"parseInt"],[52,37,108,43],[52,38,108,44,"asFrame"],[52,45,108,51],[52,46,108,52],[52,47,108,53],[52,48,108,54],[52,50,108,56],[52,52,108,58],[52,53,108,59],[53,10,109,16,"column1Based"],[53,22,109,28],[53,24,109,30,"Number"],[53,30,109,36],[53,31,109,37,"parseInt"],[53,39,109,45],[53,40,109,46,"asFrame"],[53,47,109,53],[53,48,109,54],[53,49,109,55],[53,50,109,56],[53,52,109,58],[53,54,109,60],[54,8,110,14],[55,6,111,4],[55,7,111,5],[56,4,112,2],[57,4,113,2],[57,8,113,8,"asSkipped"],[57,17,113,17],[57,20,113,20,"line"],[57,24,113,24],[57,25,113,25,"match"],[57,30,113,30],[57,31,113,31,"RE_SKIPPED"],[57,41,113,41],[57,42,113,42],[58,4,114,2],[58,8,114,6,"asSkipped"],[58,17,114,15],[58,19,114,17],[59,6,115,4],[59,13,115,11],[60,8,116,6,"type"],[60,12,116,10],[60,14,116,12],[60,23,116,21],[61,8,117,6,"count"],[61,13,117,11],[61,15,117,13,"Number"],[61,21,117,19],[61,22,117,20,"parseInt"],[61,30,117,28],[61,31,117,29,"asSkipped"],[61,40,117,38],[61,41,117,39],[61,42,117,40],[61,43,117,41],[61,45,117,43],[61,47,117,45],[62,6,118,4],[62,7,118,5],[63,4,119,2],[64,2,120,0],[65,2,122,0,"module"],[65,8,122,6],[65,9,122,7,"exports"],[65,16,122,14],[65,19,122,17],[65,28,122,26,"parseHermesStack"],[65,44,122,42,"parseHermesStack"],[65,45,122,43,"stack"],[65,50,122,56],[65,52,122,77],[66,4,123,2],[66,8,123,8,"lines"],[66,13,123,13],[66,16,123,16,"stack"],[66,21,123,21],[66,22,123,22,"split"],[66,27,123,27],[66,28,123,28],[66,32,123,32],[66,33,123,33],[67,4,124,2],[67,8,124,6,"entries"],[67,15,124,69],[67,18,124,72],[67,20,124,74],[68,4,125,2],[68,8,125,6,"lastMessageLine"],[68,23,125,21],[68,26,125,24],[68,27,125,25],[68,28,125,26],[69,4,126,2],[69,9,126,7],[69,13,126,11,"i"],[69,14,126,12],[69,17,126,15],[69,18,126,16],[69,20,126,18,"i"],[69,21,126,19],[69,24,126,22,"lines"],[69,29,126,27],[69,30,126,28,"length"],[69,36,126,34],[69,38,126,36],[69,40,126,38,"i"],[69,41,126,39],[69,43,126,41],[70,6,127,4],[70,10,127,10,"line"],[70,14,127,14],[70,17,127,17,"lines"],[70,22,127,22],[70,23,127,23,"i"],[70,24,127,24],[70,25,127,25],[71,6,128,4],[71,10,128,8],[71,11,128,9,"line"],[71,15,128,13],[71,17,128,15],[72,8,129,6],[73,6,130,4],[74,6,131,4],[74,10,131,10,"entry"],[74,15,131,15],[74,18,131,18,"parseLine"],[74,27,131,27],[74,28,131,28,"line"],[74,32,131,32],[74,33,131,33],[75,6,132,4],[75,10,132,8,"entry"],[75,15,132,13],[75,17,132,15],[76,8,133,6,"entries"],[76,15,133,13],[76,16,133,14,"push"],[76,20,133,18],[76,21,133,19,"entry"],[76,26,133,24],[76,27,133,25],[77,8,134,6],[78,6,135,4],[79,6,136,4],[79,10,136,8,"RE_COMPONENT_NO_STACK"],[79,31,136,29],[79,32,136,30,"test"],[79,36,136,34],[79,37,136,35,"line"],[79,41,136,39],[79,42,136,40],[79,44,136,42],[80,8,137,6],[81,8,138,6],[82,8,139,6],[83,6,140,4],[84,6,141,4],[85,6,142,4,"lastMessageLine"],[85,21,142,19],[85,24,142,22,"i"],[85,25,142,23],[86,6,143,4,"entries"],[86,13,143,11],[86,16,143,14],[86,18,143,16],[87,4,144,2],[88,4,145,2],[88,8,145,8,"message"],[88,15,145,15],[88,18,145,18,"lines"],[88,23,145,23],[88,24,145,24,"slice"],[88,29,145,29],[88,30,145,30],[88,31,145,31],[88,33,145,33,"lastMessageLine"],[88,48,145,48],[88,51,145,51],[88,52,145,52],[88,53,145,53],[88,54,145,54,"join"],[88,58,145,58],[88,59,145,59],[88,63,145,63],[88,64,145,64],[89,4,146,2],[89,11,146,9],[90,6,146,10,"message"],[90,13,146,17],[90,15,146,10,"message"],[90,22,146,17],[91,6,146,19,"entries"],[91,13,146,26],[91,15,146,19,"entries"],[92,4,146,26],[92,5,146,27],[93,2,147,0],[93,3,147,1],[94,0,147,2],[94,3]],"functionMap":{"names":["<global>","isInternalBytecodeSourceUrl","parseLine","parseHermesStack"],"mappings":"AAA;AC4E;CDG;AEE;CFsC;iBGE;CHyB"}},"type":"js/module"}]}