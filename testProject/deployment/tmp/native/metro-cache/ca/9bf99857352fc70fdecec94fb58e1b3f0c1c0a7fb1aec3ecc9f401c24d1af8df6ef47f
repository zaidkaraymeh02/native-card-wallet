{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":158,"column":0,"index":4467}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":158,"column":0,"index":4467}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":158,"column":0,"index":4467}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/classPrivateFieldLooseBase","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":158,"column":0,"index":4467}}],"key":"jMONaMrLKWyW98OXtOcLrGqurmM="}},{"name":"@babel/runtime/helpers/classPrivateFieldLooseKey","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":158,"column":0,"index":4467}}],"key":"qTmzI90+V4e5n8oYrMtPGytmrV0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _classPrivateFieldLooseBase2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n  var _classPrivateFieldLooseKey2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n  var _registry = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)(\"registry\");\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  // $FlowFixMe[deprecated-type]\n  /**\n   * EventEmitter manages listeners and publishes events to them.\n   *\n   * EventEmitter accepts a single type parameter that defines the valid events\n   * and associated listener argument(s).\n   *\n   * @example\n   *\n   *   const emitter = new EventEmitter<{\n   *     success: [number, string],\n   *     error: [Error],\n   *   }>();\n   *\n   *   emitter.on('success', (statusCode, responseText) => {...});\n   *   emitter.emit('success', 200, '...');\n   *\n   *   emitter.on('error', error => {...});\n   *   emitter.emit('error', new Error('Resource not found'));\n   *\n   */\n  var EventEmitter = exports.default = /*#__PURE__*/function () {\n    function EventEmitter() {\n      (0, _classCallCheck2.default)(this, EventEmitter);\n      Object.defineProperty(this, _registry, {\n        writable: true,\n        value: {}\n      });\n    }\n    return (0, _createClass2.default)(EventEmitter, [{\n      key: \"addListener\",\n      value:\n      /**\n       * Registers a listener that is called when the supplied event is emitted.\n       * Returns a subscription that has a `remove` method to undo registration.\n       */\n      function addListener(eventType, listener, context) {\n        if (typeof listener !== 'function') {\n          throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');\n        }\n        var registrations = allocate((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], eventType);\n        var registration = {\n          context: context,\n          listener: listener,\n          remove: function remove() {\n            registrations.delete(registration);\n          }\n        };\n        registrations.add(registration);\n        return registration;\n      }\n\n      /**\n       * Emits the supplied event. Additional arguments supplied to `emit` will be\n       * passed through to each of the registered listeners.\n       *\n       * If a listener modifies the listeners registered for the same event, those\n       * changes will not be reflected in the current invocation of `emit`.\n       */\n    }, {\n      key: \"emit\",\n      value: function emit(eventType) {\n        var registrations = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];\n        if (registrations != null) {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n          // Copy `registrations` to take a snapshot when we invoke `emit`, in case\n          // registrations are added or removed when listeners are invoked.\n          for (var registration of Array.from(registrations)) {\n            registration.listener.apply(registration.context, args);\n          }\n        }\n      }\n\n      /**\n       * Removes all registered listeners.\n       */\n    }, {\n      key: \"removeAllListeners\",\n      value: function removeAllListeners(eventType) {\n        if (eventType == null) {\n          (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry] = {};\n        } else {\n          delete (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];\n        }\n      }\n\n      /**\n       * Returns the number of registered listeners for the supplied event.\n       */\n    }, {\n      key: \"listenerCount\",\n      value: function listenerCount(eventType) {\n        var registrations = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry][eventType];\n        return registrations == null ? 0 : registrations.size;\n      }\n    }]);\n  }();\n  function allocate(registry, eventType) {\n    var registrations = registry[eventType];\n    if (registrations == null) {\n      registrations = new Set();\n      registry[eventType] = registrations;\n    }\n    return registrations;\n  }\n});","lineCount":128,"map":[[12,2,1,0],[13,0,2,0],[14,0,3,0],[15,0,4,0],[16,0,5,0],[17,0,6,0],[18,0,7,0],[19,0,8,0],[20,0,9,0],[21,2,38,0],[22,2,44,0],[23,0,45,0],[24,0,46,0],[25,0,47,0],[26,0,48,0],[27,0,49,0],[28,0,50,0],[29,0,51,0],[30,0,52,0],[31,0,53,0],[32,0,54,0],[33,0,55,0],[34,0,56,0],[35,0,57,0],[36,0,58,0],[37,0,59,0],[38,0,60,0],[39,0,61,0],[40,0,62,0],[41,0,63,0],[42,2,44,0],[42,6,64,21,"EventEmitter"],[42,18,64,33],[42,21,64,33,"exports"],[42,28,64,33],[42,29,64,33,"default"],[42,36,64,33],[43,4,64,33],[43,13,64,33,"EventEmitter"],[43,26,64,33],[44,6,64,33],[44,10,64,33,"_classCallCheck2"],[44,26,64,33],[44,27,64,33,"default"],[44,34,64,33],[44,42,64,33,"EventEmitter"],[44,54,64,33],[45,6,64,33,"Object"],[45,12,64,33],[45,13,64,33,"defineProperty"],[45,27,64,33],[45,34,64,33,"_registry"],[45,43,64,33],[46,8,64,33,"writable"],[46,16,64,33],[47,8,64,33,"value"],[47,13,64,33],[47,15,67,41],[47,16,67,42],[48,6,67,43],[49,4,67,43],[50,4,67,43],[50,15,67,43,"_createClass2"],[50,28,67,43],[50,29,67,43,"default"],[50,36,67,43],[50,38,67,43,"EventEmitter"],[50,50,67,43],[51,6,67,43,"key"],[51,9,67,43],[52,6,67,43,"value"],[52,11,67,43],[53,6,69,2],[54,0,70,0],[55,0,71,0],[56,0,72,0],[57,6,73,2],[57,15,73,2,"addListener"],[57,26,73,13,"addListener"],[57,27,74,4,"eventType"],[57,36,74,21],[57,38,75,4,"listener"],[57,46,75,57],[57,48,76,4,"context"],[57,55,76,18],[57,57,77,23],[58,8,78,4],[58,12,78,8],[58,19,78,15,"listener"],[58,27,78,23],[58,32,78,28],[58,42,78,38],[58,44,78,40],[59,10,79,6],[59,16,79,12],[59,20,79,16,"TypeError"],[59,29,79,25],[59,30,80,8],[59,95,81,6],[59,96,81,7],[60,8,82,4],[61,8,83,4],[61,12,83,10,"registrations"],[61,25,83,23],[61,28,83,26,"allocate"],[61,36,83,34],[61,41,83,34,"_classPrivateFieldLooseBase2"],[61,69,83,34],[61,70,83,34,"default"],[61,77,83,34],[61,79,87,6],[61,83,87,10],[61,85,87,10,"_registry"],[61,94,87,10],[61,96,87,10,"_registry"],[61,105,87,10],[61,108,87,22,"eventType"],[61,117,87,31],[61,118,87,32],[62,8,88,4],[62,12,88,10,"registration"],[62,24,88,61],[62,27,88,64],[63,10,89,6,"context"],[63,17,89,13],[63,19,89,6,"context"],[63,26,89,13],[64,10,90,6,"listener"],[64,18,90,14],[64,20,90,6,"listener"],[64,28,90,14],[65,10,91,6,"remove"],[65,16,91,12],[65,27,91,6,"remove"],[65,33,91,12,"remove"],[65,34,91,12],[65,36,91,21],[66,12,92,8,"registrations"],[66,25,92,21],[66,26,92,22,"delete"],[66,32,92,28],[66,33,92,29,"registration"],[66,45,92,41],[66,46,92,42],[67,10,93,6],[68,8,94,4],[68,9,94,5],[69,8,95,4,"registrations"],[69,21,95,17],[69,22,95,18,"add"],[69,25,95,21],[69,26,95,22,"registration"],[69,38,95,34],[69,39,95,35],[70,8,96,4],[70,15,96,11,"registration"],[70,27,96,23],[71,6,97,2],[73,6,99,2],[74,0,100,0],[75,0,101,0],[76,0,102,0],[77,0,103,0],[78,0,104,0],[79,0,105,0],[80,4,99,2],[81,6,99,2,"key"],[81,9,99,2],[82,6,99,2,"value"],[82,11,99,2],[82,13,106,2],[82,22,106,2,"emit"],[82,26,106,6,"emit"],[82,27,107,4,"eventType"],[82,36,107,21],[82,38,109,10],[83,8,110,4],[83,12,110,10,"registrations"],[83,25,110,68],[83,28,111,6],[83,32,111,6,"_classPrivateFieldLooseBase2"],[83,60,111,6],[83,61,111,6,"default"],[83,68,111,6],[83,74,111,10],[83,76,111,10,"_registry"],[83,85,111,10],[83,87,111,10,"_registry"],[83,96,111,10],[83,98,111,21,"eventType"],[83,107,111,30],[83,108,111,31],[84,8,112,4],[84,12,112,8,"registrations"],[84,25,112,21],[84,29,112,25],[84,33,112,29],[84,35,112,31],[85,10,112,31],[85,19,112,31,"_len"],[85,23,112,31],[85,26,112,31,"arguments"],[85,35,112,31],[85,36,112,31,"length"],[85,42,112,31],[85,44,108,7,"args"],[85,48,108,11],[85,55,108,11,"Array"],[85,60,108,11],[85,61,108,11,"_len"],[85,65,108,11],[85,72,108,11,"_len"],[85,76,108,11],[85,87,108,11,"_key"],[85,91,108,11],[85,97,108,11,"_key"],[85,101,108,11],[85,104,108,11,"_len"],[85,108,108,11],[85,110,108,11,"_key"],[85,114,108,11],[86,12,108,7,"args"],[86,16,108,11],[86,17,108,11,"_key"],[86,21,108,11],[86,29,108,11,"arguments"],[86,38,108,11],[86,39,108,11,"_key"],[86,43,108,11],[87,10,108,11],[88,10,113,6],[89,10,114,6],[90,10,115,6],[90,15,115,11],[90,19,115,17,"registration"],[90,31,115,29],[90,35,115,33,"Array"],[90,40,115,38],[90,41,115,39,"from"],[90,45,115,43],[90,46,115,44,"registrations"],[90,59,115,57],[90,60,115,58],[90,62,115,60],[91,12,116,8,"registration"],[91,24,116,20],[91,25,116,21,"listener"],[91,33,116,29],[91,34,116,30,"apply"],[91,39,116,35],[91,40,116,36,"registration"],[91,52,116,48],[91,53,116,49,"context"],[91,60,116,56],[91,62,116,58,"args"],[91,66,116,62],[91,67,116,63],[92,10,117,6],[93,8,118,4],[94,6,119,2],[96,6,121,2],[97,0,122,0],[98,0,123,0],[99,4,121,2],[100,6,121,2,"key"],[100,9,121,2],[101,6,121,2,"value"],[101,11,121,2],[101,13,124,2],[101,22,124,2,"removeAllListeners"],[101,40,124,20,"removeAllListeners"],[101,41,125,4,"eventType"],[101,50,125,23],[101,52,126,10],[102,8,127,4],[102,12,127,8,"eventType"],[102,21,127,17],[102,25,127,21],[102,29,127,25],[102,31,127,27],[103,10,128,6],[103,14,128,6,"_classPrivateFieldLooseBase2"],[103,42,128,6],[103,43,128,6,"default"],[103,50,128,6],[103,56,128,10],[103,58,128,10,"_registry"],[103,67,128,10],[103,69,128,10,"_registry"],[103,78,128,10],[103,82,128,23],[103,83,128,24],[103,84,128,25],[104,8,129,4],[104,9,129,5],[104,15,129,11],[105,10,130,6],[105,17,130,13],[105,21,130,13,"_classPrivateFieldLooseBase2"],[105,49,130,13],[105,50,130,13,"default"],[105,57,130,13],[105,63,130,17],[105,65,130,17,"_registry"],[105,74,130,17],[105,76,130,17,"_registry"],[105,85,130,17],[105,87,130,28,"eventType"],[105,96,130,37],[105,97,130,38],[106,8,131,4],[107,6,132,2],[109,6,134,2],[110,0,135,0],[111,0,136,0],[112,4,134,2],[113,6,134,2,"key"],[113,9,134,2],[114,6,134,2,"value"],[114,11,134,2],[114,13,137,2],[114,22,137,2,"listenerCount"],[114,35,137,15,"listenerCount"],[114,36,137,48,"eventType"],[114,45,137,65],[114,47,137,75],[115,8,138,4],[115,12,138,10,"registrations"],[115,25,138,50],[115,28,138,53],[115,32,138,53,"_classPrivateFieldLooseBase2"],[115,60,138,53],[115,61,138,53,"default"],[115,68,138,53],[115,74,138,57],[115,76,138,57,"_registry"],[115,85,138,57],[115,87,138,57,"_registry"],[115,96,138,57],[115,98,138,68,"eventType"],[115,107,138,77],[115,108,138,78],[116,8,139,4],[116,15,139,11,"registrations"],[116,28,139,24],[116,32,139,28],[116,36,139,32],[116,39,139,35],[116,40,139,36],[116,43,139,39,"registrations"],[116,56,139,52],[116,57,139,53,"size"],[116,61,139,57],[117,6,140,2],[118,4,140,3],[119,2,140,3],[120,2,143,0],[120,11,143,9,"allocate"],[120,19,143,17,"allocate"],[120,20,148,2,"registry"],[120,28,148,37],[120,30,149,2,"eventType"],[120,39,149,19],[120,41,150,33],[121,4,151,2],[121,8,151,6,"registrations"],[121,21,151,51],[121,24,151,54,"registry"],[121,32,151,62],[121,33,151,63,"eventType"],[121,42,151,72],[121,43,151,73],[122,4,152,2],[122,8,152,6,"registrations"],[122,21,152,19],[122,25,152,23],[122,29,152,27],[122,31,152,29],[123,6,153,4,"registrations"],[123,19,153,17],[123,22,153,20],[123,26,153,24,"Set"],[123,29,153,27],[123,30,153,28],[123,31,153,29],[124,6,154,4,"registry"],[124,14,154,12],[124,15,154,13,"eventType"],[124,24,154,22],[124,25,154,23],[124,28,154,26,"registrations"],[124,41,154,39],[125,4,155,2],[126,4,156,2],[126,11,156,9,"registrations"],[126,24,156,22],[127,2,157,0],[128,0,157,1],[128,3]],"functionMap":{"names":["<global>","EventEmitter","addListener","registration.remove","emit","removeAllListeners","listenerCount","allocate"],"mappings":"AAA;eC+D;ECS;MCkB;ODE;GDI;EGS;GHa;EIK;GJQ;EKK;GLG;CDC;AOE;CPc"}},"type":"js/module"}]}