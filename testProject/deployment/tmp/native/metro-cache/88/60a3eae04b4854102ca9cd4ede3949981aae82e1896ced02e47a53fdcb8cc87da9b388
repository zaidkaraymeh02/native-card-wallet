{"dependencies":[{"name":"react-native","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":40,"index":40}}],"key":"XEo4Z+Aarw9Y7I7ZLBt66vGLAVQ="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = conditional;\n  var _reactNative = _$$_REQUIRE(_dependencyMap[0], \"react-native\");\n  var add = _reactNative.Animated.add,\n    multiply = _reactNative.Animated.multiply;\n\n  /**\n   * Use an Animated Node based on a condition. Similar to Reanimated's `cond`.\n   *\n   * @param condition Animated Node representing the condition, must be 0 or 1, 1 means `true`, 0 means `false`\n   * @param main Animated Node to use if the condition is `true`\n   * @param fallback Animated Node to use if the condition is `false`\n   */\n  function conditional(condition, main, fallback) {\n    // To implement this behavior, we multiply the main node with the condition.\n    // So if condition is 0, result will be 0, and if condition is 1, result will be main node.\n    // Then we multiple reverse of the condition (0 if condition is 1) with the fallback.\n    // So if condition is 0, result will be fallback node, and if condition is 1, result will be 0,\n    // This way, one of them will always be 0, and other one will be the value we need.\n    // In the end we add them both together, 0 + value we need = value we need\n    return add(multiply(condition, main), multiply(condition.interpolate({\n      inputRange: [0, 1],\n      outputRange: [1, 0]\n    }), fallback));\n  }\n});","lineCount":29,"map":[[6,2,1,0],[6,6,1,0,"_reactNative"],[6,18,1,0],[6,21,1,0,"_$$_REQUIRE"],[6,32,1,0],[6,33,1,0,"_dependencyMap"],[6,47,1,0],[7,2,3,0],[7,6,3,8,"add"],[7,9,3,11],[7,12,3,26,"Animated"],[7,33,3,34],[7,34,3,8,"add"],[7,37,3,11],[8,4,3,13,"multiply"],[8,12,3,21],[8,15,3,26,"Animated"],[8,36,3,34],[8,37,3,13,"multiply"],[8,45,3,21],[10,2,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,2,12,15],[17,11,12,24,"conditional"],[17,22,12,35,"conditional"],[17,23,13,2,"condition"],[17,32,13,50],[17,34,14,2,"main"],[17,38,14,46],[17,40,15,2,"fallback"],[17,48,15,50],[17,50,16,2],[18,4,17,2],[19,4,18,2],[20,4,19,2],[21,4,20,2],[22,4,21,2],[23,4,22,2],[24,4,23,2],[24,11,23,9,"add"],[24,14,23,12],[24,15,24,4,"multiply"],[24,23,24,12],[24,24,24,13,"condition"],[24,33,24,22],[24,35,24,24,"main"],[24,39,24,28],[24,40,24,29],[24,42,25,4,"multiply"],[24,50,25,12],[24,51,26,6,"condition"],[24,60,26,15],[24,61,26,16,"interpolate"],[24,72,26,27],[24,73,26,28],[25,6,27,8,"inputRange"],[25,16,27,18],[25,18,27,20],[25,19,27,21],[25,20,27,22],[25,22,27,24],[25,23,27,25],[25,24,27,26],[26,6,28,8,"outputRange"],[26,17,28,19],[26,19,28,21],[26,20,28,22],[26,21,28,23],[26,23,28,25],[26,24,28,26],[27,4,29,6],[27,5,29,7],[27,6,29,8],[27,8,30,6,"fallback"],[27,16,31,4],[27,17,32,2],[27,18,32,3],[28,2,33,0],[29,0,33,1],[29,3]],"functionMap":{"names":["<global>","conditional"],"mappings":"AAA;eCW;CDqB"}},"type":"js/module"}]}