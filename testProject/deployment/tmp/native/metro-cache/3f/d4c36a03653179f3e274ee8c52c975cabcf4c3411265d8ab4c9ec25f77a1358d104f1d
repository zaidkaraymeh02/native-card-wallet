{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":133,"column":0,"index":4135}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":133,"column":0,"index":4135}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = processFilter;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  function processFilter(filter) {\n    var result = [];\n    if (typeof filter === 'string') {\n      // matches on functions with args like \"brightness(1.5)\"\n      var regex = new RegExp(/(\\w+)\\(([^)]+)\\)/g);\n      var matches;\n      while (matches = regex.exec(filter)) {\n        var amount = _getFilterAmount(matches[1], matches[2]);\n        if (amount != null) {\n          var filterPrimitive = {};\n          // $FlowFixMe The key will be the correct one but flow can't see that.\n          filterPrimitive[matches[1]] = amount;\n          // $FlowFixMe The key will be the correct one but flow can't see that.\n          result.push(filterPrimitive);\n        } else {\n          // If any primitive is invalid then apply none of the filters. This is how\n          // web works and makes it clear that something is wrong becuase no\n          // graphical effects are happening.\n          return [];\n        }\n      }\n    } else {\n      for (var _filterPrimitive of filter) {\n        var _Object$entries$ = (0, _slicedToArray2.default)(Object.entries(_filterPrimitive)[0], 2),\n          filterName = _Object$entries$[0],\n          filterValue = _Object$entries$[1];\n        var _amount = _getFilterAmount(filterName, filterValue);\n        if (_amount != null) {\n          var resultObject = {};\n          // $FlowFixMe\n          resultObject[filterName] = _amount;\n          // $FlowFixMe\n          result.push(resultObject);\n        } else {\n          // If any primitive is invalid then apply none of the filters. This is how\n          // web works and makes it clear that something is wrong becuase no\n          // graphical effects are happening.\n          return [];\n        }\n      }\n    }\n    return result;\n  }\n  function _getFilterAmount(filterName, filterArgs) {\n    var filterArgAsNumber;\n    var unit;\n    if (typeof filterArgs === 'string') {\n      // matches on args with units like \"1.5 5% -80deg\"\n      var argsWithUnitsRegex = new RegExp(/([+-]?\\d*(\\.\\d+)?)([a-zA-Z%]+)?/g);\n      var match = argsWithUnitsRegex.exec(filterArgs);\n      if (!match || isNaN(Number(match[1]))) {\n        return undefined;\n      }\n      filterArgAsNumber = Number(match[1]);\n      unit = match[3];\n    } else if (typeof filterArgs === 'number') {\n      filterArgAsNumber = filterArgs;\n    } else {\n      return undefined;\n    }\n    switch (filterName) {\n      // Hue rotate takes some angle that can have a unit and can be\n      // negative. Additionally, 0 with no unit is allowed.\n      case 'hueRotate':\n        if (filterArgAsNumber === 0) {\n          return 0;\n        }\n        if (unit !== 'deg' && unit !== 'rad') {\n          return undefined;\n        }\n        return unit === 'rad' ? 180 * filterArgAsNumber / Math.PI : filterArgAsNumber;\n      // blur takes any positive CSS length that is not a percent. In RN\n      // we currently only have DIPs, so we are not parsing units here.\n      case 'blur':\n        if (unit && unit !== 'px' || filterArgAsNumber < 0) {\n          return undefined;\n        }\n        return filterArgAsNumber;\n      // All other filters except take a non negative number or percentage. There\n      // are no units associated with this value and percentage numbers map 1-to-1\n      // to a non-percentage number (e.g. 50% == 0.5).\n      case 'brightness':\n      case 'contrast':\n      case 'grayscale':\n      case 'invert':\n      case 'opacity':\n      case 'saturate':\n      case 'sepia':\n        if (unit && unit !== '%' && unit !== 'px' || filterArgAsNumber < 0) {\n          return undefined;\n        }\n        if (unit === '%') {\n          filterArgAsNumber /= 100;\n        }\n        return filterArgAsNumber;\n      default:\n        return undefined;\n    }\n  }\n});","lineCount":119,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_interopRequireDefault"],[14,28,11,13],[14,31,11,13,"_$$_REQUIRE"],[14,42,11,13],[14,43,11,13,"_dependencyMap"],[14,57,11,13],[15,2,11,13,"Object"],[15,8,11,13],[15,9,11,13,"defineProperty"],[15,23,11,13],[15,24,11,13,"exports"],[15,31,11,13],[16,4,11,13,"value"],[16,9,11,13],[17,2,11,13],[18,2,11,13,"exports"],[18,9,11,13],[18,10,11,13,"default"],[18,17,11,13],[18,20,11,13,"processFilter"],[18,33,11,13],[19,2,11,13],[19,6,11,13,"_slicedToArray2"],[19,21,11,13],[19,24,11,13,"_interopRequireDefault"],[19,46,11,13],[19,47,11,13,"_$$_REQUIRE"],[19,58,11,13],[19,59,11,13,"_dependencyMap"],[19,73,11,13],[20,2,24,15],[20,11,24,24,"processFilter"],[20,24,24,37,"processFilter"],[20,25,25,2,"filter"],[20,31,25,50],[20,33,26,35],[21,4,27,2],[21,8,27,6,"result"],[21,14,27,36],[21,17,27,39],[21,19,27,41],[22,4,28,2],[22,8,28,6],[22,15,28,13,"filter"],[22,21,28,19],[22,26,28,24],[22,34,28,32],[22,36,28,34],[23,6,29,4],[24,6,30,4],[24,10,30,10,"regex"],[24,15,30,15],[24,18,30,18],[24,22,30,22,"RegExp"],[24,28,30,28],[24,29,30,29],[24,48,30,48],[24,49,30,49],[25,6,31,4],[25,10,31,8,"matches"],[25,17,31,15],[26,6,33,4],[26,13,33,12,"matches"],[26,20,33,19],[26,23,33,22,"regex"],[26,28,33,27],[26,29,33,28,"exec"],[26,33,33,32],[26,34,33,33,"filter"],[26,40,33,39],[26,41,33,40],[26,43,33,43],[27,8,34,6],[27,12,34,12,"amount"],[27,18,34,18],[27,21,34,21,"_getFilterAmount"],[27,37,34,37],[27,38,34,38,"matches"],[27,45,34,45],[27,46,34,46],[27,47,34,47],[27,48,34,48],[27,50,34,50,"matches"],[27,57,34,57],[27,58,34,58],[27,59,34,59],[27,60,34,60],[27,61,34,61],[28,8,36,6],[28,12,36,10,"amount"],[28,18,36,16],[28,22,36,20],[28,26,36,24],[28,28,36,26],[29,10,37,8],[29,14,37,14,"filterPrimitive"],[29,29,37,29],[29,32,37,32],[29,33,37,33],[29,34,37,34],[30,10,38,8],[31,10,39,8,"filterPrimitive"],[31,25,39,23],[31,26,39,24,"matches"],[31,33,39,31],[31,34,39,32],[31,35,39,33],[31,36,39,34],[31,37,39,35],[31,40,39,38,"amount"],[31,46,39,44],[32,10,40,8],[33,10,41,8,"result"],[33,16,41,14],[33,17,41,15,"push"],[33,21,41,19],[33,22,41,20,"filterPrimitive"],[33,37,41,35],[33,38,41,36],[34,8,42,6],[34,9,42,7],[34,15,42,13],[35,10,43,8],[36,10,44,8],[37,10,45,8],[38,10,46,8],[38,17,46,15],[38,19,46,17],[39,8,47,6],[40,6,48,4],[41,4,49,2],[41,5,49,3],[41,11,49,9],[42,6,50,4],[42,11,50,9],[42,15,50,15,"filterPrimitive"],[42,31,50,30],[42,35,50,34,"filter"],[42,41,50,40],[42,43,50,42],[43,8,51,6],[43,12,51,6,"_Object$entries$"],[43,28,51,6],[43,35,51,6,"_slicedToArray2"],[43,50,51,6],[43,51,51,6,"default"],[43,58,51,6],[43,60,51,40,"Object"],[43,66,51,46],[43,67,51,47,"entries"],[43,74,51,54],[43,75,51,55,"filterPrimitive"],[43,91,51,70],[43,92,51,71],[43,93,51,72],[43,94,51,73],[43,95,51,74],[44,10,51,13,"filterName"],[44,20,51,23],[44,23,51,23,"_Object$entries$"],[44,39,51,23],[45,10,51,25,"filterValue"],[45,21,51,36],[45,24,51,36,"_Object$entries$"],[45,40,51,36],[46,8,52,6],[46,12,52,12,"amount"],[46,19,52,18],[46,22,52,21,"_getFilterAmount"],[46,38,52,37],[46,39,52,38,"filterName"],[46,49,52,48],[46,51,52,50,"filterValue"],[46,62,52,61],[46,63,52,62],[47,8,54,6],[47,12,54,10,"amount"],[47,19,54,16],[47,23,54,20],[47,27,54,24],[47,29,54,26],[48,10,55,8],[48,14,55,14,"resultObject"],[48,26,55,26],[48,29,55,29],[48,30,55,30],[48,31,55,31],[49,10,56,8],[50,10,57,8,"resultObject"],[50,22,57,20],[50,23,57,21,"filterName"],[50,33,57,31],[50,34,57,32],[50,37,57,35,"amount"],[50,44,57,41],[51,10,58,8],[52,10,59,8,"result"],[52,16,59,14],[52,17,59,15,"push"],[52,21,59,19],[52,22,59,20,"resultObject"],[52,34,59,32],[52,35,59,33],[53,8,60,6],[53,9,60,7],[53,15,60,13],[54,10,61,8],[55,10,62,8],[56,10,63,8],[57,10,64,8],[57,17,64,15],[57,19,64,17],[58,8,65,6],[59,6,66,4],[60,4,67,2],[61,4,69,2],[61,11,69,9,"result"],[61,17,69,15],[62,2,70,0],[63,2,72,0],[63,11,72,9,"_getFilterAmount"],[63,27,72,25,"_getFilterAmount"],[63,28,72,26,"filterName"],[63,38,72,44],[63,40,72,46,"filterArgs"],[63,50,72,63],[63,52,72,74],[64,4,73,2],[64,8,73,6,"filterArgAsNumber"],[64,25,73,31],[65,4,74,2],[65,8,74,6,"unit"],[65,12,74,18],[66,4,75,2],[66,8,75,6],[66,15,75,13,"filterArgs"],[66,25,75,23],[66,30,75,28],[66,38,75,36],[66,40,75,38],[67,6,76,4],[68,6,77,4],[68,10,77,10,"argsWithUnitsRegex"],[68,28,77,28],[68,31,77,31],[68,35,77,35,"RegExp"],[68,41,77,41],[68,42,77,42],[68,76,77,76],[68,77,77,77],[69,6,78,4],[69,10,78,10,"match"],[69,15,78,15],[69,18,78,18,"argsWithUnitsRegex"],[69,36,78,36],[69,37,78,37,"exec"],[69,41,78,41],[69,42,78,42,"filterArgs"],[69,52,78,52],[69,53,78,53],[70,6,80,4],[70,10,80,8],[70,11,80,9,"match"],[70,16,80,14],[70,20,80,18,"isNaN"],[70,25,80,23],[70,26,80,24,"Number"],[70,32,80,30],[70,33,80,31,"match"],[70,38,80,36],[70,39,80,37],[70,40,80,38],[70,41,80,39],[70,42,80,40],[70,43,80,41],[70,45,80,43],[71,8,81,6],[71,15,81,13,"undefined"],[71,24,81,22],[72,6,82,4],[73,6,84,4,"filterArgAsNumber"],[73,23,84,21],[73,26,84,24,"Number"],[73,32,84,30],[73,33,84,31,"match"],[73,38,84,36],[73,39,84,37],[73,40,84,38],[73,41,84,39],[73,42,84,40],[74,6,85,4,"unit"],[74,10,85,8],[74,13,85,11,"match"],[74,18,85,16],[74,19,85,17],[74,20,85,18],[74,21,85,19],[75,4,86,2],[75,5,86,3],[75,11,86,9],[75,15,86,13],[75,22,86,20,"filterArgs"],[75,32,86,30],[75,37,86,35],[75,45,86,43],[75,47,86,45],[76,6,87,4,"filterArgAsNumber"],[76,23,87,21],[76,26,87,24,"filterArgs"],[76,36,87,34],[77,4,88,2],[77,5,88,3],[77,11,88,9],[78,6,89,4],[78,13,89,11,"undefined"],[78,22,89,20],[79,4,90,2],[80,4,92,2],[80,12,92,10,"filterName"],[80,22,92,20],[81,6,93,4],[82,6,94,4],[83,6,95,4],[83,11,95,9],[83,22,95,20],[84,8,96,6],[84,12,96,10,"filterArgAsNumber"],[84,29,96,27],[84,34,96,32],[84,35,96,33],[84,37,96,35],[85,10,97,8],[85,17,97,15],[85,18,97,16],[86,8,98,6],[87,8,99,6],[87,12,99,10,"unit"],[87,16,99,14],[87,21,99,19],[87,26,99,24],[87,30,99,28,"unit"],[87,34,99,32],[87,39,99,37],[87,44,99,42],[87,46,99,44],[88,10,100,8],[88,17,100,15,"undefined"],[88,26,100,24],[89,8,101,6],[90,8,102,6],[90,15,102,13,"unit"],[90,19,102,17],[90,24,102,22],[90,29,102,27],[90,32,103,11],[90,35,103,14],[90,38,103,17,"filterArgAsNumber"],[90,55,103,34],[90,58,103,38,"Math"],[90,62,103,42],[90,63,103,43,"PI"],[90,65,103,45],[90,68,104,10,"filterArgAsNumber"],[90,85,104,27],[91,6,105,4],[92,6,106,4],[93,6,107,4],[93,11,107,9],[93,17,107,15],[94,8,108,6],[94,12,108,11,"unit"],[94,16,108,15],[94,20,108,19,"unit"],[94,24,108,23],[94,29,108,28],[94,33,108,32],[94,37,108,37,"filterArgAsNumber"],[94,54,108,54],[94,57,108,57],[94,58,108,58],[94,60,108,60],[95,10,109,8],[95,17,109,15,"undefined"],[95,26,109,24],[96,8,110,6],[97,8,111,6],[97,15,111,13,"filterArgAsNumber"],[97,32,111,30],[98,6,112,4],[99,6,113,4],[100,6,114,4],[101,6,115,4],[101,11,115,9],[101,23,115,21],[102,6,116,4],[102,11,116,9],[102,21,116,19],[103,6,117,4],[103,11,117,9],[103,22,117,20],[104,6,118,4],[104,11,118,9],[104,19,118,17],[105,6,119,4],[105,11,119,9],[105,20,119,18],[106,6,120,4],[106,11,120,9],[106,21,120,19],[107,6,121,4],[107,11,121,9],[107,18,121,16],[108,8,122,6],[108,12,122,11,"unit"],[108,16,122,15],[108,20,122,19,"unit"],[108,24,122,23],[108,29,122,28],[108,32,122,31],[108,36,122,35,"unit"],[108,40,122,39],[108,45,122,44],[108,49,122,48],[108,53,122,53,"filterArgAsNumber"],[108,70,122,70],[108,73,122,73],[108,74,122,74],[108,76,122,76],[109,10,123,8],[109,17,123,15,"undefined"],[109,26,123,24],[110,8,124,6],[111,8,125,6],[111,12,125,10,"unit"],[111,16,125,14],[111,21,125,19],[111,24,125,22],[111,26,125,24],[112,10,126,8,"filterArgAsNumber"],[112,27,126,25],[112,31,126,29],[112,34,126,32],[113,8,127,6],[114,8,128,6],[114,15,128,13,"filterArgAsNumber"],[114,32,128,30],[115,6,129,4],[116,8,130,6],[116,15,130,13,"undefined"],[116,24,130,22],[117,4,131,2],[118,2,132,0],[119,0,132,1],[119,3]],"functionMap":{"names":["<global>","processFilter","_getFilterAmount"],"mappings":"AAA;eCuB;CD8C;AEE;CF4D"}},"type":"js/module"}]}