{"dependencies":[{"name":"react","data":{"asyncType":null,"locs":[{"start":{"line":5,"column":0,"index":174},"end":{"line":5,"column":43,"index":217}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}},{"name":"react-native","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":0,"index":218},"end":{"line":6,"column":46,"index":264}}],"key":"XEo4Z+Aarw9Y7I7ZLBt66vGLAVQ="}},{"name":"../../../utils","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"q0dGJrXE+KOj2tnl0zxlb7IT3hM="}},{"name":"../../../getShadowNodeFromRef","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":69,"index":124}}],"key":"jHxpGyKKM1Po/KDZ+w70VrLZoqU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.useViewRefHandler = useViewRefHandler;\n  var _react = _$$_REQUIRE(_dependencyMap[0], \"react\");\n  var _reactNative = _$$_REQUIRE(_dependencyMap[1], \"react-native\");\n  // Ref handler for the Wrap component attached under the GestureDetector.\n  // It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n  // if the view has changed.\n  function useViewRefHandler(state, updateAttachedGestures) {\n    var refHandler = (0, _react.useCallback)(function (ref) {\n      if (ref === null) {\n        return;\n      }\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = (0, _reactNative.findNodeHandle)(state.viewRef);\n      }\n\n      // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n      if (__DEV__ && (0, _$$_REQUIRE(_dependencyMap[2], \"../../../utils\").isFabric)() && global.isFormsStackingContext) {\n        var node = (0, _$$_REQUIRE(_dependencyMap[3], \"../../../getShadowNodeFromRef\").getShadowNodeFromRef)(ref);\n        if (global.isFormsStackingContext(node) === false) {\n          console.error((0, _$$_REQUIRE(_dependencyMap[2], \"../../../utils\").tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n        }\n      }\n    }, [state, updateAttachedGestures]);\n    return refHandler;\n  }\n});","lineCount":37,"map":[[6,2,5,0],[6,6,5,0,"_react"],[6,12,5,0],[6,15,5,0,"_$$_REQUIRE"],[6,26,5,0],[6,27,5,0,"_dependencyMap"],[6,41,5,0],[7,2,6,0],[7,6,6,0,"_reactNative"],[7,18,6,0],[7,21,6,0,"_$$_REQUIRE"],[7,32,6,0],[7,33,6,0,"_dependencyMap"],[7,47,6,0],[8,2,12,0],[9,2,13,0],[10,2,14,0],[11,2,15,7],[11,11,15,16,"useViewRefHandler"],[11,28,15,33,"useViewRefHandler"],[11,29,16,2,"state"],[11,34,16,29],[11,36,17,2,"updateAttachedGestures"],[11,58,17,62],[11,60,18,2],[12,4,19,2],[12,8,19,8,"refHandler"],[12,18,19,18],[12,21,19,21],[12,25,19,21,"useCallback"],[12,43,19,32],[12,45,20,4],[12,55,20,5,"ref"],[12,58,20,32],[12,60,20,37],[13,6,21,6],[13,10,21,10,"ref"],[13,13,21,13],[13,18,21,18],[13,22,21,22],[13,24,21,24],[14,8,22,8],[15,6,23,6],[16,6,25,6,"state"],[16,11,25,11],[16,12,25,12,"viewRef"],[16,19,25,19],[16,22,25,22,"ref"],[16,25,25,25],[18,6,27,6],[19,6,28,6],[19,10,28,10,"state"],[19,15,28,15],[19,16,28,16,"previousViewTag"],[19,31,28,31],[19,36,28,36],[19,37,28,37],[19,38,28,38],[19,40,28,40],[20,8,29,8,"state"],[20,13,29,13],[20,14,29,14,"previousViewTag"],[20,29,29,29],[20,32,29,32],[20,36,29,32,"findNodeHandle"],[20,63,29,46],[20,65,29,47,"state"],[20,70,29,52],[20,71,29,53,"viewRef"],[20,78,29,60],[20,79,29,71],[21,6,30,6],[23,6,32,6],[24,6,33,6],[25,6,34,6],[25,10,34,10],[25,11,34,11,"state"],[25,16,34,16],[25,17,34,17,"firstRender"],[25,28,34,28],[25,30,34,30],[26,8,35,8,"updateAttachedGestures"],[26,30,35,30],[26,31,35,31],[26,35,35,35],[26,36,35,36],[27,6,36,6],[28,6,38,6],[28,10,38,10,"__DEV__"],[28,17,38,17],[28,21,38,21],[28,25,38,21,"isFabric"],[28,55,38,21],[28,56,38,21,"isFabric"],[28,82,38,29],[28,84,38,30],[28,85,38,31],[28,89,38,35,"global"],[28,95,38,41],[28,96,38,42,"isFormsStackingContext"],[28,118,38,64],[28,120,38,66],[29,8,39,8],[29,12,39,14,"node"],[29,16,39,18],[29,19,39,21],[29,23,39,21,"getShadowNodeFromRef"],[29,53,39,21],[29,54,39,21,"getShadowNodeFromRef"],[29,107,39,41],[29,109,39,42,"ref"],[29,112,39,45],[29,113,39,46],[30,8,40,8],[30,12,40,12,"global"],[30,18,40,18],[30,19,40,19,"isFormsStackingContext"],[30,41,40,41],[30,42,40,42,"node"],[30,46,40,46],[30,47,40,47],[30,52,40,52],[30,57,40,57],[30,59,40,59],[31,10,41,10,"console"],[31,17,41,17],[31,18,41,18,"error"],[31,23,41,23],[31,24,42,12],[31,28,42,12,"tagMessage"],[31,58,42,12],[31,59,42,12,"tagMessage"],[31,87,42,22],[31,89,43,14],[31,157,43,82],[31,160,44,16],[31,258,45,12],[31,259,46,10],[31,260,46,11],[32,8,47,8],[33,6,48,6],[34,4,49,4],[34,5,49,5],[34,7,50,4],[34,8,50,5,"state"],[34,13,50,10],[34,15,50,12,"updateAttachedGestures"],[34,37,50,34],[34,38,51,2],[34,39,51,3],[35,4,53,2],[35,11,53,9,"refHandler"],[35,21,53,19],[36,2,54,0],[37,0,54,1],[37,3]],"functionMap":{"names":["<global>","useViewRefHandler","refHandler"],"mappings":"AAA;OCc;ICK;KD6B;CDK"}},"type":"js/module"}]}