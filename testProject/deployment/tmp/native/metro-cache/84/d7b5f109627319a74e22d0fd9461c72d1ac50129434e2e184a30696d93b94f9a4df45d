{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":623,"column":0,"index":17369}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/defineProperty","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":623,"column":0,"index":17369}}],"key":"RY2z4+Bdq4bpTD/1b+1jGPWZdgA="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":623,"column":0,"index":17369}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"escape-string-regexp","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":0,"index":101},"end":{"line":6,"column":42,"index":143}}],"key":"pv3xsw91DuEhfWNv1C6M3srszHc="}},{"name":"query-string","data":{"asyncType":null,"locs":[{"start":{"line":7,"column":0,"index":144},"end":{"line":7,"column":44,"index":188}}],"key":"GFSDDT7dIJnvWSebFhtcKgwXBCQ="}},{"name":"./findFocusedRoute","data":{"asyncType":null,"locs":[{"start":{"line":9,"column":0,"index":190},"end":{"line":9,"column":50,"index":240}}],"key":"9+VFhBOjQcTQeIvNi1xuiiMPBRA="}},{"name":"./validatePathConfig","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":287},"end":{"line":11,"column":54,"index":341}}],"key":"cg7LCOlFjZ3IP0CYIpbP6C+VR6g="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = getStateFromPath;\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _escapeStringRegexp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"escape-string-regexp\"));\n  var queryString = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[4], \"query-string\"));\n  var _findFocusedRoute = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./findFocusedRoute\"));\n  var _validatePathConfig = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./validatePathConfig\"));\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  /**\n   * Utility to parse a path string to initial state object accepted by the container.\n   * This is useful for deep linking when we need to handle the incoming URL.\n   *\n   * @example\n   * ```js\n   * getStateFromPath(\n   *   '/chat/jane/42',\n   *   {\n   *     screens: {\n   *       Chat: {\n   *         path: 'chat/:author/:id',\n   *         parse: { id: Number }\n   *       }\n   *     }\n   *   }\n   * )\n   * ```\n   * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n   * @param options Extra options to fine-tune how to parse the path.\n   */\n  function getStateFromPath(path, options) {\n    var _ref;\n    if (options) {\n      (0, _validatePathConfig.default)(options);\n    }\n    var initialRoutes = [];\n    if (options != null && options.initialRouteName) {\n      initialRoutes.push({\n        initialRouteName: options.initialRouteName,\n        parentScreens: []\n      });\n    }\n    var screens = options == null ? void 0 : options.screens;\n    var remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n    // Make sure there is a trailing slash\n    remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n    if (screens === undefined) {\n      // When no config is specified, use the path segments as route names\n      var _routes = remaining.split('/').filter(Boolean).map(function (segment) {\n        var name = decodeURIComponent(segment);\n        return {\n          name: name\n        };\n      });\n      if (_routes.length) {\n        return createNestedStateObject(path, _routes, initialRoutes);\n      }\n      return undefined;\n    }\n\n    // Create a normalized configs array which will be easier to use\n    var configs = (_ref = []).concat.apply(_ref, (0, _toConsumableArray2.default)(Object.keys(screens).map(function (key) {\n      return _createNormalizedConfigs(key, screens, [], initialRoutes, []);\n    }))).sort(function (a, b) {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n      var aParts = a.pattern.split('/');\n      var bParts = b.pattern.split('/');\n      for (var i = 0; i < Math.max(aParts.length, bParts.length); i++) {\n        // if b is longer, b get higher priority\n        if (aParts[i] == null) {\n          return 1;\n        }\n        // if a is longer, a get higher priority\n        if (bParts[i] == null) {\n          return -1;\n        }\n        var aWildCard = aParts[i] === '*' || aParts[i].startsWith(':');\n        var bWildCard = bParts[i] === '*' || bParts[i].startsWith(':');\n        // if both are wildcard we compare next component\n        if (aWildCard && bWildCard) {\n          continue;\n        }\n        // if only a is wild card, b get higher priority\n        if (aWildCard) {\n          return 1;\n        }\n        // if only b is wild card, a get higher priority\n        if (bWildCard) {\n          return -1;\n        }\n      }\n      return bParts.length - aParts.length;\n    });\n\n    // Check for duplicate patterns in the config\n    configs.reduce(function (acc, config) {\n      if (acc[config.pattern]) {\n        var a = acc[config.pattern].routeNames;\n        var b = config.routeNames;\n\n        // It's not a problem if the path string omitted from a inner most screen\n        // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n        var intersects = a.length > b.length ? b.every(function (it, i) {\n          return a[i] === it;\n        }) : a.every(function (it, i) {\n          return b[i] === it;\n        });\n        if (!intersects) {\n          throw new Error(`Found conflicting screens with the same pattern. The pattern '${config.pattern}' resolves to both '${a.join(' > ')}' and '${b.join(' > ')}'. Patterns must be unique and cannot resolve to more than one screen.`);\n        }\n      }\n      return Object.assign(acc, (0, _defineProperty2.default)({}, config.pattern, config));\n    }, {});\n    if (remaining === '/') {\n      // We need to add special handling of empty path so navigation to empty path also works\n      // When handling empty path, we should only look at the root level config\n      var match = configs.find(function (config) {\n        return config.path === '' && config.routeNames.every(\n        // Make sure that none of the parent configs have a non-empty path defined\n        function (name) {\n          var _configs$find;\n          return !((_configs$find = configs.find(function (c) {\n            return c.screen === name;\n          })) != null && _configs$find.path);\n        });\n      });\n      if (match) {\n        return createNestedStateObject(path, match.routeNames.map(function (name) {\n          return {\n            name: name\n          };\n        }), initialRoutes, configs);\n      }\n      return undefined;\n    }\n    var result;\n    var current;\n\n    // We match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n        return Object.assign({}, c, {\n          // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n          regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n        });\n      })),\n      routes = _matchAgainstConfigs.routes,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routes !== undefined) {\n      // This will always be empty if full path matched\n      current = createNestedStateObject(path, routes, initialRoutes, configs);\n      remaining = remainingPath;\n      result = current;\n    }\n    if (current == null || result == null) {\n      return undefined;\n    }\n    return result;\n  }\n  var joinPaths = function joinPaths() {\n    var _ref2;\n    for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n      paths[_key] = arguments[_key];\n    }\n    return (_ref2 = []).concat.apply(_ref2, (0, _toConsumableArray2.default)(paths.map(function (p) {\n      return p.split('/');\n    }))).filter(Boolean).join('/');\n  };\n  var matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n    var routes;\n    var remainingPath = remaining;\n\n    // Go through all configs, and see if the next path segment matches our regex\n    var _loop = function _loop(config) {\n        if (!config.regex) {\n          return 0; // continue\n        }\n        var match = remainingPath.match(config.regex);\n\n        // If our regex matches, we need to extract params from the path\n        if (match) {\n          var _config$pattern;\n          var matchResult = (_config$pattern = config.pattern) == null ? void 0 : _config$pattern.split('/').reduce(function (acc, p, index) {\n            if (!p.startsWith(':')) {\n              return acc;\n            }\n\n            // Path parameter so increment position for the segment\n            acc.pos += 1;\n            var decodedParamSegment = decodeURIComponent(\n            // The param segments appear every second item starting from 2 in the regex match result\n            match[(acc.pos + 1) * 2]\n            // Remove trailing slash\n            .replace(/\\/$/, ''));\n            Object.assign(acc.matchedParams, (0, _defineProperty2.default)({}, p, Object.assign(acc.matchedParams[p] || {}, (0, _defineProperty2.default)({}, index, decodedParamSegment))));\n            return acc;\n          }, {\n            pos: -1,\n            matchedParams: {}\n          });\n          var matchedParams = matchResult.matchedParams || {};\n          routes = config.routeNames.map(function (name) {\n            var _routeConfig$pattern$;\n            var routeConfig = configs.find(function (c) {\n              // Check matching name AND pattern in case same screen is used at different levels in config\n              return c.screen === name && config.pattern.startsWith(c.pattern);\n            });\n\n            // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n            var normalizedPath = routeConfig == null ? void 0 : routeConfig.path.split('/').filter(Boolean).join('/');\n\n            // Get the number of segments in the initial pattern\n            var numInitialSegments = routeConfig == null || (_routeConfig$pattern$ = routeConfig.pattern\n            // Extract the prefix from the pattern by removing the ending path pattern (e.g pattern=`a/b/c/d` and normalizedPath=`c/d` becomes `a/b`)\n            .replace(new RegExp(`${(0, _escapeStringRegexp.default)(normalizedPath)}$`), '')) == null ? void 0 : _routeConfig$pattern$.split('/').length;\n            var params = normalizedPath == null ? void 0 : normalizedPath.split('/').reduce(function (acc, p, index) {\n              var _matchedParams$p;\n              if (!p.startsWith(':')) {\n                return acc;\n              }\n\n              // Get the real index of the path parameter in the matched path\n              // by offsetting by the number of segments in the initial pattern\n              var offset = numInitialSegments ? numInitialSegments - 1 : 0;\n              var value = (_matchedParams$p = matchedParams[p]) == null ? void 0 : _matchedParams$p[index + offset];\n              if (value) {\n                var _routeConfig$parse;\n                var key = p.replace(/^:/, '').replace(/\\?$/, '');\n                acc[key] = routeConfig != null && (_routeConfig$parse = routeConfig.parse) != null && _routeConfig$parse[key] ? routeConfig.parse[key](value) : value;\n              }\n              return acc;\n            }, {});\n            if (params && Object.keys(params).length) {\n              return {\n                name: name,\n                params: params\n              };\n            }\n            return {\n              name: name\n            };\n          });\n          remainingPath = remainingPath.replace(match[1], '');\n          return 1; // break\n        }\n      },\n      _ret;\n    for (var config of configs) {\n      _ret = _loop(config);\n      if (_ret === 0) continue;\n      if (_ret === 1) break;\n    }\n    return {\n      routes: routes,\n      remainingPath: remainingPath\n    };\n  };\n  var _createNormalizedConfigs = function createNormalizedConfigs(screen, routeConfig) {\n    var routeNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var initials = arguments.length > 3 ? arguments[3] : undefined;\n    var parentScreens = arguments.length > 4 ? arguments[4] : undefined;\n    var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n    var configs = [];\n    routeNames.push(screen);\n    parentScreens.push(screen);\n\n    // @ts-expect-error: we can't strongly typecheck this for now\n    var config = routeConfig[screen];\n    if (typeof config === 'string') {\n      // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n      var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n      configs.push(createConfigItem(screen, routeNames, pattern, config));\n    } else if (typeof config === 'object') {\n      var _pattern;\n\n      // if an object is specified as the value (e.g. Foo: { ... }),\n      // it can have `path` property and\n      // it could have `screens` prop which has nested configs\n      if (typeof config.path === 'string') {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n        configs.push(createConfigItem(screen, routeNames, _pattern, config.path, config.parse));\n      }\n      if (config.screens) {\n        // property `initialRouteName` without `screens` has no purpose\n        if (config.initialRouteName) {\n          initials.push({\n            initialRouteName: config.initialRouteName,\n            parentScreens: parentScreens\n          });\n        }\n        Object.keys(config.screens).forEach(function (nestedConfig) {\n          var _pattern2;\n          var result = _createNormalizedConfigs(nestedConfig, config.screens, routeNames, initials, (0, _toConsumableArray2.default)(parentScreens), (_pattern2 = _pattern) != null ? _pattern2 : parentPattern);\n          configs.push.apply(configs, (0, _toConsumableArray2.default)(result));\n        });\n      }\n    }\n    routeNames.pop();\n    return configs;\n  };\n  var createConfigItem = function createConfigItem(screen, routeNames, pattern, path, parse) {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern = pattern.split('/').filter(Boolean).join('/');\n    var regex = pattern ? new RegExp(`^(${pattern.split('/').map(function (it) {\n      if (it.startsWith(':')) {\n        return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n      }\n      return `${it === '*' ? '.*' : (0, _escapeStringRegexp.default)(it)}\\\\/`;\n    }).join('')})`) : undefined;\n    return {\n      screen: screen,\n      regex: regex,\n      pattern: pattern,\n      path: path,\n      // The routeNames array is mutated, so copy it to keep the current state\n      routeNames: (0, _toConsumableArray2.default)(routeNames),\n      parse: parse\n    };\n  };\n  var findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n    for (var config of flatConfig) {\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n    return undefined;\n  };\n\n  // Try to find an initial route connected with the one passed\n  var findInitialRoute = function findInitialRoute(routeName, parentScreens, initialRoutes) {\n    for (var config of initialRoutes) {\n      if (parentScreens.length === config.parentScreens.length) {\n        var sameParents = true;\n        for (var i = 0; i < parentScreens.length; i++) {\n          if (parentScreens[i].localeCompare(config.parentScreens[i]) !== 0) {\n            sameParents = false;\n            break;\n          }\n        }\n        if (sameParents) {\n          return routeName !== config.initialRouteName ? config.initialRouteName : undefined;\n        }\n      }\n    }\n    return undefined;\n  };\n\n  // returns state object with values depending on whether\n  // it is the end of state and if there is initialRoute for this level\n  var createStateObject = function createStateObject(initialRoute, route, isEmpty) {\n    if (isEmpty) {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, route]\n        };\n      } else {\n        return {\n          routes: [route]\n        };\n      }\n    } else {\n      if (initialRoute) {\n        return {\n          index: 1,\n          routes: [{\n            name: initialRoute\n          }, Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      } else {\n        return {\n          routes: [Object.assign({}, route, {\n            state: {\n              routes: []\n            }\n          })]\n        };\n      }\n    }\n  };\n  var createNestedStateObject = function createNestedStateObject(path, routes, initialRoutes, flatConfig) {\n    var state;\n    var route = routes.shift();\n    var parentScreens = [];\n    var initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n    parentScreens.push(route.name);\n    state = createStateObject(initialRoute, route, routes.length === 0);\n    if (routes.length > 0) {\n      var nestedState = state;\n      while (route = routes.shift()) {\n        initialRoute = findInitialRoute(route.name, parentScreens, initialRoutes);\n        var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n        nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route, routes.length === 0);\n        if (routes.length > 0) {\n          nestedState = nestedState.routes[nestedStateIndex].state;\n        }\n        parentScreens.push(route.name);\n      }\n    }\n    route = (0, _findFocusedRoute.default)(state);\n    route.path = path;\n    var params = parseQueryParams(path, flatConfig ? findParseConfigForRoute(route.name, flatConfig) : undefined);\n    if (params) {\n      route.params = Object.assign({}, route.params, params);\n    }\n    return state;\n  };\n  var parseQueryParams = function parseQueryParams(path, parseConfig) {\n    var query = path.split('?')[1];\n    var params = queryString.parse(query);\n    if (parseConfig) {\n      Object.keys(params).forEach(function (name) {\n        if (Object.hasOwnProperty.call(parseConfig, name) && typeof params[name] === 'string') {\n          params[name] = parseConfig[name](params[name]);\n        }\n      });\n    }\n    return Object.keys(params).length ? params : undefined;\n  };\n});","lineCount":454,"map":[[9,2,6,0],[9,6,6,0,"_escapeStringRegexp"],[9,25,6,0],[9,28,6,0,"_interopRequireDefault"],[9,50,6,0],[9,51,6,0,"_$$_REQUIRE"],[9,62,6,0],[9,63,6,0,"_dependencyMap"],[9,77,6,0],[10,2,7,0],[10,6,7,0,"queryString"],[10,17,7,0],[10,20,7,0,"_interopRequireWildcard"],[10,43,7,0],[10,44,7,0,"_$$_REQUIRE"],[10,55,7,0],[10,56,7,0,"_dependencyMap"],[10,70,7,0],[11,2,9,0],[11,6,9,0,"_findFocusedRoute"],[11,23,9,0],[11,26,9,0,"_interopRequireDefault"],[11,48,9,0],[11,49,9,0,"_$$_REQUIRE"],[11,60,9,0],[11,61,9,0,"_dependencyMap"],[11,75,9,0],[12,2,11,0],[12,6,11,0,"_validatePathConfig"],[12,25,11,0],[12,28,11,0,"_interopRequireDefault"],[12,50,11,0],[12,51,11,0,"_$$_REQUIRE"],[12,62,11,0],[12,63,11,0,"_dependencyMap"],[12,77,11,0],[13,2,11,54],[13,11,11,54,"_getRequireWildcardCache"],[13,36,11,54,"e"],[13,37,11,54],[13,66,11,54,"WeakMap"],[13,73,11,54],[13,92,11,54,"r"],[13,93,11,54],[13,100,11,54,"WeakMap"],[13,107,11,54],[13,111,11,54,"t"],[13,112,11,54],[13,119,11,54,"WeakMap"],[13,126,11,54],[13,138,11,54,"_getRequireWildcardCache"],[13,162,11,54],[13,174,11,54,"_getRequireWildcardCache"],[13,199,11,54,"e"],[13,200,11,54],[13,211,11,54,"e"],[13,212,11,54],[13,215,11,54,"t"],[13,216,11,54],[13,219,11,54,"r"],[13,220,11,54],[13,225,11,54,"e"],[13,226,11,54],[14,2,11,54],[14,11,11,54,"_interopRequireWildcard"],[14,35,11,54,"e"],[14,36,11,54],[14,38,11,54,"r"],[14,39,11,54],[14,48,11,54,"r"],[14,49,11,54],[14,53,11,54,"e"],[14,54,11,54],[14,58,11,54,"e"],[14,59,11,54],[14,60,11,54,"__esModule"],[14,70,11,54],[14,79,11,54,"e"],[14,80,11,54],[14,95,11,54,"e"],[14,96,11,54],[14,119,11,54,"e"],[14,120,11,54],[14,145,11,54,"e"],[14,146,11,54],[14,157,11,54,"default"],[14,164,11,54],[14,166,11,54,"e"],[14,167,11,54],[14,175,11,54,"t"],[14,176,11,54],[14,179,11,54,"_getRequireWildcardCache"],[14,203,11,54],[14,204,11,54,"r"],[14,205,11,54],[14,212,11,54,"t"],[14,213,11,54],[14,217,11,54,"t"],[14,218,11,54],[14,219,11,54,"has"],[14,222,11,54],[14,223,11,54,"e"],[14,224,11,54],[14,234,11,54,"t"],[14,235,11,54],[14,236,11,54,"get"],[14,239,11,54],[14,240,11,54,"e"],[14,241,11,54],[14,248,11,54,"n"],[14,249,11,54],[14,254,11,54,"__proto__"],[14,263,11,54],[14,273,11,54,"a"],[14,274,11,54],[14,277,11,54,"Object"],[14,283,11,54],[14,284,11,54,"defineProperty"],[14,298,11,54],[14,302,11,54,"Object"],[14,308,11,54],[14,309,11,54,"getOwnPropertyDescriptor"],[14,333,11,54],[14,344,11,54,"u"],[14,345,11,54],[14,349,11,54,"e"],[14,350,11,54],[14,370,11,54,"u"],[14,371,11,54],[14,378,11,54,"hasOwnProperty"],[14,392,11,54],[14,393,11,54,"call"],[14,397,11,54],[14,398,11,54,"e"],[14,399,11,54],[14,401,11,54,"u"],[14,402,11,54],[14,411,11,54,"i"],[14,412,11,54],[14,415,11,54,"a"],[14,416,11,54],[14,419,11,54,"Object"],[14,425,11,54],[14,426,11,54,"getOwnPropertyDescriptor"],[14,450,11,54],[14,451,11,54,"e"],[14,452,11,54],[14,454,11,54,"u"],[14,455,11,54],[14,465,11,54,"i"],[14,466,11,54],[14,471,11,54,"i"],[14,472,11,54],[14,473,11,54,"get"],[14,476,11,54],[14,480,11,54,"i"],[14,481,11,54],[14,482,11,54,"set"],[14,485,11,54],[14,489,11,54,"Object"],[14,495,11,54],[14,496,11,54,"defineProperty"],[14,510,11,54],[14,511,11,54,"n"],[14,512,11,54],[14,514,11,54,"u"],[14,515,11,54],[14,517,11,54,"i"],[14,518,11,54],[14,522,11,54,"n"],[14,523,11,54],[14,524,11,54,"u"],[14,525,11,54],[14,529,11,54,"e"],[14,530,11,54],[14,531,11,54,"u"],[14,532,11,54],[14,544,11,54,"n"],[14,545,11,54],[14,546,11,54,"default"],[14,553,11,54],[14,556,11,54,"e"],[14,557,11,54],[14,559,11,54,"t"],[14,560,11,54],[14,564,11,54,"t"],[14,565,11,54],[14,566,11,54,"set"],[14,569,11,54],[14,570,11,54,"e"],[14,571,11,54],[14,573,11,54,"n"],[14,574,11,54],[14,577,11,54,"n"],[14,578,11,54],[15,2,44,0],[16,0,45,0],[17,0,46,0],[18,0,47,0],[19,0,48,0],[20,0,49,0],[21,0,50,0],[22,0,51,0],[23,0,52,0],[24,0,53,0],[25,0,54,0],[26,0,55,0],[27,0,56,0],[28,0,57,0],[29,0,58,0],[30,0,59,0],[31,0,60,0],[32,0,61,0],[33,0,62,0],[34,0,63,0],[35,0,64,0],[36,2,65,15],[36,11,65,24,"getStateFromPath"],[36,27,65,40,"getStateFromPath"],[36,28,66,2,"path"],[36,32,66,14],[36,34,67,2,"options"],[36,41,67,30],[36,43,68,27],[37,4,68,27],[37,8,68,27,"_ref"],[37,12,68,27],[38,4,69,2],[38,8,69,6,"options"],[38,15,69,13],[38,17,69,15],[39,6,70,4],[39,10,70,4,"validatePathConfig"],[39,37,70,22],[39,39,70,23,"options"],[39,46,70,30],[39,47,70,31],[40,4,71,2],[41,4,73,2],[41,8,73,6,"initialRoutes"],[41,21,73,41],[41,24,73,44],[41,26,73,46],[42,4,75,2],[42,8,75,6,"options"],[42,15,75,13],[42,27,75,6,"options"],[42,34,75,13],[42,35,75,15,"initialRouteName"],[42,51,75,31],[42,53,75,33],[43,6,76,4,"initialRoutes"],[43,19,76,17],[43,20,76,18,"push"],[43,24,76,22],[43,25,76,23],[44,8,77,6,"initialRouteName"],[44,24,77,22],[44,26,77,24,"options"],[44,33,77,31],[44,34,77,32,"initialRouteName"],[44,50,77,48],[45,8,78,6,"parentScreens"],[45,21,78,19],[45,23,78,21],[46,6,79,4],[46,7,79,5],[46,8,79,6],[47,4,80,2],[48,4,82,2],[48,8,82,8,"screens"],[48,15,82,15],[48,18,82,18,"options"],[48,25,82,25],[48,45,82,18,"options"],[48,52,82,25],[48,53,82,27,"screens"],[48,60,82,34],[49,4,84,2],[49,8,84,6,"remaining"],[49,17,84,15],[49,20,84,18,"path"],[49,24,84,22],[49,25,85,5,"replace"],[49,32,85,12],[49,33,85,13],[49,39,85,19],[49,41,85,21],[49,44,85,24],[49,45,85,25],[49,46,85,26],[50,4,85,26],[50,5,86,5,"replace"],[50,12,86,12],[50,13,86,13],[50,18,86,18],[50,20,86,20],[50,22,86,22],[50,23,86,23],[50,24,86,24],[51,4,86,24],[51,5,87,5,"replace"],[51,12,87,12],[51,13,87,13],[51,20,87,20],[51,22,87,22],[51,24,87,24],[51,25,87,25],[51,26,87,26],[51,27,87,27],[53,4,89,2],[54,4,90,2,"remaining"],[54,13,90,11],[54,16,90,14,"remaining"],[54,25,90,23],[54,26,90,24,"endsWith"],[54,34,90,32],[54,35,90,33],[54,38,90,36],[54,39,90,37],[54,42,90,40,"remaining"],[54,51,90,49],[54,54,90,52],[54,57,90,55,"remaining"],[54,66,90,64],[54,69,90,67],[55,4,92,2],[55,8,92,6,"screens"],[55,15,92,13],[55,20,92,18,"undefined"],[55,29,92,27],[55,31,92,29],[56,6,93,4],[57,6,94,4],[57,10,94,10,"routes"],[57,17,94,16],[57,20,94,19,"remaining"],[57,29,94,28],[57,30,95,7,"split"],[57,35,95,12],[57,36,95,13],[57,39,95,16],[57,40,95,17],[57,41,96,7,"filter"],[57,47,96,13],[57,48,96,14,"Boolean"],[57,55,96,21],[57,56,96,22],[57,57,97,7,"map"],[57,60,97,10],[57,61,97,11],[57,71,97,12,"segment"],[57,78,97,19],[57,80,97,24],[58,8,98,8],[58,12,98,14,"name"],[58,16,98,18],[58,19,98,21,"decodeURIComponent"],[58,37,98,39],[58,38,98,40,"segment"],[58,45,98,47],[58,46,98,48],[59,8,99,8],[59,15,99,15],[60,10,99,17,"name"],[60,14,99,21],[60,16,99,17,"name"],[61,8,99,22],[61,9,99,23],[62,6,100,6],[62,7,100,7],[62,8,100,8],[63,6,102,4],[63,10,102,8,"routes"],[63,17,102,14],[63,18,102,15,"length"],[63,24,102,21],[63,26,102,23],[64,8,103,6],[64,15,103,13,"createNestedStateObject"],[64,38,103,36],[64,39,103,37,"path"],[64,43,103,41],[64,45,103,43,"routes"],[64,52,103,49],[64,54,103,51,"initialRoutes"],[64,67,103,64],[64,68,103,65],[65,6,104,4],[66,6,106,4],[66,13,106,11,"undefined"],[66,22,106,20],[67,4,107,2],[69,4,109,2],[70,4,110,2],[70,8,110,8,"configs"],[70,15,110,15],[70,18,110,18],[70,19,110,18,"_ref"],[70,23,110,18],[70,26,110,19],[70,28,110,21],[70,30,111,5,"concat"],[70,36,111,11],[70,37,111,11,"apply"],[70,42,111,11],[70,43,111,11,"_ref"],[70,47,111,11],[70,53,111,11,"_toConsumableArray2"],[70,72,111,11],[70,73,111,11,"default"],[70,80,111,11],[70,82,112,9,"Object"],[70,88,112,15],[70,89,112,16,"keys"],[70,93,112,20],[70,94,112,21,"screens"],[70,101,112,28],[70,102,112,29],[70,103,112,30,"map"],[70,106,112,33],[70,107,112,34],[70,117,112,35,"key"],[70,120,112,38],[71,6,112,38],[71,13,113,8,"createNormalizedConfigs"],[71,37,113,31],[71,38,114,10,"key"],[71,41,114,13],[71,43,115,10,"screens"],[71,50,115,17],[71,52,116,10],[71,54,116,12],[71,56,117,10,"initialRoutes"],[71,69,117,23],[71,71,118,10],[71,73,119,8],[71,74,119,9],[72,4,119,9],[72,5,120,6],[72,6,120,7],[72,7,121,4],[72,8,121,5],[72,9,122,5,"sort"],[72,13,122,9],[72,14,122,10],[72,24,122,11,"a"],[72,25,122,12],[72,27,122,14,"b"],[72,28,122,15],[72,30,122,20],[73,6,123,6],[74,6,124,6],[75,6,125,6],[77,6,127,6],[78,6,128,6],[79,6,129,6],[79,10,129,10,"a"],[79,11,129,11],[79,12,129,12,"pattern"],[79,19,129,19],[79,24,129,24,"b"],[79,25,129,25],[79,26,129,26,"pattern"],[79,33,129,33],[79,35,129,35],[80,8,130,8],[80,15,130,15,"b"],[80,16,130,16],[80,17,130,17,"routeNames"],[80,27,130,27],[80,28,130,28,"join"],[80,32,130,32],[80,33,130,33],[80,36,130,36],[80,37,130,37],[80,38,130,38,"localeCompare"],[80,51,130,51],[80,52,130,52,"a"],[80,53,130,53],[80,54,130,54,"routeNames"],[80,64,130,64],[80,65,130,65,"join"],[80,69,130,69],[80,70,130,70],[80,73,130,73],[80,74,130,74],[80,75,130,75],[81,6,131,6],[83,6,133,6],[84,6,134,6],[85,6,135,6],[85,10,135,10,"a"],[85,11,135,11],[85,12,135,12,"pattern"],[85,19,135,19],[85,20,135,20,"startsWith"],[85,30,135,30],[85,31,135,31,"b"],[85,32,135,32],[85,33,135,33,"pattern"],[85,40,135,40],[85,41,135,41],[85,43,135,43],[86,8,136,8],[86,15,136,15],[86,16,136,16],[86,17,136,17],[87,6,137,6],[88,6,139,6],[88,10,139,10,"b"],[88,11,139,11],[88,12,139,12,"pattern"],[88,19,139,19],[88,20,139,20,"startsWith"],[88,30,139,30],[88,31,139,31,"a"],[88,32,139,32],[88,33,139,33,"pattern"],[88,40,139,40],[88,41,139,41],[88,43,139,43],[89,8,140,8],[89,15,140,15],[89,16,140,16],[90,6,141,6],[91,6,143,6],[91,10,143,12,"aParts"],[91,16,143,18],[91,19,143,21,"a"],[91,20,143,22],[91,21,143,23,"pattern"],[91,28,143,30],[91,29,143,31,"split"],[91,34,143,36],[91,35,143,37],[91,38,143,40],[91,39,143,41],[92,6,144,6],[92,10,144,12,"bParts"],[92,16,144,18],[92,19,144,21,"b"],[92,20,144,22],[92,21,144,23,"pattern"],[92,28,144,30],[92,29,144,31,"split"],[92,34,144,36],[92,35,144,37],[92,38,144,40],[92,39,144,41],[93,6,146,6],[93,11,146,11],[93,15,146,15,"i"],[93,16,146,16],[93,19,146,19],[93,20,146,20],[93,22,146,22,"i"],[93,23,146,23],[93,26,146,26,"Math"],[93,30,146,30],[93,31,146,31,"max"],[93,34,146,34],[93,35,146,35,"aParts"],[93,41,146,41],[93,42,146,42,"length"],[93,48,146,48],[93,50,146,50,"bParts"],[93,56,146,56],[93,57,146,57,"length"],[93,63,146,63],[93,64,146,64],[93,66,146,66,"i"],[93,67,146,67],[93,69,146,69],[93,71,146,71],[94,8,147,8],[95,8,148,8],[95,12,148,12,"aParts"],[95,18,148,18],[95,19,148,19,"i"],[95,20,148,20],[95,21,148,21],[95,25,148,25],[95,29,148,29],[95,31,148,31],[96,10,149,10],[96,17,149,17],[96,18,149,18],[97,8,150,8],[98,8,151,8],[99,8,152,8],[99,12,152,12,"bParts"],[99,18,152,18],[99,19,152,19,"i"],[99,20,152,20],[99,21,152,21],[99,25,152,25],[99,29,152,29],[99,31,152,31],[100,10,153,10],[100,17,153,17],[100,18,153,18],[100,19,153,19],[101,8,154,8],[102,8,155,8],[102,12,155,14,"aWildCard"],[102,21,155,23],[102,24,155,26,"aParts"],[102,30,155,32],[102,31,155,33,"i"],[102,32,155,34],[102,33,155,35],[102,38,155,40],[102,41,155,43],[102,45,155,47,"aParts"],[102,51,155,53],[102,52,155,54,"i"],[102,53,155,55],[102,54,155,56],[102,55,155,57,"startsWith"],[102,65,155,67],[102,66,155,68],[102,69,155,71],[102,70,155,72],[103,8,156,8],[103,12,156,14,"bWildCard"],[103,21,156,23],[103,24,156,26,"bParts"],[103,30,156,32],[103,31,156,33,"i"],[103,32,156,34],[103,33,156,35],[103,38,156,40],[103,41,156,43],[103,45,156,47,"bParts"],[103,51,156,53],[103,52,156,54,"i"],[103,53,156,55],[103,54,156,56],[103,55,156,57,"startsWith"],[103,65,156,67],[103,66,156,68],[103,69,156,71],[103,70,156,72],[104,8,157,8],[105,8,158,8],[105,12,158,12,"aWildCard"],[105,21,158,21],[105,25,158,25,"bWildCard"],[105,34,158,34],[105,36,158,36],[106,10,159,10],[107,8,160,8],[108,8,161,8],[109,8,162,8],[109,12,162,12,"aWildCard"],[109,21,162,21],[109,23,162,23],[110,10,163,10],[110,17,163,17],[110,18,163,18],[111,8,164,8],[112,8,165,8],[113,8,166,8],[113,12,166,12,"bWildCard"],[113,21,166,21],[113,23,166,23],[114,10,167,10],[114,17,167,17],[114,18,167,18],[114,19,167,19],[115,8,168,8],[116,6,169,6],[117,6,170,6],[117,13,170,13,"bParts"],[117,19,170,19],[117,20,170,20,"length"],[117,26,170,26],[117,29,170,29,"aParts"],[117,35,170,35],[117,36,170,36,"length"],[117,42,170,42],[118,4,171,4],[118,5,171,5],[118,6,171,6],[120,4,173,2],[121,4,174,2,"configs"],[121,11,174,9],[121,12,174,10,"reduce"],[121,18,174,16],[121,19,174,46],[121,29,174,47,"acc"],[121,32,174,50],[121,34,174,52,"config"],[121,40,174,58],[121,42,174,63],[122,6,175,4],[122,10,175,8,"acc"],[122,13,175,11],[122,14,175,12,"config"],[122,20,175,18],[122,21,175,19,"pattern"],[122,28,175,26],[122,29,175,27],[122,31,175,29],[123,8,176,6],[123,12,176,12,"a"],[123,13,176,13],[123,16,176,16,"acc"],[123,19,176,19],[123,20,176,20,"config"],[123,26,176,26],[123,27,176,27,"pattern"],[123,34,176,34],[123,35,176,35],[123,36,176,36,"routeNames"],[123,46,176,46],[124,8,177,6],[124,12,177,12,"b"],[124,13,177,13],[124,16,177,16,"config"],[124,22,177,22],[124,23,177,23,"routeNames"],[124,33,177,33],[126,8,179,6],[127,8,180,6],[128,8,181,6],[128,12,181,12,"intersects"],[128,22,181,22],[128,25,182,8,"a"],[128,26,182,9],[128,27,182,10,"length"],[128,33,182,16],[128,36,182,19,"b"],[128,37,182,20],[128,38,182,21,"length"],[128,44,182,27],[128,47,183,12,"b"],[128,48,183,13],[128,49,183,14,"every"],[128,54,183,19],[128,55,183,20],[128,65,183,21,"it"],[128,67,183,23],[128,69,183,25,"i"],[128,70,183,26],[129,10,183,26],[129,17,183,31,"a"],[129,18,183,32],[129,19,183,33,"i"],[129,20,183,34],[129,21,183,35],[129,26,183,40,"it"],[129,28,183,42],[130,8,183,42],[130,10,183,43],[130,13,184,12,"a"],[130,14,184,13],[130,15,184,14,"every"],[130,20,184,19],[130,21,184,20],[130,31,184,21,"it"],[130,33,184,23],[130,35,184,25,"i"],[130,36,184,26],[131,10,184,26],[131,17,184,31,"b"],[131,18,184,32],[131,19,184,33,"i"],[131,20,184,34],[131,21,184,35],[131,26,184,40,"it"],[131,28,184,42],[132,8,184,42],[132,10,184,43],[133,8,186,6],[133,12,186,10],[133,13,186,11,"intersects"],[133,23,186,21],[133,25,186,23],[134,10,187,8],[134,16,187,14],[134,20,187,18,"Error"],[134,25,187,23],[134,26,188,10],[134,91,189,12,"config"],[134,97,189,18],[134,98,189,19,"pattern"],[134,105,189,26],[134,128,190,33,"a"],[134,129,190,34],[134,130,190,35,"join"],[134,134,190,39],[134,135,190,40],[134,140,190,45],[134,141,190,46],[134,151,190,56,"b"],[134,152,190,57],[134,153,190,58,"join"],[134,157,190,62],[134,158,191,12],[134,163,192,10],[134,164,192,11],[134,236,193,8],[134,237,193,9],[135,8,194,6],[136,6,195,4],[137,6,197,4],[137,13,197,11,"Object"],[137,19,197,17],[137,20,197,18,"assign"],[137,26,197,24],[137,27,197,25,"acc"],[137,30,197,28],[137,36,197,28,"_defineProperty2"],[137,52,197,28],[137,53,197,28,"default"],[137,60,197,28],[137,66,198,7,"config"],[137,72,198,13],[137,73,198,14,"pattern"],[137,80,198,21],[137,82,198,24,"config"],[137,88,198,30],[137,89,199,5],[137,90,199,6],[138,4,200,2],[138,5,200,3],[138,7,200,5],[138,8,200,6],[138,9,200,7],[138,10,200,8],[139,4,202,2],[139,8,202,6,"remaining"],[139,17,202,15],[139,22,202,20],[139,25,202,23],[139,27,202,25],[140,6,203,4],[141,6,204,4],[142,6,205,4],[142,10,205,10,"match"],[142,15,205,15],[142,18,205,18,"configs"],[142,25,205,25],[142,26,205,26,"find"],[142,30,205,30],[142,31,206,6],[142,41,206,7,"config"],[142,47,206,13],[143,8,206,13],[143,15,207,8,"config"],[143,21,207,14],[143,22,207,15,"path"],[143,26,207,19],[143,31,207,24],[143,33,207,26],[143,37,208,8,"config"],[143,43,208,14],[143,44,208,15,"routeNames"],[143,54,208,25],[143,55,208,26,"every"],[143,60,208,31],[144,8,209,10],[145,8,210,10],[145,18,210,11,"name"],[145,22,210,15],[146,10,210,15],[146,14,210,15,"_configs$find"],[146,27,210,15],[147,10,210,15],[147,17,210,20],[147,20,210,20,"_configs$find"],[147,33,210,20],[147,36,210,21,"configs"],[147,43,210,28],[147,44,210,29,"find"],[147,48,210,33],[147,49,210,34],[147,59,210,35,"c"],[147,60,210,36],[148,12,210,36],[148,19,210,41,"c"],[148,20,210,42],[148,21,210,43,"screen"],[148,27,210,49],[148,32,210,54,"name"],[148,36,210,58],[149,10,210,58],[149,12,210,59],[149,25,210,21,"_configs$find"],[149,38,210,21],[149,39,210,61,"path"],[149,43,210,65],[150,8,210,65],[150,9,211,8],[150,10,211,9],[151,6,211,9],[151,7,212,4],[151,8,212,5],[152,6,214,4],[152,10,214,8,"match"],[152,15,214,13],[152,17,214,15],[153,8,215,6],[153,15,215,13,"createNestedStateObject"],[153,38,215,36],[153,39,216,8,"path"],[153,43,216,12],[153,45,217,8,"match"],[153,50,217,13],[153,51,217,14,"routeNames"],[153,61,217,24],[153,62,217,25,"map"],[153,65,217,28],[153,66,217,29],[153,76,217,30,"name"],[153,80,217,34],[154,10,217,34],[154,17,217,40],[155,12,217,42,"name"],[155,16,217,46],[155,18,217,42,"name"],[156,10,217,47],[156,11,217,48],[157,8,217,48],[157,9,217,49],[157,10,217,50],[157,12,218,8,"initialRoutes"],[157,25,218,21],[157,27,219,8,"configs"],[157,34,220,6],[157,35,220,7],[158,6,221,4],[159,6,223,4],[159,13,223,11,"undefined"],[159,22,223,20],[160,4,224,2],[161,4,226,2],[161,8,226,6,"result"],[161,14,226,55],[162,4,227,2],[162,8,227,6,"current"],[162,15,227,56],[164,4,229,2],[165,4,230,2],[166,4,231,2],[166,8,231,2,"_matchAgainstConfigs"],[166,28,231,2],[166,31,231,36,"matchAgainstConfigs"],[166,50,231,55],[166,51,232,4,"remaining"],[166,60,232,13],[166,62,233,4,"configs"],[166,69,233,11],[166,70,233,12,"map"],[166,73,233,15],[166,74,233,16],[166,84,233,17,"c"],[166,85,233,18],[167,8,233,18],[167,15,233,18,"Object"],[167,21,233,18],[167,22,233,18,"assign"],[167,28,233,18],[167,33,234,9,"c"],[167,34,234,10],[168,10,235,6],[169,10,236,6,"regex"],[169,15,236,11],[169,17,236,13,"c"],[169,18,236,14],[169,19,236,15,"regex"],[169,24,236,20],[169,27,236,23],[169,31,236,27,"RegExp"],[169,37,236,33],[169,38,236,34,"c"],[169,39,236,35],[169,40,236,36,"regex"],[169,45,236,41],[169,46,236,42,"source"],[169,52,236,48],[169,55,236,51],[169,58,236,54],[169,59,236,55],[169,62,236,58,"undefined"],[170,8,236,67],[171,6,236,67],[171,7,237,6],[171,8,238,2],[171,9,238,3],[172,6,231,10,"routes"],[172,12,231,16],[172,15,231,16,"_matchAgainstConfigs"],[172,35,231,16],[172,36,231,10,"routes"],[172,42,231,16],[173,6,231,18,"remainingPath"],[173,19,231,31],[173,22,231,31,"_matchAgainstConfigs"],[173,42,231,31],[173,43,231,18,"remainingPath"],[173,56,231,31],[174,4,240,2],[174,8,240,6,"routes"],[174,14,240,12],[174,19,240,17,"undefined"],[174,28,240,26],[174,30,240,28],[175,6,241,4],[176,6,242,4,"current"],[176,13,242,11],[176,16,242,14,"createNestedStateObject"],[176,39,242,37],[176,40,242,38,"path"],[176,44,242,42],[176,46,242,44,"routes"],[176,52,242,50],[176,54,242,52,"initialRoutes"],[176,67,242,65],[176,69,242,67,"configs"],[176,76,242,74],[176,77,242,75],[177,6,243,4,"remaining"],[177,15,243,13],[177,18,243,16,"remainingPath"],[177,31,243,29],[178,6,244,4,"result"],[178,12,244,10],[178,15,244,13,"current"],[178,22,244,20],[179,4,245,2],[180,4,247,2],[180,8,247,6,"current"],[180,15,247,13],[180,19,247,17],[180,23,247,21],[180,27,247,25,"result"],[180,33,247,31],[180,37,247,35],[180,41,247,39],[180,43,247,41],[181,6,248,4],[181,13,248,11,"undefined"],[181,22,248,20],[182,4,249,2],[183,4,251,2],[183,11,251,9,"result"],[183,17,251,15],[184,2,252,0],[185,2,254,0],[185,6,254,6,"joinPaths"],[185,15,254,15],[185,18,254,18],[185,27,254,6,"joinPaths"],[185,36,254,15,"joinPaths"],[185,37,254,15],[186,4,254,15],[186,8,254,15,"_ref2"],[186,13,254,15],[187,4,254,15],[187,13,254,15,"_len"],[187,17,254,15],[187,20,254,15,"arguments"],[187,29,254,15],[187,30,254,15,"length"],[187,36,254,15],[187,38,254,22,"paths"],[187,43,254,27],[187,50,254,27,"Array"],[187,55,254,27],[187,56,254,27,"_len"],[187,60,254,27],[187,63,254,27,"_key"],[187,67,254,27],[187,73,254,27,"_key"],[187,77,254,27],[187,80,254,27,"_len"],[187,84,254,27],[187,86,254,27,"_key"],[187,90,254,27],[188,6,254,22,"paths"],[188,11,254,27],[188,12,254,27,"_key"],[188,16,254,27],[188,20,254,27,"arguments"],[188,29,254,27],[188,30,254,27,"_key"],[188,34,254,27],[189,4,254,27],[190,4,254,27],[190,11,255,2],[190,12,255,2,"_ref2"],[190,17,255,2],[190,20,255,3],[190,22,255,5],[190,24,256,5,"concat"],[190,30,256,11],[190,31,256,11,"apply"],[190,36,256,11],[190,37,256,11,"_ref2"],[190,42,256,11],[190,48,256,11,"_toConsumableArray2"],[190,67,256,11],[190,68,256,11,"default"],[190,75,256,11],[190,77,256,15,"paths"],[190,82,256,20],[190,83,256,21,"map"],[190,86,256,24],[190,87,256,25],[190,97,256,26,"p"],[190,98,256,27],[191,6,256,27],[191,13,256,32,"p"],[191,14,256,33],[191,15,256,34,"split"],[191,20,256,39],[191,21,256,40],[191,24,256,43],[191,25,256,44],[192,4,256,44],[192,6,256,45],[192,8,256,46],[192,9,257,5,"filter"],[192,15,257,11],[192,16,257,12,"Boolean"],[192,23,257,19],[192,24,257,20],[192,25,258,5,"join"],[192,29,258,9],[192,30,258,10],[192,33,258,13],[192,34,258,14],[193,2,258,14],[194,2,260,0],[194,6,260,6,"matchAgainstConfigs"],[194,25,260,25],[194,28,260,28],[194,37,260,6,"matchAgainstConfigs"],[194,56,260,25,"matchAgainstConfigs"],[194,57,260,29,"remaining"],[194,66,260,46],[194,68,260,48,"configs"],[194,75,260,70],[194,77,260,75],[195,4,261,2],[195,8,261,6,"routes"],[195,14,261,39],[196,4,262,2],[196,8,262,6,"remainingPath"],[196,21,262,19],[196,24,262,22,"remaining"],[196,33,262,31],[198,4,264,2],[199,4,264,2],[199,8,264,2,"_loop"],[199,13,264,2],[199,25,264,2,"_loop"],[199,31,264,2,"config"],[199,37,264,2],[199,39,265,32],[200,8,266,4],[200,12,266,8],[200,13,266,9,"config"],[200,19,266,15],[200,20,266,16,"regex"],[200,25,266,21],[200,27,266,23],[201,10,266,23],[202,8,268,4],[203,8,270,4],[203,12,270,10,"match"],[203,17,270,15],[203,20,270,18,"remainingPath"],[203,33,270,31],[203,34,270,32,"match"],[203,39,270,37],[203,40,270,38,"config"],[203,46,270,44],[203,47,270,45,"regex"],[203,52,270,50],[203,53,270,51],[205,8,272,4],[206,8,273,4],[206,12,273,8,"match"],[206,17,273,13],[206,19,273,15],[207,10,273,15],[207,14,273,15,"_config$pattern"],[207,29,273,15],[208,10,274,6],[208,14,274,12,"matchResult"],[208,25,274,23],[208,29,274,23,"_config$pattern"],[208,44,274,23],[208,47,274,26,"config"],[208,53,274,32],[208,54,274,33,"pattern"],[208,61,274,40],[208,82,274,26,"_config$pattern"],[208,97,274,26],[208,98,274,42,"split"],[208,103,274,47],[208,104,274,48],[208,107,274,51],[208,108,274,52],[208,109,274,53,"reduce"],[208,115,274,59],[208,116,278,8],[208,126,278,9,"acc"],[208,129,278,12],[208,131,278,14,"p"],[208,132,278,15],[208,134,278,17,"index"],[208,139,278,22],[208,141,278,27],[209,12,279,10],[209,16,279,14],[209,17,279,15,"p"],[209,18,279,16],[209,19,279,17,"startsWith"],[209,29,279,27],[209,30,279,28],[209,33,279,31],[209,34,279,32],[209,36,279,34],[210,14,280,12],[210,21,280,19,"acc"],[210,24,280,22],[211,12,281,10],[213,12,283,10],[214,12,284,10,"acc"],[214,15,284,13],[214,16,284,14,"pos"],[214,19,284,17],[214,23,284,21],[214,24,284,22],[215,12,286,10],[215,16,286,16,"decodedParamSegment"],[215,35,286,35],[215,38,286,38,"decodeURIComponent"],[215,56,286,56],[216,12,287,12],[217,12,288,12,"match"],[217,17,288,17],[217,18,288,19],[217,19,288,20,"acc"],[217,22,288,23],[217,23,288,24,"pos"],[217,26,288,27],[217,29,288,30],[217,30,288,31],[217,34,288,35],[217,35,288,36],[218,12,289,14],[219,12,289,14],[219,13,290,15,"replace"],[219,20,290,22],[219,21,290,23],[219,26,290,28],[219,28,290,30],[219,30,290,32],[219,31,291,10],[219,32,291,11],[220,12,293,10,"Object"],[220,18,293,16],[220,19,293,17,"assign"],[220,25,293,23],[220,26,293,24,"acc"],[220,29,293,27],[220,30,293,28,"matchedParams"],[220,43,293,41],[220,49,293,41,"_defineProperty2"],[220,65,293,41],[220,66,293,41,"default"],[220,73,293,41],[220,79,294,13,"p"],[220,80,294,14],[220,82,294,17,"Object"],[220,88,294,23],[220,89,294,24,"assign"],[220,95,294,30],[220,96,294,31,"acc"],[220,99,294,34],[220,100,294,35,"matchedParams"],[220,113,294,48],[220,114,294,49,"p"],[220,115,294,50],[220,116,294,51],[220,120,294,55],[220,121,294,56],[220,122,294,57],[220,128,294,57,"_defineProperty2"],[220,144,294,57],[220,145,294,57,"default"],[220,152,294,57],[220,158,295,15,"index"],[220,163,295,20],[220,165,295,23,"decodedParamSegment"],[220,184,295,42],[220,185,296,13],[220,186,296,14],[220,187,297,11],[220,188,297,12],[221,12,299,10],[221,19,299,17,"acc"],[221,22,299,20],[222,10,300,8],[222,11,300,9],[222,13,301,8],[223,12,301,10,"pos"],[223,15,301,13],[223,17,301,15],[223,18,301,16],[223,19,301,17],[224,12,301,19,"matchedParams"],[224,25,301,32],[224,27,301,34],[224,28,301,35],[225,10,301,37],[225,11,302,6],[225,12,302,7],[226,10,304,6],[226,14,304,12,"matchedParams"],[226,27,304,25],[226,30,304,28,"matchResult"],[226,41,304,39],[226,42,304,40,"matchedParams"],[226,55,304,53],[226,59,304,57],[226,60,304,58],[226,61,304,59],[227,10,306,6,"routes"],[227,16,306,12],[227,19,306,15,"config"],[227,25,306,21],[227,26,306,22,"routeNames"],[227,36,306,32],[227,37,306,33,"map"],[227,40,306,36],[227,41,306,37],[227,51,306,38,"name"],[227,55,306,42],[227,57,306,47],[228,12,306,47],[228,16,306,47,"_routeConfig$pattern$"],[228,37,306,47],[229,12,307,8],[229,16,307,14,"routeConfig"],[229,27,307,25],[229,30,307,28,"configs"],[229,37,307,35],[229,38,307,36,"find"],[229,42,307,40],[229,43,307,41],[229,53,307,42,"c"],[229,54,307,43],[229,56,307,48],[230,14,308,10],[231,14,309,10],[231,21,309,17,"c"],[231,22,309,18],[231,23,309,19,"screen"],[231,29,309,25],[231,34,309,30,"name"],[231,38,309,34],[231,42,309,38,"config"],[231,48,309,44],[231,49,309,45,"pattern"],[231,56,309,52],[231,57,309,53,"startsWith"],[231,67,309,63],[231,68,309,64,"c"],[231,69,309,65],[231,70,309,66,"pattern"],[231,77,309,73],[231,78,309,74],[232,12,310,8],[232,13,310,9],[232,14,310,10],[234,12,312,8],[235,12,313,8],[235,16,313,14,"normalizedPath"],[235,30,313,28],[235,33,313,31,"routeConfig"],[235,44,313,42],[235,64,313,31,"routeConfig"],[235,75,313,42],[235,76,313,44,"path"],[235,80,313,48],[235,81,314,11,"split"],[235,86,314,16],[235,87,314,17],[235,90,314,20],[235,91,314,21],[235,92,315,11,"filter"],[235,98,315,17],[235,99,315,18,"Boolean"],[235,106,315,25],[235,107,315,26],[235,108,316,11,"join"],[235,112,316,15],[235,113,316,16],[235,116,316,19],[235,117,316,20],[237,12,318,8],[238,12,319,8],[238,16,319,14,"numInitialSegments"],[238,34,319,32],[238,37,319,35,"routeConfig"],[238,48,319,46],[238,61,319,46,"_routeConfig$pattern$"],[238,82,319,46],[238,85,319,35,"routeConfig"],[238,96,319,46],[238,97,319,48,"pattern"],[239,12,320,10],[240,12,320,10],[240,13,321,11,"replace"],[240,20,321,18],[240,21,321,19],[240,25,321,23,"RegExp"],[240,31,321,29],[240,32,321,30],[240,35,321,33],[240,39,321,33,"escape"],[240,66,321,39],[240,68,321,40,"normalizedPath"],[240,82,321,55],[240,83,321,56],[240,86,321,59],[240,87,321,60],[240,89,321,62],[240,91,321,64],[240,92,321,65],[240,113,319,35,"_routeConfig$pattern$"],[240,134,319,35],[240,135,322,12,"split"],[240,140,322,17],[240,141,322,18],[240,144,322,21],[240,145,322,22],[240,146,322,23,"length"],[240,152,322,29],[241,12,324,8],[241,16,324,14,"params"],[241,22,324,20],[241,25,324,23,"normalizedPath"],[241,39,324,37],[241,59,324,23,"normalizedPath"],[241,73,324,37],[241,74,325,12,"split"],[241,79,325,17],[241,80,325,18],[241,83,325,21],[241,84,325,22],[241,85,326,11,"reduce"],[241,91,326,17],[241,92,326,43],[241,102,326,44,"acc"],[241,105,326,47],[241,107,326,49,"p"],[241,108,326,50],[241,110,326,52,"index"],[241,115,326,57],[241,117,326,62],[242,14,326,62],[242,18,326,62,"_matchedParams$p"],[242,34,326,62],[243,14,327,12],[243,18,327,16],[243,19,327,17,"p"],[243,20,327,18],[243,21,327,19,"startsWith"],[243,31,327,29],[243,32,327,30],[243,35,327,33],[243,36,327,34],[243,38,327,36],[244,16,328,14],[244,23,328,21,"acc"],[244,26,328,24],[245,14,329,12],[247,14,331,12],[248,14,332,12],[249,14,333,12],[249,18,333,18,"offset"],[249,24,333,24],[249,27,333,27,"numInitialSegments"],[249,45,333,45],[249,48,333,48,"numInitialSegments"],[249,66,333,66],[249,69,333,69],[249,70,333,70],[249,73,333,73],[249,74,333,74],[250,14,334,12],[250,18,334,18,"value"],[250,23,334,23],[250,27,334,23,"_matchedParams$p"],[250,43,334,23],[250,46,334,26,"matchedParams"],[250,59,334,39],[250,60,334,40,"p"],[250,61,334,41],[250,62,334,42],[250,83,334,26,"_matchedParams$p"],[250,99,334,26],[250,100,334,45,"index"],[250,105,334,50],[250,108,334,53,"offset"],[250,114,334,59],[250,115,334,60],[251,14,336,12],[251,18,336,16,"value"],[251,23,336,21],[251,25,336,23],[252,16,336,23],[252,20,336,23,"_routeConfig$parse"],[252,38,336,23],[253,16,337,14],[253,20,337,20,"key"],[253,23,337,23],[253,26,337,26,"p"],[253,27,337,27],[253,28,337,28,"replace"],[253,35,337,35],[253,36,337,36],[253,40,337,40],[253,42,337,42],[253,44,337,44],[253,45,337,45],[253,46,337,46,"replace"],[253,53,337,53],[253,54,337,54],[253,59,337,59],[253,61,337,61],[253,63,337,63],[253,64,337,64],[254,16,338,14,"acc"],[254,19,338,17],[254,20,338,18,"key"],[254,23,338,21],[254,24,338,22],[254,27,338,25,"routeConfig"],[254,38,338,36],[254,51,338,36,"_routeConfig$parse"],[254,69,338,36],[254,72,338,25,"routeConfig"],[254,83,338,36],[254,84,338,38,"parse"],[254,89,338,43],[254,102,338,25,"_routeConfig$parse"],[254,120,338,25],[254,121,338,46,"key"],[254,124,338,49],[254,125,338,50],[254,128,339,18,"routeConfig"],[254,139,339,29],[254,140,339,30,"parse"],[254,145,339,35],[254,146,339,36,"key"],[254,149,339,39],[254,150,339,40],[254,151,339,41,"value"],[254,156,339,46],[254,157,339,47],[254,160,340,18,"value"],[254,165,340,23],[255,14,341,12],[256,14,343,12],[256,21,343,19,"acc"],[256,24,343,22],[257,12,344,10],[257,13,344,11],[257,15,344,13],[257,16,344,14],[257,17,344,15],[257,18,344,16],[258,12,346,8],[258,16,346,12,"params"],[258,22,346,18],[258,26,346,22,"Object"],[258,32,346,28],[258,33,346,29,"keys"],[258,37,346,33],[258,38,346,34,"params"],[258,44,346,40],[258,45,346,41],[258,46,346,42,"length"],[258,52,346,48],[258,54,346,50],[259,14,347,10],[259,21,347,17],[260,16,347,19,"name"],[260,20,347,23],[260,22,347,19,"name"],[260,26,347,23],[261,16,347,25,"params"],[261,22,347,31],[261,24,347,25,"params"],[262,14,347,32],[262,15,347,33],[263,12,348,8],[264,12,350,8],[264,19,350,15],[265,14,350,17,"name"],[265,18,350,21],[265,20,350,17,"name"],[266,12,350,22],[266,13,350,23],[267,10,351,6],[267,11,351,7],[267,12,351,8],[268,10,353,6,"remainingPath"],[268,23,353,19],[268,26,353,22,"remainingPath"],[268,39,353,35],[268,40,353,36,"replace"],[268,47,353,43],[268,48,353,44,"match"],[268,53,353,49],[268,54,353,50],[268,55,353,51],[268,56,353,52],[268,58,353,54],[268,60,353,56],[268,61,353,57],[269,10,353,58],[270,8,356,4],[271,6,357,2],[271,7,357,3],[272,6,357,3,"_ret"],[272,10,357,3],[273,4,265,2],[273,9,265,7],[273,13,265,13,"config"],[273,19,265,19],[273,23,265,23,"configs"],[273,30,265,30],[274,6,265,30,"_ret"],[274,10,265,30],[274,13,265,30,"_loop"],[274,18,265,30],[274,19,265,30,"config"],[274,25,265,30],[275,6,265,30],[275,10,265,30,"_ret"],[275,14,265,30],[275,22,267,6],[276,6,267,15],[276,10,267,15,"_ret"],[276,14,267,15],[276,22,355,6],[277,4,355,12],[278,4,359,2],[278,11,359,9],[279,6,359,11,"routes"],[279,12,359,17],[279,14,359,11,"routes"],[279,20,359,17],[280,6,359,19,"remainingPath"],[280,19,359,32],[280,21,359,19,"remainingPath"],[281,4,359,33],[281,5,359,34],[282,2,360,0],[282,3,360,1],[283,2,362,0],[283,6,362,6,"createNormalizedConfigs"],[283,30,362,29],[283,33,362,32],[283,42,362,6,"createNormalizedConfigs"],[283,65,362,29,"createNormalizedConfigs"],[283,66,363,2,"screen"],[283,72,363,16],[283,74,364,2,"routeConfig"],[283,85,364,36],[283,87,369,20],[284,4,369,20],[284,8,365,2,"routeNames"],[284,18,365,22],[284,21,365,22,"arguments"],[284,30,365,22],[284,31,365,22,"length"],[284,37,365,22],[284,45,365,22,"arguments"],[284,54,365,22],[284,62,365,22,"undefined"],[284,71,365,22],[284,74,365,22,"arguments"],[284,83,365,22],[284,89,365,25],[284,91,365,27],[285,4,365,27],[285,8,366,2,"initials"],[285,16,366,32],[285,19,366,32,"arguments"],[285,28,366,32],[285,29,366,32,"length"],[285,35,366,32],[285,42,366,32,"arguments"],[285,51,366,32],[285,57,366,32,"undefined"],[285,66,366,32],[286,4,366,32],[286,8,367,2,"parentScreens"],[286,21,367,25],[286,24,367,25,"arguments"],[286,33,367,25],[286,34,367,25,"length"],[286,40,367,25],[286,47,367,25,"arguments"],[286,56,367,25],[286,62,367,25,"undefined"],[286,71,367,25],[287,4,367,25],[287,8,368,2,"parentPattern"],[287,21,368,24],[287,24,368,24,"arguments"],[287,33,368,24],[287,34,368,24,"length"],[287,40,368,24],[287,47,368,24,"arguments"],[287,56,368,24],[287,62,368,24,"undefined"],[287,71,368,24],[288,4,370,2],[288,8,370,8,"configs"],[288,15,370,30],[288,18,370,33],[288,20,370,35],[289,4,372,2,"routeNames"],[289,14,372,12],[289,15,372,13,"push"],[289,19,372,17],[289,20,372,18,"screen"],[289,26,372,24],[289,27,372,25],[290,4,374,2,"parentScreens"],[290,17,374,15],[290,18,374,16,"push"],[290,22,374,20],[290,23,374,21,"screen"],[290,29,374,27],[290,30,374,28],[292,4,376,2],[293,4,377,2],[293,8,377,8,"config"],[293,14,377,14],[293,17,377,17,"routeConfig"],[293,28,377,28],[293,29,377,29,"screen"],[293,35,377,35],[293,36,377,36],[294,4,379,2],[294,8,379,6],[294,15,379,13,"config"],[294,21,379,19],[294,26,379,24],[294,34,379,32],[294,36,379,34],[295,6,380,4],[296,6,381,4],[296,10,381,10,"pattern"],[296,17,381,17],[296,20,381,20,"parentPattern"],[296,33,381,33],[296,36,381,36,"joinPaths"],[296,45,381,45],[296,46,381,46,"parentPattern"],[296,59,381,59],[296,61,381,61,"config"],[296,67,381,67],[296,68,381,68],[296,71,381,71,"config"],[296,77,381,77],[297,6,383,4,"configs"],[297,13,383,11],[297,14,383,12,"push"],[297,18,383,16],[297,19,383,17,"createConfigItem"],[297,35,383,33],[297,36,383,34,"screen"],[297,42,383,40],[297,44,383,42,"routeNames"],[297,54,383,52],[297,56,383,54,"pattern"],[297,63,383,61],[297,65,383,63,"config"],[297,71,383,69],[297,72,383,70],[297,73,383,71],[298,4,384,2],[298,5,384,3],[298,11,384,9],[298,15,384,13],[298,22,384,20,"config"],[298,28,384,26],[298,33,384,31],[298,41,384,39],[298,43,384,41],[299,6,385,4],[299,10,385,8,"pattern"],[299,18,385,35],[301,6,387,4],[302,6,388,4],[303,6,389,4],[304,6,390,4],[304,10,390,8],[304,17,390,15,"config"],[304,23,390,21],[304,24,390,22,"path"],[304,28,390,26],[304,33,390,31],[304,41,390,39],[304,43,390,41],[305,8,391,6],[305,12,391,10,"config"],[305,18,391,16],[305,19,391,17,"exact"],[305,24,391,22],[305,28,391,26,"config"],[305,34,391,32],[305,35,391,33,"path"],[305,39,391,37],[305,44,391,42,"undefined"],[305,53,391,51],[305,55,391,53],[306,10,392,8],[306,16,392,14],[306,20,392,18,"Error"],[306,25,392,23],[306,26,393,10],[306,176,394,8],[306,177,394,9],[307,8,395,6],[308,8,397,6,"pattern"],[308,16,397,13],[308,19,398,8,"config"],[308,25,398,14],[308,26,398,15,"exact"],[308,31,398,20],[308,36,398,25],[308,40,398,29],[308,43,399,12,"joinPaths"],[308,52,399,21],[308,53,399,22,"parentPattern"],[308,66,399,35],[308,70,399,39],[308,72,399,41],[308,74,399,43,"config"],[308,80,399,49],[308,81,399,50,"path"],[308,85,399,54],[308,89,399,58],[308,91,399,60],[308,92,399,61],[308,95,400,12,"config"],[308,101,400,18],[308,102,400,19,"path"],[308,106,400,23],[308,110,400,27],[308,112,400,29],[309,8,402,6,"configs"],[309,15,402,13],[309,16,402,14,"push"],[309,20,402,18],[309,21,403,8,"createConfigItem"],[309,37,403,24],[309,38,404,10,"screen"],[309,44,404,16],[309,46,405,10,"routeNames"],[309,56,405,20],[309,58,406,10,"pattern"],[309,66,406,17],[309,68,407,10,"config"],[309,74,407,16],[309,75,407,17,"path"],[309,79,407,21],[309,81,408,10,"config"],[309,87,408,16],[309,88,408,17,"parse"],[309,93,409,8],[309,94,410,6],[309,95,410,7],[310,6,411,4],[311,6,413,4],[311,10,413,8,"config"],[311,16,413,14],[311,17,413,15,"screens"],[311,24,413,22],[311,26,413,24],[312,8,414,6],[313,8,415,6],[313,12,415,10,"config"],[313,18,415,16],[313,19,415,17,"initialRouteName"],[313,35,415,33],[313,37,415,35],[314,10,416,8,"initials"],[314,18,416,16],[314,19,416,17,"push"],[314,23,416,21],[314,24,416,22],[315,12,417,10,"initialRouteName"],[315,28,417,26],[315,30,417,28,"config"],[315,36,417,34],[315,37,417,35,"initialRouteName"],[315,53,417,51],[316,12,418,10,"parentScreens"],[316,25,418,23],[316,27,418,10,"parentScreens"],[317,10,419,8],[317,11,419,9],[317,12,419,10],[318,8,420,6],[319,8,422,6,"Object"],[319,14,422,12],[319,15,422,13,"keys"],[319,19,422,17],[319,20,422,18,"config"],[319,26,422,24],[319,27,422,25,"screens"],[319,34,422,32],[319,35,422,33],[319,36,422,34,"forEach"],[319,43,422,41],[319,44,422,42],[319,54,422,43,"nestedConfig"],[319,66,422,55],[319,68,422,60],[320,10,422,60],[320,14,422,60,"_pattern2"],[320,23,422,60],[321,10,423,8],[321,14,423,14,"result"],[321,20,423,20],[321,23,423,23,"createNormalizedConfigs"],[321,47,423,46],[321,48,424,10,"nestedConfig"],[321,60,424,22],[321,62,425,10,"config"],[321,68,425,16],[321,69,425,17,"screens"],[321,76,425,24],[321,78,426,10,"routeNames"],[321,88,426,20],[321,90,427,10,"initials"],[321,98,427,18],[321,104,427,18,"_toConsumableArray2"],[321,123,427,18],[321,124,427,18,"default"],[321,131,427,18],[321,133,428,14,"parentScreens"],[321,146,428,27],[321,150,428,27,"_pattern2"],[321,159,428,27],[321,162,429,10,"pattern"],[321,170,429,17],[321,182,429,17,"_pattern2"],[321,191,429,17],[321,194,429,21,"parentPattern"],[321,207,430,8],[321,208,430,9],[322,10,432,8,"configs"],[322,17,432,15],[322,18,432,16,"push"],[322,22,432,20],[322,23,432,20,"apply"],[322,28,432,20],[322,29,432,8,"configs"],[322,36,432,15],[322,42,432,15,"_toConsumableArray2"],[322,61,432,15],[322,62,432,15,"default"],[322,69,432,15],[322,71,432,24,"result"],[322,77,432,30],[322,79,432,31],[323,8,433,6],[323,9,433,7],[323,10,433,8],[324,6,434,4],[325,4,435,2],[326,4,437,2,"routeNames"],[326,14,437,12],[326,15,437,13,"pop"],[326,18,437,16],[326,19,437,17],[326,20,437,18],[327,4,439,2],[327,11,439,9,"configs"],[327,18,439,16],[328,2,440,0],[328,3,440,1],[329,2,442,0],[329,6,442,6,"createConfigItem"],[329,22,442,22],[329,25,442,25],[329,34,442,6,"createConfigItem"],[329,50,442,22,"createConfigItem"],[329,51,443,2,"screen"],[329,57,443,16],[329,59,444,2,"routeNames"],[329,69,444,22],[329,71,445,2,"pattern"],[329,78,445,17],[329,80,446,2,"path"],[329,84,446,14],[329,86,447,2,"parse"],[329,91,447,21],[329,93,448,18],[330,4,449,2],[331,4,450,2,"pattern"],[331,11,450,9],[331,14,450,12,"pattern"],[331,21,450,19],[331,22,450,20,"split"],[331,27,450,25],[331,28,450,26],[331,31,450,29],[331,32,450,30],[331,33,450,31,"filter"],[331,39,450,37],[331,40,450,38,"Boolean"],[331,47,450,45],[331,48,450,46],[331,49,450,47,"join"],[331,53,450,51],[331,54,450,52],[331,57,450,55],[331,58,450,56],[332,4,452,2],[332,8,452,8,"regex"],[332,13,452,13],[332,16,452,16,"pattern"],[332,23,452,23],[332,26,453,6],[332,30,453,10,"RegExp"],[332,36,453,16],[332,37,454,8],[332,42,454,13,"pattern"],[332,49,454,20],[332,50,455,11,"split"],[332,55,455,16],[332,56,455,17],[332,59,455,20],[332,60,455,21],[332,61,456,11,"map"],[332,64,456,14],[332,65,456,15],[332,75,456,16,"it"],[332,77,456,18],[332,79,456,23],[333,6,457,12],[333,10,457,16,"it"],[333,12,457,18],[333,13,457,19,"startsWith"],[333,23,457,29],[333,24,457,30],[333,27,457,33],[333,28,457,34],[333,30,457,36],[334,8,458,14],[334,15,458,21],[334,29,458,35,"it"],[334,31,458,37],[334,32,458,38,"endsWith"],[334,40,458,46],[334,41,458,47],[334,44,458,50],[334,45,458,51],[334,48,458,54],[334,51,458,57],[334,54,458,60],[334,56,458,62],[334,59,458,65],[335,6,459,12],[336,6,461,12],[336,13,461,19],[336,16,461,22,"it"],[336,18,461,24],[336,23,461,29],[336,26,461,32],[336,29,461,35],[336,33,461,39],[336,36,461,42],[336,40,461,42,"escape"],[336,67,461,48],[336,69,461,49,"it"],[336,71,461,51],[336,72,461,52],[336,77,461,57],[337,4,462,10],[337,5,462,11],[337,6,462,12],[337,7,463,11,"join"],[337,11,463,15],[337,12,463,16],[337,14,463,18],[337,15,463,19],[337,18,464,6],[337,19,464,7],[337,22,465,6,"undefined"],[337,31,465,15],[338,4,467,2],[338,11,467,9],[339,6,468,4,"screen"],[339,12,468,10],[339,14,468,4,"screen"],[339,20,468,10],[340,6,469,4,"regex"],[340,11,469,9],[340,13,469,4,"regex"],[340,18,469,9],[341,6,470,4,"pattern"],[341,13,470,11],[341,15,470,4,"pattern"],[341,22,470,11],[342,6,471,4,"path"],[342,10,471,8],[342,12,471,4,"path"],[342,16,471,8],[343,6,472,4],[344,6,473,4,"routeNames"],[344,16,473,14],[344,22,473,14,"_toConsumableArray2"],[344,41,473,14],[344,42,473,14,"default"],[344,49,473,14],[344,51,473,20,"routeNames"],[344,61,473,30],[344,62,473,31],[345,6,474,4,"parse"],[345,11,474,9],[345,13,474,4,"parse"],[346,4,475,2],[346,5,475,3],[347,2,476,0],[347,3,476,1],[348,2,478,0],[348,6,478,6,"findParseConfigForRoute"],[348,29,478,29],[348,32,478,32],[348,41,478,6,"findParseConfigForRoute"],[348,64,478,29,"findParseConfigForRoute"],[348,65,479,2,"routeName"],[348,74,479,19],[348,76,480,2,"flatConfig"],[348,86,480,27],[348,88,481,30],[349,4,482,2],[349,9,482,7],[349,13,482,13,"config"],[349,19,482,19],[349,23,482,23,"flatConfig"],[349,33,482,33],[349,35,482,35],[350,6,483,4],[350,10,483,8,"routeName"],[350,19,483,17],[350,24,483,22,"config"],[350,30,483,28],[350,31,483,29,"routeNames"],[350,41,483,39],[350,42,483,40,"config"],[350,48,483,46],[350,49,483,47,"routeNames"],[350,59,483,57],[350,60,483,58,"length"],[350,66,483,64],[350,69,483,67],[350,70,483,68],[350,71,483,69],[350,73,483,71],[351,8,484,6],[351,15,484,13,"config"],[351,21,484,19],[351,22,484,20,"parse"],[351,27,484,25],[352,6,485,4],[353,4,486,2],[354,4,488,2],[354,11,488,9,"undefined"],[354,20,488,18],[355,2,489,0],[355,3,489,1],[357,2,491,0],[358,2,492,0],[358,6,492,6,"findInitialRoute"],[358,22,492,22],[358,25,492,25],[358,34,492,6,"findInitialRoute"],[358,50,492,22,"findInitialRoute"],[358,51,493,2,"routeName"],[358,60,493,19],[358,62,494,2,"parentScreens"],[358,75,494,25],[358,77,495,2,"initialRoutes"],[358,90,495,37],[358,92,496,25],[359,4,497,2],[359,9,497,7],[359,13,497,13,"config"],[359,19,497,19],[359,23,497,23,"initialRoutes"],[359,36,497,36],[359,38,497,38],[360,6,498,4],[360,10,498,8,"parentScreens"],[360,23,498,21],[360,24,498,22,"length"],[360,30,498,28],[360,35,498,33,"config"],[360,41,498,39],[360,42,498,40,"parentScreens"],[360,55,498,53],[360,56,498,54,"length"],[360,62,498,60],[360,64,498,62],[361,8,499,6],[361,12,499,10,"sameParents"],[361,23,499,21],[361,26,499,24],[361,30,499,28],[362,8,500,6],[362,13,500,11],[362,17,500,15,"i"],[362,18,500,16],[362,21,500,19],[362,22,500,20],[362,24,500,22,"i"],[362,25,500,23],[362,28,500,26,"parentScreens"],[362,41,500,39],[362,42,500,40,"length"],[362,48,500,46],[362,50,500,48,"i"],[362,51,500,49],[362,53,500,51],[362,55,500,53],[363,10,501,8],[363,14,501,12,"parentScreens"],[363,27,501,25],[363,28,501,26,"i"],[363,29,501,27],[363,30,501,28],[363,31,501,29,"localeCompare"],[363,44,501,42],[363,45,501,43,"config"],[363,51,501,49],[363,52,501,50,"parentScreens"],[363,65,501,63],[363,66,501,64,"i"],[363,67,501,65],[363,68,501,66],[363,69,501,67],[363,74,501,72],[363,75,501,73],[363,77,501,75],[364,12,502,10,"sameParents"],[364,23,502,21],[364,26,502,24],[364,31,502,29],[365,12,503,10],[366,10,504,8],[367,8,505,6],[368,8,506,6],[368,12,506,10,"sameParents"],[368,23,506,21],[368,25,506,23],[369,10,507,8],[369,17,507,15,"routeName"],[369,26,507,24],[369,31,507,29,"config"],[369,37,507,35],[369,38,507,36,"initialRouteName"],[369,54,507,52],[369,57,508,12,"config"],[369,63,508,18],[369,64,508,19,"initialRouteName"],[369,80,508,35],[369,83,509,12,"undefined"],[369,92,509,21],[370,8,510,6],[371,6,511,4],[372,4,512,2],[373,4,513,2],[373,11,513,9,"undefined"],[373,20,513,18],[374,2,514,0],[374,3,514,1],[376,2,516,0],[377,2,517,0],[378,2,518,0],[378,6,518,6,"createStateObject"],[378,23,518,23],[378,26,518,26],[378,35,518,6,"createStateObject"],[378,52,518,23,"createStateObject"],[378,53,519,2,"initialRoute"],[378,65,519,34],[378,67,520,2,"route"],[378,72,520,20],[378,74,521,2,"isEmpty"],[378,81,521,18],[378,83,522,19],[379,4,523,2],[379,8,523,6,"isEmpty"],[379,15,523,13],[379,17,523,15],[380,6,524,4],[380,10,524,8,"initialRoute"],[380,22,524,20],[380,24,524,22],[381,8,525,6],[381,15,525,13],[382,10,526,8,"index"],[382,15,526,13],[382,17,526,15],[382,18,526,16],[383,10,527,8,"routes"],[383,16,527,14],[383,18,527,16],[383,19,527,17],[384,12,527,19,"name"],[384,16,527,23],[384,18,527,25,"initialRoute"],[385,10,527,38],[385,11,527,39],[385,13,527,41,"route"],[385,18,527,46],[386,8,528,6],[386,9,528,7],[387,6,529,4],[387,7,529,5],[387,13,529,11],[388,8,530,6],[388,15,530,13],[389,10,531,8,"routes"],[389,16,531,14],[389,18,531,16],[389,19,531,17,"route"],[389,24,531,22],[390,8,532,6],[390,9,532,7],[391,6,533,4],[392,4,534,2],[392,5,534,3],[392,11,534,9],[393,6,535,4],[393,10,535,8,"initialRoute"],[393,22,535,20],[393,24,535,22],[394,8,536,6],[394,15,536,13],[395,10,537,8,"index"],[395,15,537,13],[395,17,537,15],[395,18,537,16],[396,10,538,8,"routes"],[396,16,538,14],[396,18,538,16],[396,19,538,17],[397,12,538,19,"name"],[397,16,538,23],[397,18,538,25,"initialRoute"],[398,10,538,38],[398,11,538,39],[398,13,538,39,"Object"],[398,19,538,39],[398,20,538,39,"assign"],[398,26,538,39],[398,31,538,46,"route"],[398,36,538,51],[399,12,538,53,"state"],[399,17,538,58],[399,19,538,60],[400,14,538,62,"routes"],[400,20,538,68],[400,22,538,70],[401,12,538,73],[402,10,538,74],[403,8,539,6],[403,9,539,7],[404,6,540,4],[404,7,540,5],[404,13,540,11],[405,8,541,6],[405,15,541,13],[406,10,542,8,"routes"],[406,16,542,14],[406,18,542,16],[406,19,542,16,"Object"],[406,25,542,16],[406,26,542,16,"assign"],[406,32,542,16],[406,37,542,22,"route"],[406,42,542,27],[407,12,542,29,"state"],[407,17,542,34],[407,19,542,36],[408,14,542,38,"routes"],[408,20,542,44],[408,22,542,46],[409,12,542,49],[410,10,542,50],[411,8,543,6],[411,9,543,7],[412,6,544,4],[413,4,545,2],[414,2,546,0],[414,3,546,1],[415,2,548,0],[415,6,548,6,"createNestedStateObject"],[415,29,548,29],[415,32,548,32],[415,41,548,6,"createNestedStateObject"],[415,64,548,29,"createNestedStateObject"],[415,65,549,2,"path"],[415,69,549,14],[415,71,550,2,"routes"],[415,77,550,23],[415,79,551,2,"initialRoutes"],[415,92,551,37],[415,94,552,2,"flatConfig"],[415,104,552,28],[415,106,553,5],[416,4,554,2],[416,8,554,6,"state"],[416,13,554,25],[417,4,555,2],[417,8,555,6,"route"],[417,13,555,11],[417,16,555,14,"routes"],[417,22,555,20],[417,23,555,21,"shift"],[417,28,555,26],[417,29,555,27],[417,30,555,43],[418,4,556,2],[418,8,556,8,"parentScreens"],[418,21,556,31],[418,24,556,34],[418,26,556,36],[419,4,558,2],[419,8,558,6,"initialRoute"],[419,20,558,18],[419,23,558,21,"findInitialRoute"],[419,39,558,37],[419,40,558,38,"route"],[419,45,558,43],[419,46,558,44,"name"],[419,50,558,48],[419,52,558,50,"parentScreens"],[419,65,558,63],[419,67,558,65,"initialRoutes"],[419,80,558,78],[419,81,558,79],[420,4,560,2,"parentScreens"],[420,17,560,15],[420,18,560,16,"push"],[420,22,560,20],[420,23,560,21,"route"],[420,28,560,26],[420,29,560,27,"name"],[420,33,560,31],[420,34,560,32],[421,4,562,2,"state"],[421,9,562,7],[421,12,562,10,"createStateObject"],[421,29,562,27],[421,30,562,28,"initialRoute"],[421,42,562,40],[421,44,562,42,"route"],[421,49,562,47],[421,51,562,49,"routes"],[421,57,562,55],[421,58,562,56,"length"],[421,64,562,62],[421,69,562,67],[421,70,562,68],[421,71,562,69],[422,4,564,2],[422,8,564,6,"routes"],[422,14,564,12],[422,15,564,13,"length"],[422,21,564,19],[422,24,564,22],[422,25,564,23],[422,27,564,25],[423,6,565,4],[423,10,565,8,"nestedState"],[423,21,565,19],[423,24,565,22,"state"],[423,29,565,27],[424,6,567,4],[424,13,567,12,"route"],[424,18,567,17],[424,21,567,20,"routes"],[424,27,567,26],[424,28,567,27,"shift"],[424,33,567,32],[424,34,567,33],[424,35,567,49],[424,37,567,52],[425,8,568,6,"initialRoute"],[425,20,568,18],[425,23,568,21,"findInitialRoute"],[425,39,568,37],[425,40,568,38,"route"],[425,45,568,43],[425,46,568,44,"name"],[425,50,568,48],[425,52,568,50,"parentScreens"],[425,65,568,63],[425,67,568,65,"initialRoutes"],[425,80,568,78],[425,81,568,79],[426,8,570,6],[426,12,570,12,"nestedStateIndex"],[426,28,570,28],[426,31,571,8,"nestedState"],[426,42,571,19],[426,43,571,20,"index"],[426,48,571,25],[426,52,571,29,"nestedState"],[426,63,571,40],[426,64,571,41,"routes"],[426,70,571,47],[426,71,571,48,"length"],[426,77,571,54],[426,80,571,57],[426,81,571,58],[427,8,573,6,"nestedState"],[427,19,573,17],[427,20,573,18,"routes"],[427,26,573,24],[427,27,573,25,"nestedStateIndex"],[427,43,573,41],[427,44,573,42],[427,45,573,43,"state"],[427,50,573,48],[427,53,573,51,"createStateObject"],[427,70,573,68],[427,71,574,8,"initialRoute"],[427,83,574,20],[427,85,575,8,"route"],[427,90,575,13],[427,92,576,8,"routes"],[427,98,576,14],[427,99,576,15,"length"],[427,105,576,21],[427,110,576,26],[427,111,577,6],[427,112,577,7],[428,8,579,6],[428,12,579,10,"routes"],[428,18,579,16],[428,19,579,17,"length"],[428,25,579,23],[428,28,579,26],[428,29,579,27],[428,31,579,29],[429,10,580,8,"nestedState"],[429,21,580,19],[429,24,580,22,"nestedState"],[429,35,580,33],[429,36,580,34,"routes"],[429,42,580,40],[429,43,580,41,"nestedStateIndex"],[429,59,580,57],[429,60,580,58],[429,61,581,11,"state"],[429,66,581,32],[430,8,582,6],[431,8,584,6,"parentScreens"],[431,21,584,19],[431,22,584,20,"push"],[431,26,584,24],[431,27,584,25,"route"],[431,32,584,30],[431,33,584,31,"name"],[431,37,584,35],[431,38,584,36],[432,6,585,4],[433,4,586,2],[434,4,588,2,"route"],[434,9,588,7],[434,12,588,10],[434,16,588,10,"findFocusedRoute"],[434,41,588,26],[434,43,588,27,"state"],[434,48,588,32],[434,49,588,48],[435,4,589,2,"route"],[435,9,589,7],[435,10,589,8,"path"],[435,14,589,12],[435,17,589,15,"path"],[435,21,589,19],[436,4,591,2],[436,8,591,8,"params"],[436,14,591,14],[436,17,591,17,"parseQueryParams"],[436,33,591,33],[436,34,592,4,"path"],[436,38,592,8],[436,40,593,4,"flatConfig"],[436,50,593,14],[436,53,593,17,"findParseConfigForRoute"],[436,76,593,40],[436,77,593,41,"route"],[436,82,593,46],[436,83,593,47,"name"],[436,87,593,51],[436,89,593,53,"flatConfig"],[436,99,593,63],[436,100,593,64],[436,103,593,67,"undefined"],[436,112,594,2],[436,113,594,3],[437,4,596,2],[437,8,596,6,"params"],[437,14,596,12],[437,16,596,14],[438,6,597,4,"route"],[438,11,597,9],[438,12,597,10,"params"],[438,18,597,16],[438,21,597,16,"Object"],[438,27,597,16],[438,28,597,16,"assign"],[438,34,597,16],[438,39,597,24,"route"],[438,44,597,29],[438,45,597,30,"params"],[438,51,597,36],[438,53,597,41,"params"],[438,59,597,47],[438,60,597,49],[439,4,598,2],[440,4,600,2],[440,11,600,9,"state"],[440,16,600,14],[441,2,601,0],[441,3,601,1],[442,2,603,0],[442,6,603,6,"parseQueryParams"],[442,22,603,22],[442,25,603,25],[442,34,603,6,"parseQueryParams"],[442,50,603,22,"parseQueryParams"],[442,51,604,2,"path"],[442,55,604,14],[442,57,605,2,"parseConfig"],[442,68,605,54],[442,70,606,5],[443,4,607,2],[443,8,607,8,"query"],[443,13,607,13],[443,16,607,16,"path"],[443,20,607,20],[443,21,607,21,"split"],[443,26,607,26],[443,27,607,27],[443,30,607,30],[443,31,607,31],[443,32,607,32],[443,33,607,33],[443,34,607,34],[444,4,608,2],[444,8,608,8,"params"],[444,14,608,14],[444,17,608,17,"queryString"],[444,28,608,28],[444,29,608,29,"parse"],[444,34,608,34],[444,35,608,35,"query"],[444,40,608,40],[444,41,608,41],[445,4,610,2],[445,8,610,6,"parseConfig"],[445,19,610,17],[445,21,610,19],[446,6,611,4,"Object"],[446,12,611,10],[446,13,611,11,"keys"],[446,17,611,15],[446,18,611,16,"params"],[446,24,611,22],[446,25,611,23],[446,26,611,24,"forEach"],[446,33,611,31],[446,34,611,32],[446,44,611,33,"name"],[446,48,611,37],[446,50,611,42],[447,8,612,6],[447,12,613,8,"Object"],[447,18,613,14],[447,19,613,15,"hasOwnProperty"],[447,33,613,29],[447,34,613,30,"call"],[447,38,613,34],[447,39,613,35,"parseConfig"],[447,50,613,46],[447,52,613,48,"name"],[447,56,613,52],[447,57,613,53],[447,61,614,8],[447,68,614,15,"params"],[447,74,614,21],[447,75,614,22,"name"],[447,79,614,26],[447,80,614,27],[447,85,614,32],[447,93,614,40],[447,95,615,8],[448,10,616,8,"params"],[448,16,616,14],[448,17,616,15,"name"],[448,21,616,19],[448,22,616,20],[448,25,616,23,"parseConfig"],[448,36,616,34],[448,37,616,35,"name"],[448,41,616,39],[448,42,616,40],[448,43,616,41,"params"],[448,49,616,47],[448,50,616,48,"name"],[448,54,616,52],[448,55,616,63],[448,56,616,64],[449,8,617,6],[450,6,618,4],[450,7,618,5],[450,8,618,6],[451,4,619,2],[452,4,621,2],[452,11,621,9,"Object"],[452,17,621,15],[452,18,621,16,"keys"],[452,22,621,20],[452,23,621,21,"params"],[452,29,621,27],[452,30,621,28],[452,31,621,29,"length"],[452,37,621,35],[452,40,621,38,"params"],[452,46,621,44],[452,49,621,47,"undefined"],[452,58,621,56],[453,2,622,0],[453,3,622,1],[454,0,622,2],[454,3]],"functionMap":{"names":["<global>","getStateFromPath","remaining.split.filter.map$argument_0","Object.keys.map$argument_0","concat.sort$argument_0","configs.reduce$argument_0","b.every$argument_0","a.every$argument_0","configs.find$argument_0","config.routeNames.every$argument_0","match.routeNames.map$argument_0","configs.map$argument_0","joinPaths","paths.map$argument_0","matchAgainstConfigs","config.pattern.split.reduce$argument_0","config.routeNames.map$argument_0","normalizedPath.split.reduce$argument_0","createNormalizedConfigs","Object.keys.forEach$argument_0","createConfigItem","pattern.split.map$argument_0","findParseConfigForRoute","findInitialRoute","createStateObject","createNestedStateObject","parseQueryParams"],"mappings":"AAA;eCgE;WCgC;ODG;kCEY;SFO;UGG;KHiD;8CIG;oBCS,sBD;oBEC,sBF;GJgB;MOM;UCI,wBD,wBC,OD;SPC;6BSM,oBT;gBUgB;MVI;CDe;kBYE;yBCE,mBD;cZE;4BcE;QCkB;SDsB;qCEM;yCRC;SQG;2CCgB;WDkB;OFO;CdS;gCkBE;0CC4D;ODW;ClBO;yBoBE;eCc;WDM;CpBc;gCsBE;CtBW;yBuBG;CvBsB;0BwBI;CxB4B;gCyBE;CzBqD;yB0BE;gCPQ;KOO;C1BI"}},"type":"js/module"}]}