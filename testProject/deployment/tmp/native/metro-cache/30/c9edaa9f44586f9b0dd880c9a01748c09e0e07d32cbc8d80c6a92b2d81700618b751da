{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"./PerformanceEntry","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":0,"index":368},"end":{"line":14,"column":52,"index":420}}],"key":"limm2T+T1Tv0g3goGjXkwAZT0/A="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/classPrivateFieldLooseBase","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"jMONaMrLKWyW98OXtOcLrGqurmM="}},{"name":"@babel/runtime/helpers/classPrivateFieldLooseKey","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":346,"column":0,"index":10639}}],"key":"qTmzI90+V4e5n8oYrMtPGytmrV0="}},{"name":"../../../../Libraries/Utilities/warnOnce","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":0,"index":303},"end":{"line":13,"column":64,"index":367}}],"key":"Ghh5qlfuZKYys9QXlkSDlK8AUjk="}},{"name":"./PerformanceEventTiming","data":{"asyncType":null,"locs":[{"start":{"line":15,"column":0,"index":421},"end":{"line":15,"column":62,"index":483}}],"key":"JgH87HqTtba/7D9cnIh1vqbgoIs="}},{"name":"./specs/NativePerformanceObserver","data":{"asyncType":null,"locs":[{"start":{"line":21,"column":0,"index":608},"end":{"line":21,"column":74,"index":682}}],"key":"e5cFiNYK24FFj+OBvYsOcKKfpSs="}},{"name":"./RawPerformanceEntry","data":{"asyncType":null,"locs":[{"start":{"line":16,"column":0,"index":484},"end":{"line":20,"column":31,"index":607}},{"start":{"line":16,"column":0,"index":484},"end":{"line":20,"column":31,"index":607}},{"start":{"line":16,"column":0,"index":484},"end":{"line":20,"column":31,"index":607}},{"start":{"line":16,"column":0,"index":484},"end":{"line":20,"column":31,"index":607}},{"start":{"line":16,"column":0,"index":484},"end":{"line":20,"column":31,"index":607}}],"key":"zrkCAbiGCMzHpBgnI/Ykq8YEer4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"PerformanceEntry\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[1], \"./PerformanceEntry\").PerformanceEntry;\n    }\n  });\n  Object.defineProperty(exports, \"PerformanceEventTiming\", {\n    enumerable: true,\n    get: function get() {\n      return _PerformanceEventTiming.default;\n    }\n  });\n  exports.default = exports.PerformanceObserverEntryList = void 0;\n  exports.warnNoNativePerformanceObserver = warnNoNativePerformanceObserver;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/slicedToArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/createClass\"));\n  var _classPrivateFieldLooseBase2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n  var _classPrivateFieldLooseKey2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n  var _warnOnce = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"../../../../Libraries/Utilities/warnOnce\"));\n  var _PerformanceEventTiming = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"./PerformanceEventTiming\"));\n  var _NativePerformanceObserver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[10], \"./specs/NativePerformanceObserver\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n  var _entries = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)(\"entries\");\n  var PerformanceObserverEntryList = exports.PerformanceObserverEntryList = /*#__PURE__*/function () {\n    function PerformanceObserverEntryList(entries) {\n      (0, _classCallCheck2.default)(this, PerformanceObserverEntryList);\n      Object.defineProperty(this, _entries, {\n        writable: true,\n        value: void 0\n      });\n      (0, _classPrivateFieldLooseBase2.default)(this, _entries)[_entries] = entries;\n    }\n    return (0, _createClass2.default)(PerformanceObserverEntryList, [{\n      key: \"getEntries\",\n      value: function getEntries() {\n        return (0, _classPrivateFieldLooseBase2.default)(this, _entries)[_entries];\n      }\n    }, {\n      key: \"getEntriesByType\",\n      value: function getEntriesByType(type) {\n        return (0, _classPrivateFieldLooseBase2.default)(this, _entries)[_entries].filter(function (entry) {\n          return entry.entryType === type;\n        });\n      }\n    }, {\n      key: \"getEntriesByName\",\n      value: function getEntriesByName(name, type) {\n        if (type === undefined) {\n          return (0, _classPrivateFieldLooseBase2.default)(this, _entries)[_entries].filter(function (entry) {\n            return entry.name === name;\n          });\n        } else {\n          return (0, _classPrivateFieldLooseBase2.default)(this, _entries)[_entries].filter(function (entry) {\n            return entry.name === name && entry.entryType === type;\n          });\n        }\n      }\n    }]);\n  }();\n  var observerCountPerEntryType = new Map();\n  var registeredObservers = new Map();\n  var isOnPerformanceEntryCallbackSet = false;\n\n  // This is a callback that gets scheduled and periodically called from the native side\n  var onPerformanceEntry = function onPerformanceEntry() {\n    var _entryResult$entries;\n    if (!_NativePerformanceObserver.default) {\n      return;\n    }\n    var entryResult = _NativePerformanceObserver.default.popPendingEntries();\n    var rawEntries = (_entryResult$entries = entryResult == null ? void 0 : entryResult.entries) != null ? _entryResult$entries : [];\n    var droppedEntriesCount = entryResult == null ? void 0 : entryResult.droppedEntriesCount;\n    if (rawEntries.length === 0) {\n      return;\n    }\n    var entries = rawEntries.map(_$$_REQUIRE(_dependencyMap[11], \"./RawPerformanceEntry\").rawToPerformanceEntry);\n    var _loop = function _loop(observerConfig) {\n      var entriesForObserver = entries.filter(function (entry) {\n        if (!observerConfig.entryTypes.has(entry.entryType)) {\n          return false;\n        }\n        var durationThreshold = observerConfig.entryTypes.get(entry.entryType);\n        return entry.duration >= (durationThreshold != null ? durationThreshold : 0);\n      });\n      if (entriesForObserver.length !== 0) {\n        try {\n          observerConfig.callback(new PerformanceObserverEntryList(entriesForObserver), _observer, droppedEntriesCount);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    };\n    for (var _ref of registeredObservers.entries()) {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n      var _observer = _ref2[0];\n      var observerConfig = _ref2[1];\n      _loop(observerConfig);\n    }\n  };\n  function warnNoNativePerformanceObserver() {\n    (0, _warnOnce.default)('missing-native-performance-observer', 'Missing native implementation of PerformanceObserver');\n  }\n  function applyDurationThresholds() {\n    var durationThresholds = Array.from(registeredObservers.values()).map(function (config) {\n      return config.entryTypes;\n    }).reduce(function (accumulator, currentValue) {\n      return union(accumulator, currentValue);\n    }, new Map());\n    for (var _ref3 of durationThresholds) {\n      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);\n      var entryType = _ref4[0];\n      var durationThreshold = _ref4[1];\n      _NativePerformanceObserver.default == null || _NativePerformanceObserver.default.setDurationThreshold((0, _$$_REQUIRE(_dependencyMap[11], \"./RawPerformanceEntry\").performanceEntryTypeToRaw)(entryType), durationThreshold != null ? durationThreshold : 0);\n    }\n  }\n  function getSupportedPerformanceEntryTypes() {\n    if (!_NativePerformanceObserver.default) {\n      return Object.freeze([]);\n    }\n    if (!_NativePerformanceObserver.default.getSupportedPerformanceEntryTypes) {\n      // fallback if getSupportedPerformanceEntryTypes is not defined on native side\n      return Object.freeze(['mark', 'measure', 'event']);\n    }\n    return Object.freeze(_NativePerformanceObserver.default.getSupportedPerformanceEntryTypes().map(_$$_REQUIRE(_dependencyMap[11], \"./RawPerformanceEntry\").rawToPerformanceEntryType));\n  }\n\n  /**\n   * Implementation of the PerformanceObserver interface for RN,\n   * corresponding to the standard in https://www.w3.org/TR/performance-timeline/\n   *\n   * @example\n   * const observer = new PerformanceObserver((list, _observer) => {\n   *   const entries = list.getEntries();\n   *   entries.forEach(entry => {\n   *     reportEvent({\n   *       eventName: entry.name,\n   *       startTime: entry.startTime,\n   *       endTime: entry.startTime + entry.duration,\n   *       processingStart: entry.processingStart,\n   *       processingEnd: entry.processingEnd,\n   *       interactionId: entry.interactionId,\n   *     });\n   *   });\n   * });\n   * observer.observe({ type: \"event\" });\n   */\n  var _callback = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)(\"callback\");\n  var _type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)(\"type\");\n  var _validateObserveOptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)(\"validateObserveOptions\");\n  var PerformanceObserver = exports.default = /*#__PURE__*/function () {\n    function PerformanceObserver(callback) {\n      (0, _classCallCheck2.default)(this, PerformanceObserver);\n      Object.defineProperty(this, _validateObserveOptions, {\n        value: _validateObserveOptions2\n      });\n      Object.defineProperty(this, _callback, {\n        writable: true,\n        value: void 0\n      });\n      Object.defineProperty(this, _type, {\n        writable: true,\n        value: void 0\n      });\n      (0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback] = callback;\n    }\n    return (0, _createClass2.default)(PerformanceObserver, [{\n      key: \"observe\",\n      value: function observe(options) {\n        var _registeredObservers$;\n        if (!_NativePerformanceObserver.default) {\n          warnNoNativePerformanceObserver();\n          return;\n        }\n        (0, _classPrivateFieldLooseBase2.default)(this, _validateObserveOptions)[_validateObserveOptions](options);\n        var requestedEntryTypes;\n        if (options.entryTypes) {\n          (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = 'multiple';\n          requestedEntryTypes = new Map(options.entryTypes.map(function (t) {\n            return [t, undefined];\n          }));\n        } else {\n          (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = 'single';\n          requestedEntryTypes = new Map([[options.type, options.durationThreshold]]);\n        }\n\n        // The same observer may receive multiple calls to \"observe\", so we need\n        // to check what is new on this call vs. previous ones.\n        var currentEntryTypes = (_registeredObservers$ = registeredObservers.get(this)) == null ? void 0 : _registeredObservers$.entryTypes;\n        var nextEntryTypes = currentEntryTypes ? union(requestedEntryTypes, currentEntryTypes) : requestedEntryTypes;\n\n        // This `observe` call is a no-op because there are no new things to observe.\n        if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {\n          return;\n        }\n        registeredObservers.set(this, {\n          callback: (0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback],\n          entryTypes: nextEntryTypes\n        });\n        if (!isOnPerformanceEntryCallbackSet) {\n          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(onPerformanceEntry);\n          isOnPerformanceEntryCallbackSet = true;\n        }\n\n        // We only need to start listenening to new entry types being observed in\n        // this observer.\n        var newEntryTypes = currentEntryTypes ? difference(new Set(requestedEntryTypes.keys()), new Set(currentEntryTypes.keys())) : new Set(requestedEntryTypes.keys());\n        for (var type of newEntryTypes) {\n          var _observerCountPerEntr;\n          if (!observerCountPerEntryType.has(type)) {\n            var rawType = (0, _$$_REQUIRE(_dependencyMap[11], \"./RawPerformanceEntry\").performanceEntryTypeToRaw)(type);\n            _NativePerformanceObserver.default.startReporting(rawType);\n          }\n          observerCountPerEntryType.set(type, ((_observerCountPerEntr = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntr : 0) + 1);\n        }\n        applyDurationThresholds();\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        if (!_NativePerformanceObserver.default) {\n          warnNoNativePerformanceObserver();\n          return;\n        }\n        var observerConfig = registeredObservers.get(this);\n        if (!observerConfig) {\n          return;\n        }\n\n        // Disconnect this observer\n        for (var type of observerConfig.entryTypes.keys()) {\n          var _observerCountPerEntr2;\n          var numberOfObserversForThisType = (_observerCountPerEntr2 = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntr2 : 0;\n          if (numberOfObserversForThisType === 1) {\n            observerCountPerEntryType.delete(type);\n            _NativePerformanceObserver.default.stopReporting((0, _$$_REQUIRE(_dependencyMap[11], \"./RawPerformanceEntry\").performanceEntryTypeToRaw)(type));\n          } else if (numberOfObserversForThisType !== 0) {\n            observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);\n          }\n        }\n\n        // Disconnect all observers if this was the last one\n        registeredObservers.delete(this);\n        if (registeredObservers.size === 0) {\n          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(undefined);\n          isOnPerformanceEntryCallbackSet = false;\n        }\n        applyDurationThresholds();\n      }\n    }]);\n  }(); // As a Set union, except if value exists in both, we take minimum\n  function _validateObserveOptions2(options) {\n    var type = options.type,\n      entryTypes = options.entryTypes,\n      durationThreshold = options.durationThreshold;\n    if (!type && !entryTypes) {\n      throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.\");\n    }\n    if (entryTypes && type) {\n      throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.\");\n    }\n    if ((0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] === 'multiple' && type) {\n      throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})\");\n    }\n    if ((0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] === 'single' && entryTypes) {\n      throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})\");\n    }\n    if (entryTypes && durationThreshold !== undefined) {\n      throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.\");\n    }\n  }\n  PerformanceObserver.supportedEntryTypes = getSupportedPerformanceEntryTypes();\n  function union(a, b) {\n    var res = new Map();\n    for (var _ref5 of a) {\n      var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);\n      var k = _ref6[0];\n      var v = _ref6[1];\n      if (!b.has(k)) {\n        res.set(k, v);\n      } else {\n        var _b$get;\n        res.set(k, Math.min(v != null ? v : 0, (_b$get = b.get(k)) != null ? _b$get : 0));\n      }\n    }\n    return res;\n  }\n  function difference(a, b) {\n    return new Set((0, _toConsumableArray2.default)(a).filter(function (x) {\n      return !b.has(x);\n    }));\n  }\n});","lineCount":307,"map":[[26,2,13,0],[26,6,13,0,"_warnOnce"],[26,15,13,0],[26,18,13,0,"_interopRequireDefault"],[26,40,13,0],[26,41,13,0,"_$$_REQUIRE"],[26,52,13,0],[26,53,13,0,"_dependencyMap"],[26,67,13,0],[27,2,15,0],[27,6,15,0,"_PerformanceEventTiming"],[27,29,15,0],[27,32,15,0,"_interopRequireDefault"],[27,54,15,0],[27,55,15,0,"_$$_REQUIRE"],[27,66,15,0],[27,67,15,0,"_dependencyMap"],[27,81,15,0],[28,2,21,0],[28,6,21,0,"_NativePerformanceObserver"],[28,32,21,0],[28,35,21,0,"_interopRequireDefault"],[28,57,21,0],[28,58,21,0,"_$$_REQUIRE"],[28,69,21,0],[28,70,21,0,"_dependencyMap"],[28,84,21,0],[29,2,1,0],[30,0,2,0],[31,0,3,0],[32,0,4,0],[33,0,5,0],[34,0,6,0],[35,0,7,0],[36,0,8,0],[37,0,9,0],[38,2,1,0],[38,6,1,0,"_entries"],[38,14,1,0],[38,34,1,0,"_classPrivateFieldLooseKey2"],[38,61,1,0],[38,62,1,0,"default"],[38,69,1,0],[39,2,1,0],[39,6,27,13,"PerformanceObserverEntryList"],[39,34,27,41],[39,37,27,41,"exports"],[39,44,27,41],[39,45,27,41,"PerformanceObserverEntryList"],[39,73,27,41],[40,4,30,2],[40,13,30,2,"PerformanceObserverEntryList"],[40,42,30,14,"entries"],[40,49,30,43],[40,51,30,45],[41,6,30,45],[41,10,30,45,"_classCallCheck2"],[41,26,30,45],[41,27,30,45,"default"],[41,34,30,45],[41,42,30,45,"PerformanceObserverEntryList"],[41,70,30,45],[42,6,30,45,"Object"],[42,12,30,45],[42,13,30,45,"defineProperty"],[42,27,30,45],[42,34,30,45,"_entries"],[42,42,30,45],[43,8,30,45,"writable"],[43,16,30,45],[44,8,30,45,"value"],[44,13,30,45],[45,6,30,45],[46,6,31,4],[46,10,31,4,"_classPrivateFieldLooseBase2"],[46,38,31,4],[46,39,31,4,"default"],[46,46,31,4],[46,52,31,8],[46,54,31,8,"_entries"],[46,62,31,8],[46,64,31,8,"_entries"],[46,72,31,8],[46,76,31,20,"entries"],[46,83,31,27],[47,4,32,2],[48,4,32,3],[48,15,32,3,"_createClass2"],[48,28,32,3],[48,29,32,3,"default"],[48,36,32,3],[48,38,32,3,"PerformanceObserverEntryList"],[48,66,32,3],[49,6,32,3,"key"],[49,9,32,3],[50,6,32,3,"value"],[50,11,32,3],[50,13,34,2],[50,22,34,2,"getEntries"],[50,32,34,12,"getEntries"],[50,33,34,12],[50,35,34,37],[51,8,35,4],[51,19,35,4,"_classPrivateFieldLooseBase2"],[51,47,35,4],[51,48,35,4,"default"],[51,55,35,4],[51,57,35,11],[51,61,35,15],[51,63,35,15,"_entries"],[51,71,35,15],[51,73,35,15,"_entries"],[51,81,35,15],[52,6,36,2],[53,4,36,3],[54,6,36,3,"key"],[54,9,36,3],[55,6,36,3,"value"],[55,11,36,3],[55,13,38,2],[55,22,38,2,"getEntriesByType"],[55,38,38,18,"getEntriesByType"],[55,39,38,19,"type"],[55,43,38,45],[55,45,38,69],[56,8,39,4],[56,15,39,11],[56,19,39,11,"_classPrivateFieldLooseBase2"],[56,47,39,11],[56,48,39,11,"default"],[56,55,39,11],[56,61,39,15],[56,63,39,15,"_entries"],[56,71,39,15],[56,73,39,15,"_entries"],[56,81,39,15],[56,83,39,25,"filter"],[56,89,39,31],[56,90,39,32],[56,100,39,32,"entry"],[56,105,39,37],[57,10,39,37],[57,17,39,41,"entry"],[57,22,39,46],[57,23,39,47,"entryType"],[57,32,39,56],[57,37,39,61,"type"],[57,41,39,65],[58,8,39,65],[58,10,39,66],[59,6,40,2],[60,4,40,3],[61,6,40,3,"key"],[61,9,40,3],[62,6,40,3,"value"],[62,11,40,3],[62,13,42,2],[62,22,42,2,"getEntriesByName"],[62,38,42,18,"getEntriesByName"],[62,39,43,4,"name"],[62,43,43,16],[62,45,44,4,"type"],[62,49,44,31],[62,51,45,26],[63,8,46,4],[63,12,46,8,"type"],[63,16,46,12],[63,21,46,17,"undefined"],[63,30,46,26],[63,32,46,28],[64,10,47,6],[64,17,47,13],[64,21,47,13,"_classPrivateFieldLooseBase2"],[64,49,47,13],[64,50,47,13,"default"],[64,57,47,13],[64,63,47,17],[64,65,47,17,"_entries"],[64,73,47,17],[64,75,47,17,"_entries"],[64,83,47,17],[64,85,47,27,"filter"],[64,91,47,33],[64,92,47,34],[64,102,47,34,"entry"],[64,107,47,39],[65,12,47,39],[65,19,47,43,"entry"],[65,24,47,48],[65,25,47,49,"name"],[65,29,47,53],[65,34,47,58,"name"],[65,38,47,62],[66,10,47,62],[66,12,47,63],[67,8,48,4],[67,9,48,5],[67,15,48,11],[68,10,49,6],[68,17,49,13],[68,21,49,13,"_classPrivateFieldLooseBase2"],[68,49,49,13],[68,50,49,13,"default"],[68,57,49,13],[68,63,49,17],[68,65,49,17,"_entries"],[68,73,49,17],[68,75,49,17,"_entries"],[68,83,49,17],[68,85,49,27,"filter"],[68,91,49,33],[68,92,50,8],[68,102,50,8,"entry"],[68,107,50,13],[69,12,50,13],[69,19,50,17,"entry"],[69,24,50,22],[69,25,50,23,"name"],[69,29,50,27],[69,34,50,32,"name"],[69,38,50,36],[69,42,50,40,"entry"],[69,47,50,45],[69,48,50,46,"entryType"],[69,57,50,55],[69,62,50,60,"type"],[69,66,50,64],[70,10,50,64],[70,11,51,6],[70,12,51,7],[71,8,52,4],[72,6,53,2],[73,4,53,3],[74,2,53,3],[75,2,78,0],[75,6,78,6,"observerCountPerEntryType"],[75,31,78,66],[75,34,78,69],[75,38,78,73,"Map"],[75,41,78,76],[75,42,78,77],[75,43,78,78],[76,2,79,0],[76,6,79,6,"registeredObservers"],[76,25,79,78],[76,28,80,2],[76,32,80,6,"Map"],[76,35,80,9],[76,36,80,10],[76,37,80,11],[77,2,81,0],[77,6,81,4,"isOnPerformanceEntryCallbackSet"],[77,37,81,44],[77,40,81,47],[77,45,81,52],[79,2,83,0],[80,2,84,0],[80,6,84,6,"onPerformanceEntry"],[80,24,84,24],[80,27,84,27],[80,36,84,6,"onPerformanceEntry"],[80,54,84,24,"onPerformanceEntry"],[80,55,84,24],[80,57,84,33],[81,4,84,33],[81,8,84,33,"_entryResult$entries"],[81,28,84,33],[82,4,85,2],[82,8,85,6],[82,9,85,7,"NativePerformanceObserver"],[82,43,85,32],[82,45,85,34],[83,6,86,4],[84,4,87,2],[85,4,88,2],[85,8,88,8,"entryResult"],[85,19,88,19],[85,22,88,22,"NativePerformanceObserver"],[85,56,88,47],[85,57,88,48,"popPendingEntries"],[85,74,88,65],[85,75,88,66],[85,76,88,67],[86,4,89,2],[86,8,89,8,"rawEntries"],[86,18,89,18],[86,22,89,18,"_entryResult$entries"],[86,42,89,18],[86,45,89,21,"entryResult"],[86,56,89,32],[86,76,89,21,"entryResult"],[86,87,89,32],[86,88,89,34,"entries"],[86,95,89,41],[86,107,89,41,"_entryResult$entries"],[86,127,89,41],[86,130,89,45],[86,132,89,47],[87,4,90,2],[87,8,90,8,"droppedEntriesCount"],[87,27,90,27],[87,30,90,30,"entryResult"],[87,41,90,41],[87,61,90,30,"entryResult"],[87,72,90,41],[87,73,90,43,"droppedEntriesCount"],[87,92,90,62],[88,4,91,2],[88,8,91,6,"rawEntries"],[88,18,91,16],[88,19,91,17,"length"],[88,25,91,23],[88,30,91,28],[88,31,91,29],[88,33,91,31],[89,6,92,4],[90,4,93,2],[91,4,94,2],[91,8,94,8,"entries"],[91,15,94,15],[91,18,94,18,"rawEntries"],[91,28,94,28],[91,29,94,29,"map"],[91,32,94,32],[91,33,94,33,"rawToPerformanceEntry"],[91,64,94,33],[91,65,94,33,"rawToPerformanceEntry"],[91,111,94,54],[91,112,94,55],[92,4,94,56],[92,8,94,56,"_loop"],[92,13,94,56],[92,25,94,56,"_loop"],[92,31,94,56,"observerConfig"],[92,45,94,56],[92,47,95,74],[93,6,96,4],[93,10,96,10,"entriesForObserver"],[93,28,96,50],[93,31,96,53,"entries"],[93,38,96,60],[93,39,96,61,"filter"],[93,45,96,67],[93,46,96,68],[93,56,96,68,"entry"],[93,61,96,73],[93,63,96,77],[94,8,97,6],[94,12,97,10],[94,13,97,11,"observerConfig"],[94,27,97,25],[94,28,97,26,"entryTypes"],[94,38,97,36],[94,39,97,37,"has"],[94,42,97,40],[94,43,97,41,"entry"],[94,48,97,46],[94,49,97,47,"entryType"],[94,58,97,56],[94,59,97,57],[94,61,97,59],[95,10,98,8],[95,17,98,15],[95,22,98,20],[96,8,99,6],[97,8,100,6],[97,12,100,12,"durationThreshold"],[97,29,100,29],[97,32,100,32,"observerConfig"],[97,46,100,46],[97,47,100,47,"entryTypes"],[97,57,100,57],[97,58,100,58,"get"],[97,61,100,61],[97,62,100,62,"entry"],[97,67,100,67],[97,68,100,68,"entryType"],[97,77,100,77],[97,78,100,78],[98,8,101,6],[98,15,101,13,"entry"],[98,20,101,18],[98,21,101,19,"duration"],[98,29,101,27],[98,34,101,32,"durationThreshold"],[98,51,101,49],[98,62,101,32,"durationThreshold"],[98,79,101,49],[98,82,101,53],[98,83,101,54],[98,84,101,55],[99,6,102,4],[99,7,102,5],[99,8,102,6],[100,6,103,4],[100,10,103,8,"entriesForObserver"],[100,28,103,26],[100,29,103,27,"length"],[100,35,103,33],[100,40,103,38],[100,41,103,39],[100,43,103,41],[101,8,104,6],[101,12,104,10],[102,10,105,8,"observerConfig"],[102,24,105,22],[102,25,105,23,"callback"],[102,33,105,31],[102,34,106,10],[102,38,106,14,"PerformanceObserverEntryList"],[102,66,106,42],[102,67,106,43,"entriesForObserver"],[102,85,106,61],[102,86,106,62],[102,88,107,10,"observer"],[102,97,107,18],[102,99,108,10,"droppedEntriesCount"],[102,118,109,8],[102,119,109,9],[103,8,110,6],[103,9,110,7],[103,10,110,8],[103,17,110,15,"error"],[103,22,110,20],[103,24,110,22],[104,10,111,8,"console"],[104,17,111,15],[104,18,111,16,"error"],[104,23,111,21],[104,24,111,22,"error"],[104,29,111,27],[104,30,111,28],[105,8,112,6],[106,6,113,4],[107,4,114,2],[107,5,114,3],[108,4,95,2],[108,13,95,2,"_ref"],[108,17,95,2],[108,21,95,43,"registeredObservers"],[108,40,95,62],[108,41,95,63,"entries"],[108,48,95,70],[108,49,95,71],[108,50,95,72],[109,6,95,72],[109,10,95,72,"_ref2"],[109,15,95,72],[109,22,95,72,"_slicedToArray2"],[109,37,95,72],[109,38,95,72,"default"],[109,45,95,72],[109,47,95,72,"_ref"],[109,51,95,72],[110,6,95,72],[110,10,95,14,"observer"],[110,19,95,22],[110,22,95,22,"_ref2"],[110,27,95,22],[111,6,95,22],[111,10,95,24,"observerConfig"],[111,24,95,38],[111,27,95,38,"_ref2"],[111,32,95,38],[112,6,95,38,"_loop"],[112,11,95,38],[112,12,95,38,"observerConfig"],[112,26,95,38],[113,4,95,38],[114,2,115,0],[114,3,115,1],[115,2,117,7],[115,11,117,16,"warnNoNativePerformanceObserver"],[115,42,117,47,"warnNoNativePerformanceObserver"],[115,43,117,47],[115,45,117,50],[116,4,118,2],[116,8,118,2,"warnOnce"],[116,25,118,10],[116,27,119,4],[116,64,119,41],[116,66,120,4],[116,120,121,2],[116,121,121,3],[117,2,122,0],[118,2,124,0],[118,11,124,9,"applyDurationThresholds"],[118,34,124,32,"applyDurationThresholds"],[118,35,124,32],[118,37,124,35],[119,4,125,2],[119,8,125,8,"durationThresholds"],[119,26,125,62],[119,29,125,65,"Array"],[119,34,125,70],[119,35,125,71,"from"],[119,39,125,75],[119,40,126,4,"registeredObservers"],[119,59,126,23],[119,60,126,24,"values"],[119,66,126,30],[119,67,126,31],[119,68,127,2],[119,69,127,3],[119,70,128,5,"map"],[119,73,128,8],[119,74,128,9],[119,84,128,9,"config"],[119,90,128,15],[120,6,128,15],[120,13,128,19,"config"],[120,19,128,25],[120,20,128,26,"entryTypes"],[120,30,128,36],[121,4,128,36],[121,6,128,37],[121,7,129,5,"reduce"],[121,13,129,11],[121,14,130,6],[121,24,130,7,"accumulator"],[121,35,130,18],[121,37,130,20,"currentValue"],[121,49,130,32],[122,6,130,32],[122,13,130,37,"union"],[122,18,130,42],[122,19,130,43,"accumulator"],[122,30,130,54],[122,32,130,56,"currentValue"],[122,44,130,68],[122,45,130,69],[123,4,130,69],[123,7,131,6],[123,11,131,10,"Map"],[123,14,131,13],[123,15,131,14],[123,16,132,4],[123,17,132,5],[124,4,134,2],[124,13,134,2,"_ref3"],[124,18,134,2],[124,22,134,47,"durationThresholds"],[124,40,134,65],[124,42,134,67],[125,6,134,67],[125,10,134,67,"_ref4"],[125,15,134,67],[125,22,134,67,"_slicedToArray2"],[125,37,134,67],[125,38,134,67,"default"],[125,45,134,67],[125,47,134,67,"_ref3"],[125,52,134,67],[126,6,134,67],[126,10,134,14,"entryType"],[126,19,134,23],[126,22,134,23,"_ref4"],[126,27,134,23],[127,6,134,23],[127,10,134,25,"durationThreshold"],[127,27,134,42],[127,30,134,42,"_ref4"],[127,35,134,42],[128,6,135,4,"NativePerformanceObserver"],[128,40,135,29],[128,52,135,4,"NativePerformanceObserver"],[128,86,135,29],[128,87,135,31,"setDurationThreshold"],[128,107,135,51],[128,108,136,6],[128,112,136,6,"performanceEntryTypeToRaw"],[128,143,136,6],[128,144,136,6,"performanceEntryTypeToRaw"],[128,194,136,31],[128,196,136,32,"entryType"],[128,205,136,41],[128,206,136,42],[128,208,137,6,"durationThreshold"],[128,225,137,23],[128,236,137,6,"durationThreshold"],[128,253,137,23],[128,256,137,27],[128,257,138,4],[128,258,138,5],[129,4,139,2],[130,2,140,0],[131,2,142,0],[131,11,142,9,"getSupportedPerformanceEntryTypes"],[131,44,142,42,"getSupportedPerformanceEntryTypes"],[131,45,142,42],[131,47,142,83],[132,4,143,2],[132,8,143,6],[132,9,143,7,"NativePerformanceObserver"],[132,43,143,32],[132,45,143,34],[133,6,144,4],[133,13,144,11,"Object"],[133,19,144,17],[133,20,144,18,"freeze"],[133,26,144,24],[133,27,144,25],[133,29,144,27],[133,30,144,28],[134,4,145,2],[135,4,146,2],[135,8,146,6],[135,9,146,7,"NativePerformanceObserver"],[135,43,146,32],[135,44,146,33,"getSupportedPerformanceEntryTypes"],[135,77,146,66],[135,79,146,68],[136,6,147,4],[137,6,148,4],[137,13,148,11,"Object"],[137,19,148,17],[137,20,148,18,"freeze"],[137,26,148,24],[137,27,148,25],[137,28,148,26],[137,34,148,32],[137,36,148,34],[137,45,148,43],[137,47,148,45],[137,54,148,52],[137,55,148,53],[137,56,148,54],[138,4,149,2],[139,4,150,2],[139,11,150,9,"Object"],[139,17,150,15],[139,18,150,16,"freeze"],[139,24,150,22],[139,25,151,4,"NativePerformanceObserver"],[139,59,151,29],[139,60,151,30,"getSupportedPerformanceEntryTypes"],[139,93,151,63],[139,94,151,64],[139,95,151,65],[139,96,151,66,"map"],[139,99,151,69],[139,100,152,6,"rawToPerformanceEntryType"],[139,131,152,6],[139,132,152,6,"rawToPerformanceEntryType"],[139,182,153,4],[139,183,154,2],[139,184,154,3],[140,2,155,0],[142,2,157,0],[143,0,158,0],[144,0,159,0],[145,0,160,0],[146,0,161,0],[147,0,162,0],[148,0,163,0],[149,0,164,0],[150,0,165,0],[151,0,166,0],[152,0,167,0],[153,0,168,0],[154,0,169,0],[155,0,170,0],[156,0,171,0],[157,0,172,0],[158,0,173,0],[159,0,174,0],[160,0,175,0],[161,0,176,0],[162,2,157,0],[162,6,157,0,"_callback"],[162,15,157,0],[162,35,157,0,"_classPrivateFieldLooseKey2"],[162,62,157,0],[162,63,157,0,"default"],[162,70,157,0],[163,2,157,0],[163,6,157,0,"_type"],[163,11,157,0],[163,31,157,0,"_classPrivateFieldLooseKey2"],[163,58,157,0],[163,59,157,0,"default"],[163,66,157,0],[164,2,157,0],[164,6,157,0,"_validateObserveOptions"],[164,29,157,0],[164,49,157,0,"_classPrivateFieldLooseKey2"],[164,76,157,0],[164,77,157,0,"default"],[164,84,157,0],[165,2,157,0],[165,6,177,21,"PerformanceObserver"],[165,25,177,40],[165,28,177,40,"exports"],[165,35,177,40],[165,36,177,40,"default"],[165,43,177,40],[166,4,181,2],[166,13,181,2,"PerformanceObserver"],[166,33,181,14,"callback"],[166,41,181,51],[166,43,181,53],[167,6,181,53],[167,10,181,53,"_classCallCheck2"],[167,26,181,53],[167,27,181,53,"default"],[167,34,181,53],[167,42,181,53,"PerformanceObserver"],[167,61,181,53],[168,6,181,53,"Object"],[168,12,181,53],[168,13,181,53,"defineProperty"],[168,27,181,53],[168,34,181,53,"_validateObserveOptions"],[168,57,181,53],[169,8,181,53,"value"],[169,13,181,53],[169,15,181,53,"_validateObserveOptions2"],[170,6,181,53],[171,6,181,53,"Object"],[171,12,181,53],[171,13,181,53,"defineProperty"],[171,27,181,53],[171,34,181,53,"_callback"],[171,43,181,53],[172,8,181,53,"writable"],[172,16,181,53],[173,8,181,53,"value"],[173,13,181,53],[174,6,181,53],[175,6,181,53,"Object"],[175,12,181,53],[175,13,181,53,"defineProperty"],[175,27,181,53],[175,34,181,53,"_type"],[175,39,181,53],[176,8,181,53,"writable"],[176,16,181,53],[177,8,181,53,"value"],[177,13,181,53],[178,6,181,53],[179,6,182,4],[179,10,182,4,"_classPrivateFieldLooseBase2"],[179,38,182,4],[179,39,182,4,"default"],[179,46,182,4],[179,52,182,8],[179,54,182,8,"_callback"],[179,63,182,8],[179,65,182,8,"_callback"],[179,74,182,8],[179,78,182,21,"callback"],[179,86,182,29],[180,4,183,2],[181,4,183,3],[181,15,183,3,"_createClass2"],[181,28,183,3],[181,29,183,3,"default"],[181,36,183,3],[181,38,183,3,"PerformanceObserver"],[181,57,183,3],[182,6,183,3,"key"],[182,9,183,3],[183,6,183,3,"value"],[183,11,183,3],[183,13,185,2],[183,22,185,2,"observe"],[183,29,185,9,"observe"],[183,30,185,10,"options"],[183,37,185,42],[183,39,185,50],[184,8,185,50],[184,12,185,50,"_registeredObservers$"],[184,33,185,50],[185,8,186,4],[185,12,186,8],[185,13,186,9,"NativePerformanceObserver"],[185,47,186,34],[185,49,186,36],[186,10,187,6,"warnNoNativePerformanceObserver"],[186,41,187,37],[186,42,187,38],[186,43,187,39],[187,10,188,6],[188,8,189,4],[189,8,191,4],[189,12,191,4,"_classPrivateFieldLooseBase2"],[189,40,191,4],[189,41,191,4,"default"],[189,48,191,4],[189,54,191,8],[189,56,191,8,"_validateObserveOptions"],[189,79,191,8],[189,81,191,8,"_validateObserveOptions"],[189,104,191,8],[189,106,191,33,"options"],[189,113,191,40],[190,8,193,4],[190,12,193,8,"requestedEntryTypes"],[190,31,193,27],[191,8,195,4],[191,12,195,8,"options"],[191,19,195,15],[191,20,195,16,"entryTypes"],[191,30,195,26],[191,32,195,28],[192,10,196,6],[192,14,196,6,"_classPrivateFieldLooseBase2"],[192,42,196,6],[192,43,196,6,"default"],[192,50,196,6],[192,56,196,10],[192,58,196,10,"_type"],[192,63,196,10],[192,65,196,10,"_type"],[192,70,196,10],[192,74,196,19],[192,84,196,29],[193,10,197,6,"requestedEntryTypes"],[193,29,197,25],[193,32,197,28],[193,36,197,32,"Map"],[193,39,197,35],[193,40,198,8,"options"],[193,47,198,15],[193,48,198,16,"entryTypes"],[193,58,198,26],[193,59,198,27,"map"],[193,62,198,30],[193,63,198,31],[193,73,198,31,"t"],[193,74,198,32],[194,12,198,32],[194,19,198,36],[194,20,198,37,"t"],[194,21,198,38],[194,23,198,40,"undefined"],[194,32,198,49],[194,33,198,50],[195,10,198,50],[195,12,199,6],[195,13,199,7],[196,8,200,4],[196,9,200,5],[196,15,200,11],[197,10,201,6],[197,14,201,6,"_classPrivateFieldLooseBase2"],[197,42,201,6],[197,43,201,6,"default"],[197,50,201,6],[197,56,201,10],[197,58,201,10,"_type"],[197,63,201,10],[197,65,201,10,"_type"],[197,70,201,10],[197,74,201,19],[197,82,201,27],[198,10,202,6,"requestedEntryTypes"],[198,29,202,25],[198,32,202,28],[198,36,202,32,"Map"],[198,39,202,35],[198,40,202,36],[198,41,203,8],[198,42,203,9,"options"],[198,49,203,16],[198,50,203,17,"type"],[198,54,203,21],[198,56,203,23,"options"],[198,63,203,30],[198,64,203,31,"durationThreshold"],[198,81,203,48],[198,82,203,49],[198,83,204,7],[198,84,204,8],[199,8,205,4],[201,8,207,4],[202,8,208,4],[203,8,209,4],[203,12,209,10,"currentEntryTypes"],[203,29,209,27],[203,33,209,27,"_registeredObservers$"],[203,54,209,27],[203,57,209,30,"registeredObservers"],[203,76,209,49],[203,77,209,50,"get"],[203,80,209,53],[203,81,209,54],[203,85,209,58],[203,86,209,59],[203,107,209,30,"_registeredObservers$"],[203,128,209,30],[203,129,209,61,"entryTypes"],[203,139,209,71],[204,8,210,4],[204,12,210,10,"nextEntryTypes"],[204,26,210,24],[204,29,210,27,"currentEntryTypes"],[204,46,210,44],[204,49,211,8,"union"],[204,54,211,13],[204,55,211,14,"requestedEntryTypes"],[204,74,211,33],[204,76,211,35,"currentEntryTypes"],[204,93,211,52],[204,94,211,53],[204,97,212,8,"requestedEntryTypes"],[204,116,212,27],[206,8,214,4],[207,8,215,4],[207,12,215,8,"currentEntryTypes"],[207,29,215,25],[207,33,215,29,"currentEntryTypes"],[207,50,215,46],[207,51,215,47,"size"],[207,55,215,51],[207,60,215,56,"nextEntryTypes"],[207,74,215,70],[207,75,215,71,"size"],[207,79,215,75],[207,81,215,77],[208,10,216,6],[209,8,217,4],[210,8,219,4,"registeredObservers"],[210,27,219,23],[210,28,219,24,"set"],[210,31,219,27],[210,32,219,28],[210,36,219,32],[210,38,219,34],[211,10,220,6,"callback"],[211,18,220,14],[211,24,220,14,"_classPrivateFieldLooseBase2"],[211,52,220,14],[211,53,220,14,"default"],[211,60,220,14],[211,62,220,16],[211,66,220,20],[211,68,220,20,"_callback"],[211,77,220,20],[211,79,220,20,"_callback"],[211,88,220,20],[211,89,220,30],[212,10,221,6,"entryTypes"],[212,20,221,16],[212,22,221,18,"nextEntryTypes"],[213,8,222,4],[213,9,222,5],[213,10,222,6],[214,8,224,4],[214,12,224,8],[214,13,224,9,"isOnPerformanceEntryCallbackSet"],[214,44,224,40],[214,46,224,42],[215,10,225,6,"NativePerformanceObserver"],[215,44,225,31],[215,45,225,32,"setOnPerformanceEntryCallback"],[215,74,225,61],[215,75,226,8,"onPerformanceEntry"],[215,93,227,6],[215,94,227,7],[216,10,228,6,"isOnPerformanceEntryCallbackSet"],[216,41,228,37],[216,44,228,40],[216,48,228,44],[217,8,229,4],[219,8,231,4],[220,8,232,4],[221,8,233,4],[221,12,233,10,"newEntryTypes"],[221,25,233,23],[221,28,233,26,"currentEntryTypes"],[221,45,233,43],[221,48,234,8,"difference"],[221,58,234,18],[221,59,235,10],[221,63,235,14,"Set"],[221,66,235,17],[221,67,235,18,"requestedEntryTypes"],[221,86,235,37],[221,87,235,38,"keys"],[221,91,235,42],[221,92,235,43],[221,93,235,44],[221,94,235,45],[221,96,236,10],[221,100,236,14,"Set"],[221,103,236,17],[221,104,236,18,"currentEntryTypes"],[221,121,236,35],[221,122,236,36,"keys"],[221,126,236,40],[221,127,236,41],[221,128,236,42],[221,129,237,8],[221,130,237,9],[221,133,238,8],[221,137,238,12,"Set"],[221,140,238,15],[221,141,238,16,"requestedEntryTypes"],[221,160,238,35],[221,161,238,36,"keys"],[221,165,238,40],[221,166,238,41],[221,167,238,42],[221,168,238,43],[222,8,239,4],[222,13,239,9],[222,17,239,15,"type"],[222,21,239,19],[222,25,239,23,"newEntryTypes"],[222,38,239,36],[222,40,239,38],[223,10,239,38],[223,14,239,38,"_observerCountPerEntr"],[223,35,239,38],[224,10,240,6],[224,14,240,10],[224,15,240,11,"observerCountPerEntryType"],[224,40,240,36],[224,41,240,37,"has"],[224,44,240,40],[224,45,240,41,"type"],[224,49,240,45],[224,50,240,46],[224,52,240,48],[225,12,241,8],[225,16,241,14,"rawType"],[225,23,241,21],[225,26,241,24],[225,30,241,24,"performanceEntryTypeToRaw"],[225,61,241,24],[225,62,241,24,"performanceEntryTypeToRaw"],[225,112,241,49],[225,114,241,50,"type"],[225,118,241,54],[225,119,241,55],[226,12,242,8,"NativePerformanceObserver"],[226,46,242,33],[226,47,242,34,"startReporting"],[226,61,242,48],[226,62,242,49,"rawType"],[226,69,242,56],[226,70,242,57],[227,10,243,6],[228,10,244,6,"observerCountPerEntryType"],[228,35,244,31],[228,36,244,32,"set"],[228,39,244,35],[228,40,245,8,"type"],[228,44,245,12],[228,46,246,8],[228,48,246,8,"_observerCountPerEntr"],[228,69,246,8],[228,72,246,9,"observerCountPerEntryType"],[228,97,246,34],[228,98,246,35,"get"],[228,101,246,38],[228,102,246,39,"type"],[228,106,246,43],[228,107,246,44],[228,119,246,44,"_observerCountPerEntr"],[228,140,246,44],[228,143,246,48],[228,144,246,49],[228,148,246,53],[228,149,247,6],[228,150,247,7],[229,8,248,4],[230,8,249,4,"applyDurationThresholds"],[230,31,249,27],[230,32,249,28],[230,33,249,29],[231,6,250,2],[232,4,250,3],[233,6,250,3,"key"],[233,9,250,3],[234,6,250,3,"value"],[234,11,250,3],[234,13,252,2],[234,22,252,2,"disconnect"],[234,32,252,12,"disconnect"],[234,33,252,12],[234,35,252,21],[235,8,253,4],[235,12,253,8],[235,13,253,9,"NativePerformanceObserver"],[235,47,253,34],[235,49,253,36],[236,10,254,6,"warnNoNativePerformanceObserver"],[236,41,254,37],[236,42,254,38],[236,43,254,39],[237,10,255,6],[238,8,256,4],[239,8,258,4],[239,12,258,10,"observerConfig"],[239,26,258,24],[239,29,258,27,"registeredObservers"],[239,48,258,46],[239,49,258,47,"get"],[239,52,258,50],[239,53,258,51],[239,57,258,55],[239,58,258,56],[240,8,259,4],[240,12,259,8],[240,13,259,9,"observerConfig"],[240,27,259,23],[240,29,259,25],[241,10,260,6],[242,8,261,4],[244,8,263,4],[245,8,264,4],[245,13,264,9],[245,17,264,15,"type"],[245,21,264,19],[245,25,264,23,"observerConfig"],[245,39,264,37],[245,40,264,38,"entryTypes"],[245,50,264,48],[245,51,264,49,"keys"],[245,55,264,53],[245,56,264,54],[245,57,264,55],[245,59,264,57],[246,10,264,57],[246,14,264,57,"_observerCountPerEntr2"],[246,36,264,57],[247,10,265,6],[247,14,265,12,"numberOfObserversForThisType"],[247,42,265,40],[247,46,265,40,"_observerCountPerEntr2"],[247,68,265,40],[247,71,266,8,"observerCountPerEntryType"],[247,96,266,33],[247,97,266,34,"get"],[247,100,266,37],[247,101,266,38,"type"],[247,105,266,42],[247,106,266,43],[247,118,266,43,"_observerCountPerEntr2"],[247,140,266,43],[247,143,266,47],[247,144,266,48],[248,10,267,6],[248,14,267,10,"numberOfObserversForThisType"],[248,42,267,38],[248,47,267,43],[248,48,267,44],[248,50,267,46],[249,12,268,8,"observerCountPerEntryType"],[249,37,268,33],[249,38,268,34,"delete"],[249,44,268,40],[249,45,268,41,"type"],[249,49,268,45],[249,50,268,46],[250,12,269,8,"NativePerformanceObserver"],[250,46,269,33],[250,47,269,34,"stopReporting"],[250,60,269,47],[250,61,270,10],[250,65,270,10,"performanceEntryTypeToRaw"],[250,96,270,10],[250,97,270,10,"performanceEntryTypeToRaw"],[250,147,270,35],[250,149,270,36,"type"],[250,153,270,40],[250,154,271,8],[250,155,271,9],[251,10,272,6],[251,11,272,7],[251,17,272,13],[251,21,272,17,"numberOfObserversForThisType"],[251,49,272,45],[251,54,272,50],[251,55,272,51],[251,57,272,53],[252,12,273,8,"observerCountPerEntryType"],[252,37,273,33],[252,38,273,34,"set"],[252,41,273,37],[252,42,273,38,"type"],[252,46,273,42],[252,48,273,44,"numberOfObserversForThisType"],[252,76,273,72],[252,79,273,75],[252,80,273,76],[252,81,273,77],[253,10,274,6],[254,8,275,4],[256,8,277,4],[257,8,278,4,"registeredObservers"],[257,27,278,23],[257,28,278,24,"delete"],[257,34,278,30],[257,35,278,31],[257,39,278,35],[257,40,278,36],[258,8,279,4],[258,12,279,8,"registeredObservers"],[258,31,279,27],[258,32,279,28,"size"],[258,36,279,32],[258,41,279,37],[258,42,279,38],[258,44,279,40],[259,10,280,6,"NativePerformanceObserver"],[259,44,280,31],[259,45,280,32,"setOnPerformanceEntryCallback"],[259,74,280,61],[259,75,280,62,"undefined"],[259,84,280,71],[259,85,280,72],[260,10,281,6,"isOnPerformanceEntryCallbackSet"],[260,41,281,37],[260,44,281,40],[260,49,281,45],[261,8,282,4],[262,8,284,4,"applyDurationThresholds"],[262,31,284,27],[262,32,284,28],[262,33,284,29],[263,6,285,2],[264,4,285,3],[265,2,285,3],[265,7,325,0],[266,2,325,0],[266,11,325,0,"_validateObserveOptions2"],[266,36,287,26,"options"],[266,43,287,58],[266,45,287,66],[267,4,288,4],[267,8,288,11,"type"],[267,12,288,15],[267,15,288,50,"options"],[267,22,288,57],[267,23,288,11,"type"],[267,27,288,15],[268,6,288,17,"entryTypes"],[268,16,288,27],[268,19,288,50,"options"],[268,26,288,57],[268,27,288,17,"entryTypes"],[268,37,288,27],[269,6,288,29,"durationThreshold"],[269,23,288,46],[269,26,288,50,"options"],[269,33,288,57],[269,34,288,29,"durationThreshold"],[269,51,288,46],[270,4,290,4],[270,8,290,8],[270,9,290,9,"type"],[270,13,290,13],[270,17,290,17],[270,18,290,18,"entryTypes"],[270,28,290,28],[270,30,290,30],[271,6,291,6],[271,12,291,12],[271,16,291,16,"TypeError"],[271,25,291,25],[271,26,292,8],[271,152,293,6],[271,153,293,7],[272,4,294,4],[273,4,296,4],[273,8,296,8,"entryTypes"],[273,18,296,18],[273,22,296,22,"type"],[273,26,296,26],[273,28,296,28],[274,6,297,6],[274,12,297,12],[274,16,297,16,"TypeError"],[274,25,297,25],[274,26,298,8],[274,149,299,6],[274,150,299,7],[275,4,300,4],[276,4,302,4],[276,8,302,8],[276,12,302,8,"_classPrivateFieldLooseBase2"],[276,40,302,8],[276,41,302,8,"default"],[276,48,302,8],[276,54,302,12],[276,56,302,12,"_type"],[276,61,302,12],[276,63,302,12,"_type"],[276,68,302,12],[276,74,302,23],[276,84,302,33],[276,88,302,37,"type"],[276,92,302,41],[276,94,302,43],[277,6,303,6],[277,12,303,12],[277,16,303,16,"Error"],[277,21,303,21],[277,22,304,8],[277,179,305,6],[277,180,305,7],[278,4,306,4],[279,4,308,4],[279,8,308,8],[279,12,308,8,"_classPrivateFieldLooseBase2"],[279,40,308,8],[279,41,308,8,"default"],[279,48,308,8],[279,54,308,12],[279,56,308,12,"_type"],[279,61,308,12],[279,63,308,12,"_type"],[279,68,308,12],[279,74,308,23],[279,82,308,31],[279,86,308,35,"entryTypes"],[279,96,308,45],[279,98,308,47],[280,6,309,6],[280,12,309,12],[280,16,309,16,"Error"],[280,21,309,21],[280,22,310,8],[280,190,311,6],[280,191,311,7],[281,4,312,4],[282,4,314,4],[282,8,314,8,"entryTypes"],[282,18,314,18],[282,22,314,22,"durationThreshold"],[282,39,314,39],[282,44,314,44,"undefined"],[282,53,314,53],[282,55,314,55],[283,6,315,6],[283,12,315,12],[283,16,315,16,"TypeError"],[283,25,315,25],[283,26,316,8],[283,165,317,6],[283,166,317,7],[284,4,318,4],[285,2,319,2],[286,2,177,21,"PerformanceObserver"],[286,21,177,40],[286,22,321,9,"supportedEntryTypes"],[286,41,321,28],[286,44,322,4,"getSupportedPerformanceEntryTypes"],[286,77,322,37],[286,78,322,38],[286,79,322,39],[287,2,326,0],[287,11,326,9,"union"],[287,16,326,14,"union"],[287,17,327,2,"a"],[287,18,327,29],[287,20,328,2,"b"],[287,21,328,29],[287,23,329,19],[288,4,330,2],[288,8,330,8,"res"],[288,11,330,11],[288,14,330,14],[288,18,330,18,"Map"],[288,21,330,21],[288,22,330,34],[288,23,330,35],[289,4,331,2],[289,13,331,2,"_ref5"],[289,18,331,2],[289,22,331,23,"a"],[289,23,331,24],[289,25,331,26],[290,6,331,26],[290,10,331,26,"_ref6"],[290,15,331,26],[290,22,331,26,"_slicedToArray2"],[290,37,331,26],[290,38,331,26,"default"],[290,45,331,26],[290,47,331,26,"_ref5"],[290,52,331,26],[291,6,331,26],[291,10,331,14,"k"],[291,11,331,15],[291,14,331,15,"_ref6"],[291,19,331,15],[292,6,331,15],[292,10,331,17,"v"],[292,11,331,18],[292,14,331,18,"_ref6"],[292,19,331,18],[293,6,332,4],[293,10,332,8],[293,11,332,9,"b"],[293,12,332,10],[293,13,332,11,"has"],[293,16,332,14],[293,17,332,15,"k"],[293,18,332,16],[293,19,332,17],[293,21,332,19],[294,8,333,6,"res"],[294,11,333,9],[294,12,333,10,"set"],[294,15,333,13],[294,16,333,14,"k"],[294,17,333,15],[294,19,333,17,"v"],[294,20,333,18],[294,21,333,19],[295,6,334,4],[295,7,334,5],[295,13,334,11],[296,8,334,11],[296,12,334,11,"_b$get"],[296,18,334,11],[297,8,335,6,"res"],[297,11,335,9],[297,12,335,10,"set"],[297,15,335,13],[297,16,335,14,"k"],[297,17,335,15],[297,19,335,17,"Math"],[297,23,335,21],[297,24,335,22,"min"],[297,27,335,25],[297,28,335,26,"v"],[297,29,335,27],[297,40,335,26,"v"],[297,41,335,27],[297,44,335,31],[297,45,335,32],[297,48,335,32,"_b$get"],[297,54,335,32],[297,57,335,34,"b"],[297,58,335,35],[297,59,335,36,"get"],[297,62,335,39],[297,63,335,40,"k"],[297,64,335,41],[297,65,335,42],[297,77,335,42,"_b$get"],[297,83,335,42],[297,86,335,46],[297,87,335,47],[297,88,335,48],[297,89,335,49],[298,6,336,4],[299,4,337,2],[300,4,338,2],[300,11,338,9,"res"],[300,14,338,12],[301,2,339,0],[302,2,341,0],[302,11,341,9,"difference"],[302,21,341,19,"difference"],[302,22,341,23,"a"],[302,23,341,41],[302,25,341,43,"b"],[302,26,341,61],[302,28,341,71],[303,4,342,2],[303,11,342,9],[303,15,342,13,"Set"],[303,18,342,16],[303,19,342,17],[303,23,342,17,"_toConsumableArray2"],[303,42,342,17],[303,43,342,17,"default"],[303,50,342,17],[303,52,342,21,"a"],[303,53,342,22],[303,55,342,24,"filter"],[303,61,342,30],[303,62,342,31],[303,72,342,31,"x"],[303,73,342,32],[304,6,342,32],[304,13,342,36],[304,14,342,37,"b"],[304,15,342,38],[304,16,342,39,"has"],[304,19,342,42],[304,20,342,43,"x"],[304,21,342,44],[304,22,342,45],[305,4,342,45],[305,6,342,46],[305,7,342,47],[306,2,343,0],[307,0,343,1],[307,3]],"functionMap":{"names":["<global>","PerformanceObserverEntryList","PerformanceObserverEntryList#constructor","PerformanceObserverEntryList#getEntries","PerformanceObserverEntryList#getEntriesByType","filter$argument_0","PerformanceObserverEntryList#getEntriesByName","onPerformanceEntry","entries.filter$argument_0","warnNoNativePerformanceObserver","applyDurationThresholds","Array.from.map$argument_0","Array.from.map.reduce$argument_0","getSupportedPerformanceEntryTypes","PerformanceObserver","constructor","observe","options.entryTypes.map$argument_0","disconnect","<anonymous>","union","difference"],"mappings":"AAA;OC0B;ECG;GDE;EEE;GFE;EGE;gCCC,iCD;GHC;EKE;kCDK,4BC;QDG,wDC;GLG;CDC;2BO8B;oECY;KDM;CPa;OSE;CTK;AUE;SCI,2BD;MEE,+DF;CVU;AaE;Cba;ecsB;ECI;GDE;EEE;+BCa,mBD;GFoD;EIE;GJiC;EKE;GLgC;CdI;AoBG;CpBa;AqBE;+BhBC,cgB;CrBC"}},"type":"js/module"}]}