{"dependencies":[{"name":"stacktrace-parser","data":{"asyncType":null,"locs":[{"start":{"line":46,"column":27,"index":1193},"end":{"line":46,"column":55,"index":1221}}],"key":"/USIDQIXWvbDieir50qMEeMzgbw="}},{"name":"./parseHermesStack","data":{"asyncType":null,"locs":[{"start":{"line":16,"column":25,"index":382},"end":{"line":16,"column":54,"index":411}}],"key":"+0TK05UiAfoSFoPMCSY1aPHKwYE="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  function convertHermesStack(stack) {\n    var frames = [];\n    for (var entry of stack.entries) {\n      if (entry.type !== 'FRAME') {\n        continue;\n      }\n      var location = entry.location,\n        functionName = entry.functionName;\n      if (location.type === 'NATIVE' || location.type === 'INTERNAL_BYTECODE') {\n        continue;\n      }\n      frames.push({\n        methodName: functionName,\n        file: location.sourceUrl,\n        lineNumber: location.line1Based,\n        column: location.type === 'SOURCE' ? location.column1Based - 1 : location.virtualOffset0Based\n      });\n    }\n    return frames;\n  }\n  function parseErrorStack(errorStack) {\n    if (errorStack == null) {\n      return [];\n    }\n    var stacktraceParser = _$$_REQUIRE(_dependencyMap[0], \"stacktrace-parser\");\n    var parsedStack = Array.isArray(errorStack) ? errorStack : global.HermesInternal ? convertHermesStack(_$$_REQUIRE(_dependencyMap[1], \"./parseHermesStack\")(errorStack)) : stacktraceParser.parse(errorStack).map(function (frame) {\n      return Object.assign({}, frame, {\n        column: frame.column != null ? frame.column - 1 : null\n      });\n    });\n    return parsedStack;\n  }\n  module.exports = parseErrorStack;\n});","lineCount":47,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,18,0],[14,11,18,9,"convertHermesStack"],[14,29,18,27,"convertHermesStack"],[14,30,18,28,"stack"],[14,35,18,52],[14,37,18,73],[15,4,19,2],[15,8,19,8,"frames"],[15,14,19,33],[15,17,19,36],[15,19,19,38],[16,4,20,2],[16,9,20,7],[16,13,20,13,"entry"],[16,18,20,18],[16,22,20,22,"stack"],[16,27,20,27],[16,28,20,28,"entries"],[16,35,20,35],[16,37,20,37],[17,6,21,4],[17,10,21,8,"entry"],[17,15,21,13],[17,16,21,14,"type"],[17,20,21,18],[17,25,21,23],[17,32,21,30],[17,34,21,32],[18,8,22,6],[19,6,23,4],[20,6,24,4],[20,10,24,11,"location"],[20,18,24,19],[20,21,24,37,"entry"],[20,26,24,42],[20,27,24,11,"location"],[20,35,24,19],[21,8,24,21,"functionName"],[21,20,24,33],[21,23,24,37,"entry"],[21,28,24,42],[21,29,24,21,"functionName"],[21,41,24,33],[22,6,25,4],[22,10,25,8,"location"],[22,18,25,16],[22,19,25,17,"type"],[22,23,25,21],[22,28,25,26],[22,36,25,34],[22,40,25,38,"location"],[22,48,25,46],[22,49,25,47,"type"],[22,53,25,51],[22,58,25,56],[22,77,25,75],[22,79,25,77],[23,8,26,6],[24,6,27,4],[25,6,28,4,"frames"],[25,12,28,10],[25,13,28,11,"push"],[25,17,28,15],[25,18,28,16],[26,8,29,6,"methodName"],[26,18,29,16],[26,20,29,18,"functionName"],[26,32,29,30],[27,8,30,6,"file"],[27,12,30,10],[27,14,30,12,"location"],[27,22,30,20],[27,23,30,21,"sourceUrl"],[27,32,30,30],[28,8,31,6,"lineNumber"],[28,18,31,16],[28,20,31,18,"location"],[28,28,31,26],[28,29,31,27,"line1Based"],[28,39,31,37],[29,8,32,6,"column"],[29,14,32,12],[29,16,33,8,"location"],[29,24,33,16],[29,25,33,17,"type"],[29,29,33,21],[29,34,33,26],[29,42,33,34],[29,45,34,12,"location"],[29,53,34,20],[29,54,34,21,"column1Based"],[29,66,34,33],[29,69,34,36],[29,70,34,37],[29,73,35,12,"location"],[29,81,35,20],[29,82,35,21,"virtualOffset0Based"],[30,6,36,4],[30,7,36,5],[30,8,36,6],[31,4,37,2],[32,4,38,2],[32,11,38,9,"frames"],[32,17,38,15],[33,2,39,0],[34,2,41,0],[34,11,41,9,"parseErrorStack"],[34,26,41,24,"parseErrorStack"],[34,27,41,25,"errorStack"],[34,37,41,44],[34,39,41,65],[35,4,42,2],[35,8,42,6,"errorStack"],[35,18,42,16],[35,22,42,20],[35,26,42,24],[35,28,42,26],[36,6,43,4],[36,13,43,11],[36,15,43,13],[37,4,44,2],[38,4,46,2],[38,8,46,8,"stacktraceParser"],[38,24,46,24],[38,27,46,27,"require"],[38,38,46,34],[38,39,46,34,"_dependencyMap"],[38,53,46,34],[38,77,46,54],[38,78,46,55],[39,4,47,2],[39,8,47,8,"parsedStack"],[39,19,47,19],[39,22,47,22,"Array"],[39,27,47,27],[39,28,47,28,"isArray"],[39,35,47,35],[39,36,47,36,"errorStack"],[39,46,47,46],[39,47,47,47],[39,50,48,6,"errorStack"],[39,60,48,16],[39,63,49,6,"global"],[39,69,49,12],[39,70,49,13,"HermesInternal"],[39,84,49,27],[39,87,50,8,"convertHermesStack"],[39,105,50,26],[39,106,50,27,"_$$_REQUIRE"],[39,117,50,27],[39,118,50,27,"_dependencyMap"],[39,132,50,27],[39,159,50,44,"errorStack"],[39,169,50,54],[39,170,50,55],[39,171,50,56],[39,174,51,8,"stacktraceParser"],[39,190,51,24],[39,191,51,25,"parse"],[39,196,51,30],[39,197,51,31,"errorStack"],[39,207,51,41],[39,208,51,42],[39,209,51,43,"map"],[39,212,51,46],[39,213,51,47],[39,223,51,48,"frame"],[39,228,51,53],[40,6,51,53],[40,13,51,53,"Object"],[40,19,51,53],[40,20,51,53,"assign"],[40,26,51,53],[40,31,52,13,"frame"],[40,36,52,18],[41,8,53,10,"column"],[41,14,53,16],[41,16,53,18,"frame"],[41,21,53,23],[41,22,53,24,"column"],[41,28,53,30],[41,32,53,34],[41,36,53,38],[41,39,53,41,"frame"],[41,44,53,46],[41,45,53,47,"column"],[41,51,53,53],[41,54,53,56],[41,55,53,57],[41,58,53,60],[42,6,53,64],[43,4,53,64],[43,5,54,10],[43,6,54,11],[44,4,56,2],[44,11,56,9,"parsedStack"],[44,22,56,20],[45,2,57,0],[46,2,59,0,"module"],[46,8,59,6],[46,9,59,7,"exports"],[46,16,59,14],[46,19,59,17,"parseErrorStack"],[46,34,59,32],[47,0,59,33],[47,3]],"functionMap":{"names":["<global>","convertHermesStack","parseErrorStack","stacktraceParser.parse.map$argument_0"],"mappings":"AAA;ACiB;CDqB;AEE;+CCU;UDG;CFG"}},"type":"js/module"}]}