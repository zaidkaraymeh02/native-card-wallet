{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":101,"column":0,"index":2927}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":101,"column":0,"index":2927}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":101,"column":0,"index":2927}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\");\n  /**\n   * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests\n   * with mixed data (string, native files) to be submitted via XMLHttpRequest.\n   *\n   * Example:\n   *\n   *   var photo = {\n   *     uri: uriFromCameraRoll,\n   *     type: 'image/jpeg',\n   *     name: 'photo.jpg',\n   *   };\n   *\n   *   var body = new FormData();\n   *   body.append('authToken', 'secret');\n   *   body.append('photo', photo);\n   *   body.append('title', 'A beautiful photo!');\n   *\n   *   xhr.open('POST', serverURL);\n   *   xhr.send(body);\n   */\n  var FormData = /*#__PURE__*/function () {\n    function FormData() {\n      _classCallCheck(this, FormData);\n      this._parts = [];\n    }\n    return _createClass(FormData, [{\n      key: \"append\",\n      value: function append(key, value) {\n        // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.\n        // MDN says that any new values should be appended to existing values.\n        // In any case, major browsers allow duplicate keys, so that's what we'll do\n        // too. They'll simply get appended as additional form data parts in the\n        // request body, leaving the server to deal with them.\n        this._parts.push([key, value]);\n      }\n    }, {\n      key: \"getAll\",\n      value: function getAll(key) {\n        return this._parts.filter(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n            name = _ref2[0];\n          return name === key;\n        }).map(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n            value = _ref4[1];\n          return value;\n        });\n      }\n    }, {\n      key: \"getParts\",\n      value: function getParts() {\n        return this._parts.map(function (_ref5) {\n          var _ref6 = _slicedToArray(_ref5, 2),\n            name = _ref6[0],\n            value = _ref6[1];\n          var contentDisposition = 'form-data; name=\"' + name + '\"';\n          var headers = {\n            'content-disposition': contentDisposition\n          };\n\n          // The body part is a \"blob\", which in React Native just means\n          // an object with a `uri` attribute. Optionally, it can also\n          // have a `name` and `type` attribute to specify filename and\n          // content type (cf. web Blob interface.)\n          if (typeof value === 'object' && !Array.isArray(value) && value) {\n            if (typeof value.name === 'string') {\n              headers['content-disposition'] += `; filename=\"${value.name}\"; filename*=utf-8''${encodeURI(value.name)}`;\n            }\n            if (typeof value.type === 'string') {\n              headers['content-type'] = value.type;\n            }\n            return Object.assign({}, value, {\n              headers: headers,\n              fieldName: name\n            });\n          }\n          // Convert non-object values to strings as per FormData.append() spec\n          return {\n            string: String(value),\n            headers: headers,\n            fieldName: name\n          };\n        });\n      }\n    }]);\n  }();\n  module.exports = FormData;\n});","lineCount":104,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_slicedToArray"],[14,20,11,13],[14,23,11,13,"_$$_REQUIRE"],[14,34,11,13],[14,35,11,13,"_dependencyMap"],[14,49,11,13],[15,2,11,13],[15,6,11,13,"_classCallCheck"],[15,21,11,13],[15,24,11,13,"_$$_REQUIRE"],[15,35,11,13],[15,36,11,13,"_dependencyMap"],[15,50,11,13],[16,2,11,13],[16,6,11,13,"_createClass"],[16,18,11,13],[16,21,11,13,"_$$_REQUIRE"],[16,32,11,13],[16,33,11,13,"_dependencyMap"],[16,47,11,13],[17,2,31,0],[18,0,32,0],[19,0,33,0],[20,0,34,0],[21,0,35,0],[22,0,36,0],[23,0,37,0],[24,0,38,0],[25,0,39,0],[26,0,40,0],[27,0,41,0],[28,0,42,0],[29,0,43,0],[30,0,44,0],[31,0,45,0],[32,0,46,0],[33,0,47,0],[34,0,48,0],[35,0,49,0],[36,0,50,0],[37,2,31,0],[37,6,51,6,"FormData"],[37,14,51,14],[38,4,54,2],[38,13,54,2,"FormData"],[38,22,54,2],[38,24,54,16],[39,6,54,16,"_classCallCheck"],[39,21,54,16],[39,28,54,16,"FormData"],[39,36,54,16],[40,6,55,4],[40,10,55,8],[40,11,55,9,"_parts"],[40,17,55,15],[40,20,55,18],[40,22,55,20],[41,4,56,2],[42,4,56,3],[42,11,56,3,"_createClass"],[42,23,56,3],[42,24,56,3,"FormData"],[42,32,56,3],[43,6,56,3,"key"],[43,9,56,3],[44,6,56,3,"value"],[44,11,56,3],[44,13,58,2],[44,22,58,2,"append"],[44,28,58,8,"append"],[44,29,58,9,"key"],[44,32,58,20],[44,34,58,22,"value"],[44,39,58,42],[44,41,58,44],[45,8,59,4],[46,8,60,4],[47,8,61,4],[48,8,62,4],[49,8,63,4],[50,8,64,4],[50,12,64,8],[50,13,64,9,"_parts"],[50,19,64,15],[50,20,64,16,"push"],[50,24,64,20],[50,25,64,21],[50,26,64,22,"key"],[50,29,64,25],[50,31,64,27,"value"],[50,36,64,32],[50,37,64,33],[50,38,64,34],[51,6,65,2],[52,4,65,3],[53,6,65,3,"key"],[53,9,65,3],[54,6,65,3,"value"],[54,11,65,3],[54,13,67,2],[54,22,67,2,"getAll"],[54,28,67,8,"getAll"],[54,29,67,9,"key"],[54,32,67,20],[54,34,67,44],[55,8,68,4],[55,15,68,11],[55,19,68,15],[55,20,68,16,"_parts"],[55,26,68,22],[55,27,69,7,"filter"],[55,33,69,13],[55,34,69,14],[55,44,69,14,"_ref"],[55,48,69,14],[56,10,69,14],[56,14,69,14,"_ref2"],[56,19,69,14],[56,22,69,14,"_slicedToArray"],[56,36,69,14],[56,37,69,14,"_ref"],[56,41,69,14],[57,12,69,16,"name"],[57,16,69,20],[57,19,69,20,"_ref2"],[57,24,69,20],[58,10,69,20],[58,17,69,26,"name"],[58,21,69,30],[58,26,69,35,"key"],[58,29,69,38],[59,8,69,38],[59,10,69,39],[59,11,70,7,"map"],[59,14,70,10],[59,15,70,11],[59,25,70,11,"_ref3"],[59,30,70,11],[60,10,70,11],[60,14,70,11,"_ref4"],[60,19,70,11],[60,22,70,11,"_slicedToArray"],[60,36,70,11],[60,37,70,11,"_ref3"],[60,42,70,11],[61,12,70,15,"value"],[61,17,70,20],[61,20,70,20,"_ref4"],[61,25,70,20],[62,10,70,20],[62,17,70,26,"value"],[62,22,70,31],[63,8,70,31],[63,10,70,32],[64,6,71,2],[65,4,71,3],[66,6,71,3,"key"],[66,9,71,3],[67,6,71,3,"value"],[67,11,71,3],[67,13,73,2],[67,22,73,2,"getParts"],[67,30,73,10,"getParts"],[67,31,73,10],[67,33,73,34],[68,8,74,4],[68,15,74,11],[68,19,74,15],[68,20,74,16,"_parts"],[68,26,74,22],[68,27,74,23,"map"],[68,30,74,26],[68,31,74,27],[68,41,74,27,"_ref5"],[68,46,74,27],[68,48,74,46],[69,10,74,46],[69,14,74,46,"_ref6"],[69,19,74,46],[69,22,74,46,"_slicedToArray"],[69,36,74,46],[69,37,74,46,"_ref5"],[69,42,74,46],[70,12,74,29,"name"],[70,16,74,33],[70,19,74,33,"_ref6"],[70,24,74,33],[71,12,74,35,"value"],[71,17,74,40],[71,20,74,40,"_ref6"],[71,25,74,40],[72,10,75,6],[72,14,75,12,"contentDisposition"],[72,32,75,30],[72,35,75,33],[72,54,75,52],[72,57,75,55,"name"],[72,61,75,59],[72,64,75,62],[72,67,75,65],[73,10,77,6],[73,14,77,12,"headers"],[73,21,77,28],[73,24,77,31],[74,12,77,32],[74,33,77,53],[74,35,77,55,"contentDisposition"],[75,10,77,73],[75,11,77,74],[77,10,79,6],[78,10,80,6],[79,10,81,6],[80,10,82,6],[81,10,83,6],[81,14,83,10],[81,21,83,17,"value"],[81,26,83,22],[81,31,83,27],[81,39,83,35],[81,43,83,39],[81,44,83,40,"Array"],[81,49,83,45],[81,50,83,46,"isArray"],[81,57,83,53],[81,58,83,54,"value"],[81,63,83,59],[81,64,83,60],[81,68,83,64,"value"],[81,73,83,69],[81,75,83,71],[82,12,84,8],[82,16,84,12],[82,23,84,19,"value"],[82,28,84,24],[82,29,84,25,"name"],[82,33,84,29],[82,38,84,34],[82,46,84,42],[82,48,84,44],[83,14,85,10,"headers"],[83,21,85,17],[83,22,85,18],[83,43,85,39],[83,44,85,40],[83,48,85,44],[83,63,86,12,"value"],[83,68,86,17],[83,69,86,18,"name"],[83,73,86,22],[83,96,87,33,"encodeURI"],[83,105,87,42],[83,106,87,43,"value"],[83,111,87,48],[83,112,87,49,"name"],[83,116,87,53],[83,117,87,54],[83,119,87,56],[84,12,88,8],[85,12,89,8],[85,16,89,12],[85,23,89,19,"value"],[85,28,89,24],[85,29,89,25,"type"],[85,33,89,29],[85,38,89,34],[85,46,89,42],[85,48,89,44],[86,14,90,10,"headers"],[86,21,90,17],[86,22,90,18],[86,36,90,32],[86,37,90,33],[86,40,90,36,"value"],[86,45,90,41],[86,46,90,42,"type"],[86,50,90,46],[87,12,91,8],[88,12,92,8],[88,19,92,8,"Object"],[88,25,92,8],[88,26,92,8,"assign"],[88,32,92,8],[88,37,92,19,"value"],[88,42,92,24],[89,14,92,26,"headers"],[89,21,92,33],[89,23,92,26,"headers"],[89,30,92,33],[90,14,92,35,"fieldName"],[90,23,92,44],[90,25,92,46,"name"],[91,12,92,50],[92,10,93,6],[93,10,94,6],[94,10,95,6],[94,17,95,13],[95,12,95,14,"string"],[95,18,95,20],[95,20,95,22,"String"],[95,26,95,28],[95,27,95,29,"value"],[95,32,95,34],[95,33,95,35],[96,12,95,37,"headers"],[96,19,95,44],[96,21,95,37,"headers"],[96,28,95,44],[97,12,95,46,"fieldName"],[97,21,95,55],[97,23,95,57,"name"],[98,10,95,61],[98,11,95,62],[99,8,96,4],[99,9,96,5],[99,10,96,6],[100,6,97,2],[101,4,97,3],[102,2,97,3],[103,2,100,0,"module"],[103,8,100,6],[103,9,100,7,"exports"],[103,16,100,14],[103,19,100,17,"FormData"],[103,27,100,25],[104,0,100,26],[104,3]],"functionMap":{"names":["<global>","FormData","constructor","append","getAll","_parts.filter$argument_0","_parts.filter.map$argument_0","getParts","_parts.map$argument_0"],"mappings":"AAA;ACkD;ECG;GDE;EEE;GFO;EGE;cCE,wBD;WEC,oBF;GHC;EME;2BCC;KDsB;GNC;CDC"}},"type":"js/module"}]}