{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":79,"column":0,"index":2141}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":79,"column":0,"index":2141}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":79,"column":0,"index":2141}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./specs/NativePerformanceObserver","data":{"asyncType":null,"locs":[{"start":{"line":12,"column":0,"index":293},"end":{"line":12,"column":74,"index":367}}],"key":"e5cFiNYK24FFj+OBvYsOcKKfpSs="}},{"name":"./PerformanceObserver","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":222},"end":{"line":11,"column":70,"index":292}}],"key":"dZd/Qr9hEmOi9AeTIps7GE30VG4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _NativePerformanceObserver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"./specs/NativePerformanceObserver\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  var cachedEventCounts;\n  function getCachedEventCounts() {\n    var _cachedEventCounts;\n    if (cachedEventCounts) {\n      return cachedEventCounts;\n    }\n    if (!_NativePerformanceObserver.default) {\n      (0, _$$_REQUIRE(_dependencyMap[4], \"./PerformanceObserver\").warnNoNativePerformanceObserver)();\n      return new Map();\n    }\n    cachedEventCounts = new Map(_NativePerformanceObserver.default.getEventCounts());\n    // $FlowFixMe[incompatible-call]\n    global.queueMicrotask(function () {\n      // To be consistent with the calls to the API from the same task,\n      // but also not to refetch the data from native too often,\n      // schedule to invalidate the cache later,\n      // after the current task is guaranteed to have finished.\n      cachedEventCounts = null;\n    });\n    return (_cachedEventCounts = cachedEventCounts) != null ? _cachedEventCounts : new Map();\n  }\n  /**\n   * Implementation of the EventCounts Web Performance API\n   * corresponding to the standard in\n   * https://www.w3.org/TR/event-timing/#eventcounts\n   */\n  var EventCounts = exports.default = /*#__PURE__*/function () {\n    function EventCounts() {\n      (0, _classCallCheck2.default)(this, EventCounts);\n    }\n    return (0, _createClass2.default)(EventCounts, [{\n      key: \"size\",\n      get:\n      // flowlint unsafe-getters-setters:off\n      function get() {\n        return getCachedEventCounts().size;\n      }\n    }, {\n      key: \"entries\",\n      value: function entries() {\n        return getCachedEventCounts().entries();\n      }\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        return getCachedEventCounts().forEach(callback);\n      }\n    }, {\n      key: \"get\",\n      value: function get(key) {\n        return getCachedEventCounts().get(key);\n      }\n    }, {\n      key: \"has\",\n      value: function has(key) {\n        return getCachedEventCounts().has(key);\n      }\n    }, {\n      key: \"keys\",\n      value: function keys() {\n        return getCachedEventCounts().keys();\n      }\n    }, {\n      key: \"values\",\n      value: function values() {\n        return getCachedEventCounts().values();\n      }\n    }]);\n  }();\n});","lineCount":89,"map":[[9,2,12,0],[9,6,12,0,"_NativePerformanceObserver"],[9,32,12,0],[9,35,12,0,"_interopRequireDefault"],[9,57,12,0],[9,58,12,0,"_$$_REQUIRE"],[9,69,12,0],[9,70,12,0,"_dependencyMap"],[9,84,12,0],[10,2,1,0],[11,0,2,0],[12,0,3,0],[13,0,4,0],[14,0,5,0],[15,0,6,0],[16,0,7,0],[17,0,8,0],[18,0,9,0],[20,2,20,0],[20,6,20,4,"cachedEventCounts"],[20,23,20,43],[21,2,22,0],[21,11,22,9,"getCachedEventCounts"],[21,31,22,29,"getCachedEventCounts"],[21,32,22,29],[21,34,22,53],[22,4,22,53],[22,8,22,53,"_cachedEventCounts"],[22,26,22,53],[23,4,23,2],[23,8,23,6,"cachedEventCounts"],[23,25,23,23],[23,27,23,25],[24,6,24,4],[24,13,24,11,"cachedEventCounts"],[24,30,24,28],[25,4,25,2],[26,4,26,2],[26,8,26,6],[26,9,26,7,"NativePerformanceObserver"],[26,43,26,32],[26,45,26,34],[27,6,27,4],[27,10,27,4,"warnNoNativePerformanceObserver"],[27,40,27,4],[27,41,27,4,"warnNoNativePerformanceObserver"],[27,97,27,35],[27,99,27,36],[27,100,27,37],[28,6,28,4],[28,13,28,11],[28,17,28,15,"Map"],[28,20,28,18],[28,21,28,19],[28,22,28,20],[29,4,29,2],[30,4,31,2,"cachedEventCounts"],[30,21,31,19],[30,24,31,22],[30,28,31,26,"Map"],[30,31,31,29],[30,32,32,4,"NativePerformanceObserver"],[30,66,32,29],[30,67,32,30,"getEventCounts"],[30,81,32,44],[30,82,32,45],[30,83,33,2],[30,84,33,3],[31,4,34,2],[32,4,35,2,"global"],[32,10,35,8],[32,11,35,9,"queueMicrotask"],[32,25,35,23],[32,26,35,24],[32,38,35,30],[33,6,36,4],[34,6,37,4],[35,6,38,4],[36,6,39,4],[37,6,40,4,"cachedEventCounts"],[37,23,40,21],[37,26,40,24],[37,30,40,28],[38,4,41,2],[38,5,41,3],[38,6,41,4],[39,4,42,2],[39,12,42,2,"_cachedEventCounts"],[39,30,42,2],[39,33,42,9,"cachedEventCounts"],[39,50,42,26],[39,62,42,26,"_cachedEventCounts"],[39,80,42,26],[39,83,42,30],[39,87,42,34,"Map"],[39,90,42,37],[39,91,42,38],[39,92,42,39],[40,2,43,0],[41,2,44,0],[42,0,45,0],[43,0,46,0],[44,0,47,0],[45,0,48,0],[46,2,44,0],[46,6,49,21,"EventCounts"],[46,17,49,32],[46,20,49,32,"exports"],[46,27,49,32],[46,28,49,32,"default"],[46,35,49,32],[47,4,49,32],[47,13,49,32,"EventCounts"],[47,25,49,32],[48,6,49,32],[48,10,49,32,"_classCallCheck2"],[48,26,49,32],[48,27,49,32,"default"],[48,34,49,32],[48,42,49,32,"EventCounts"],[48,53,49,32],[49,4,49,32],[50,4,49,32],[50,15,49,32,"_createClass2"],[50,28,49,32],[50,29,49,32,"default"],[50,36,49,32],[50,38,49,32,"EventCounts"],[50,49,49,32],[51,6,49,32,"key"],[51,9,49,32],[52,6,49,32,"get"],[52,9,49,32],[53,6,50,2],[54,6,51,2],[54,15,51,2,"get"],[54,19,51,2],[54,21,51,21],[55,8,52,4],[55,15,52,11,"getCachedEventCounts"],[55,35,52,31],[55,36,52,32],[55,37,52,33],[55,38,52,34,"size"],[55,42,52,38],[56,6,53,2],[57,4,53,3],[58,6,53,3,"key"],[58,9,53,3],[59,6,53,3,"value"],[59,11,53,3],[59,13,55,2],[59,22,55,2,"entries"],[59,29,55,9,"entries"],[59,30,55,9],[59,32,55,40],[60,8,56,4],[60,15,56,11,"getCachedEventCounts"],[60,35,56,31],[60,36,56,32],[60,37,56,33],[60,38,56,34,"entries"],[60,45,56,41],[60,46,56,42],[60,47,56,43],[61,6,57,2],[62,4,57,3],[63,6,57,3,"key"],[63,9,57,3],[64,6,57,3,"value"],[64,11,57,3],[64,13,59,2],[64,22,59,2,"forEach"],[64,29,59,9,"forEach"],[64,30,59,10,"callback"],[64,38,59,50],[64,40,59,58],[65,8,60,4],[65,15,60,11,"getCachedEventCounts"],[65,35,60,31],[65,36,60,32],[65,37,60,33],[65,38,60,34,"forEach"],[65,45,60,41],[65,46,60,42,"callback"],[65,54,60,50],[65,55,60,51],[66,6,61,2],[67,4,61,3],[68,6,61,3,"key"],[68,9,61,3],[69,6,61,3,"value"],[69,11,61,3],[69,13,63,2],[69,22,63,2,"get"],[69,25,63,5,"get"],[69,26,63,6,"key"],[69,29,63,17],[69,31,63,28],[70,8,64,4],[70,15,64,11,"getCachedEventCounts"],[70,35,64,31],[70,36,64,32],[70,37,64,33],[70,38,64,34,"get"],[70,41,64,37],[70,42,64,38,"key"],[70,45,64,41],[70,46,64,42],[71,6,65,2],[72,4,65,3],[73,6,65,3,"key"],[73,9,65,3],[74,6,65,3,"value"],[74,11,65,3],[74,13,67,2],[74,22,67,2,"has"],[74,25,67,5,"has"],[74,26,67,6,"key"],[74,29,67,17],[74,31,67,28],[75,8,68,4],[75,15,68,11,"getCachedEventCounts"],[75,35,68,31],[75,36,68,32],[75,37,68,33],[75,38,68,34,"has"],[75,41,68,37],[75,42,68,38,"key"],[75,45,68,41],[75,46,68,42],[76,6,69,2],[77,4,69,3],[78,6,69,3,"key"],[78,9,69,3],[79,6,69,3,"value"],[79,11,69,3],[79,13,71,2],[79,22,71,2,"keys"],[79,26,71,6,"keys"],[79,27,71,6],[79,29,71,27],[80,8,72,4],[80,15,72,11,"getCachedEventCounts"],[80,35,72,31],[80,36,72,32],[80,37,72,33],[80,38,72,34,"keys"],[80,42,72,38],[80,43,72,39],[80,44,72,40],[81,6,73,2],[82,4,73,3],[83,6,73,3,"key"],[83,9,73,3],[84,6,73,3,"value"],[84,11,73,3],[84,13,75,2],[84,22,75,2,"values"],[84,28,75,8,"values"],[84,29,75,8],[84,31,75,29],[85,8,76,4],[85,15,76,11,"getCachedEventCounts"],[85,35,76,31],[85,36,76,32],[85,37,76,33],[85,38,76,34,"values"],[85,44,76,40],[85,45,76,41],[85,46,76,42],[86,6,77,2],[87,4,77,3],[88,2,77,3],[89,0,77,3],[89,3]],"functionMap":{"names":["<global>","getCachedEventCounts","global.queueMicrotask$argument_0","EventCounts","get__size","entries","forEach","get","has","keys","values"],"mappings":"AAA;ACqB;wBCa;GDM;CDE;eGM;ECE;GDE;EEE;GFE;EGE;GHE;EIE;GJE;EKE;GLE;EME;GNE;EOE;GPE;CHC"}},"type":"js/module"}]}