{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  /*\n  const getReactData = require('getReactData');\n  \n  const INDENTATION_SIZE = 2;\n  const MAX_DEPTH = 2;\n  const MAX_STRING_LENGTH = 50;\n  */\n\n  /**\n   * Dump all React Native root views and their content. This function tries\n   * it best to get the content but ultimately relies on implementation details\n   * of React and will fail in future versions.\n   */\n  function dumpReactTree() {\n    try {\n      return getReactTree();\n    } catch (e) {\n      return 'Failed to dump react tree: ' + e;\n    }\n  }\n  function getReactTree() {\n    // TODO(sema): Reenable tree dumps using the Fiber tree structure. #15945684\n    return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';\n    /*\n    let output = '';\n    const rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);\n    for (const rootId of rootIds) {\n      const instance = ReactNativeMount._instancesByContainerID[rootId];\n      output += `============ Root ID: ${rootId} ============\\n`;\n      output += dumpNode(instance, 0);\n      output += `============ End root ID: ${rootId} ============\\n`;\n    }\n    return output;\n    */\n  }\n\n  /*\n  function dumpNode(node: Object, indentation: number) {\n    const data = getReactData(node);\n    if (data.nodeType === 'Text') {\n      return indent(indentation) + data.text + '\\n';\n    } else if (data.nodeType === 'Empty') {\n      return '';\n    }\n    let output = indent(indentation) + `<${data.name}`;\n    if (data.nodeType === 'Composite') {\n      for (const propName of Object.getOwnPropertyNames(data.props || {})) {\n        if (isNormalProp(propName)) {\n          try {\n            const value = convertValue(data.props[propName]);\n            if (value) {\n              output += ` ${propName}=${value}`;\n            }\n          } catch (e) {\n            const message = `[Failed to get property: ${e}]`;\n            output += ` ${propName}=${message}`;\n          }\n        }\n      }\n    }\n    let childOutput = '';\n    for (const child of data.children || []) {\n      childOutput += dumpNode(child, indentation + 1);\n    }\n  \n    if (childOutput) {\n      output += '>\\n' + childOutput + indent(indentation) + `</${data.name}>\\n`;\n    } else {\n      output += ' />\\n';\n    }\n  \n    return output;\n  }\n  \n  function isNormalProp(name: string): boolean {\n    switch (name) {\n      case 'children':\n      case 'key':\n      case 'ref':\n        return false;\n      default:\n        return true;\n    }\n  }\n  \n  function convertObject(object: Object, depth: number) {\n    if (depth >= MAX_DEPTH) {\n      return '[...omitted]';\n    }\n    let output = '{';\n    let first = true;\n    for (const key of Object.getOwnPropertyNames(object)) {\n      if (!first) {\n        output += ', ';\n      }\n      output += `${key}: ${convertValue(object[key], depth + 1)}`;\n      first = false;\n    }\n    return output + '}';\n  }\n  \n  function convertValue(value, depth = 0): ?string {\n    if (!value) {\n      return null;\n    }\n  \n    switch (typeof value) {\n      case 'string':\n        return JSON.stringify(possiblyEllipsis(value).replace('\\n', '\\\\n'));\n      case 'boolean':\n      case 'number':\n        return JSON.stringify(value);\n      case 'function':\n        return '[function]';\n      case 'object':\n        return convertObject(value, depth);\n      default:\n        return null;\n    }\n  }\n  \n  function possiblyEllipsis(value: string) {\n    if (value.length > MAX_STRING_LENGTH) {\n      return value.slice(0, MAX_STRING_LENGTH) + '...';\n    } else {\n      return value;\n    }\n  }\n  \n  function indent(size: number) {\n    return ' '.repeat(size * INDENTATION_SIZE);\n  }\n  */\n\n  module.exports = dumpReactTree;\n});","lineCount":149,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[22,2,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,2,26,0],[27,11,26,9,"dumpReactTree"],[27,24,26,22,"dumpReactTree"],[27,25,26,22],[27,27,26,33],[28,4,27,2],[28,8,27,6],[29,6,28,4],[29,13,28,11,"getReactTree"],[29,25,28,23],[29,26,28,24],[29,27,28,25],[30,4,29,2],[30,5,29,3],[30,6,29,4],[30,13,29,11,"e"],[30,14,29,12],[30,16,29,14],[31,6,30,4],[31,13,30,11],[31,42,30,40],[31,45,30,43,"e"],[31,46,30,44],[32,4,31,2],[33,2,32,0],[34,2,34,0],[34,11,34,9,"getReactTree"],[34,23,34,21,"getReactTree"],[34,24,34,21],[34,26,34,24],[35,4,35,2],[36,4,36,2],[36,11,37,4],[36,76,37,69],[36,79,38,4],[36,99,38,24],[37,4,40,2],[38,0,41,0],[39,0,42,0],[40,0,43,0],[41,0,44,0],[42,0,45,0],[43,0,46,0],[44,0,47,0],[45,0,48,0],[46,0,49,0],[47,0,50,0],[48,2,51,0],[50,2,53,0],[51,0,54,0],[52,0,55,0],[53,0,56,0],[54,0,57,0],[55,0,58,0],[56,0,59,0],[57,0,60,0],[58,0,61,0],[59,0,62,0],[60,0,63,0],[61,0,64,0],[62,0,65,0],[63,0,66,0],[64,0,67,0],[65,0,68,0],[66,0,69,0],[67,0,70,0],[68,0,71,0],[69,0,72,0],[70,0,73,0],[71,0,74,0],[72,0,75,0],[73,0,76,0],[74,0,77,0],[75,0,78,0],[76,0,79,0],[77,0,80,0],[78,0,81,0],[79,0,82,0],[80,0,83,0],[81,0,84,0],[82,0,85,0],[83,0,86,0],[84,0,87,0],[85,0,88,0],[86,0,89,0],[87,0,90,0],[88,0,91,0],[89,0,92,0],[90,0,93,0],[91,0,94,0],[92,0,95,0],[93,0,96,0],[94,0,97,0],[95,0,98,0],[96,0,99,0],[97,0,100,0],[98,0,101,0],[99,0,102,0],[100,0,103,0],[101,0,104,0],[102,0,105,0],[103,0,106,0],[104,0,107,0],[105,0,108,0],[106,0,109,0],[107,0,110,0],[108,0,111,0],[109,0,112,0],[110,0,113,0],[111,0,114,0],[112,0,115,0],[113,0,116,0],[114,0,117,0],[115,0,118,0],[116,0,119,0],[117,0,120,0],[118,0,121,0],[119,0,122,0],[120,0,123,0],[121,0,124,0],[122,0,125,0],[123,0,126,0],[124,0,127,0],[125,0,128,0],[126,0,129,0],[127,0,130,0],[128,0,131,0],[129,0,132,0],[130,0,133,0],[131,0,134,0],[132,0,135,0],[133,0,136,0],[134,0,137,0],[135,0,138,0],[136,0,139,0],[137,0,140,0],[138,0,141,0],[139,0,142,0],[140,0,143,0],[141,0,144,0],[142,0,145,0],[143,0,146,0],[144,0,147,0],[145,0,148,0],[146,0,149,0],[148,2,151,0,"module"],[148,8,151,6],[148,9,151,7,"exports"],[148,16,151,14],[148,19,151,17,"dumpReactTree"],[148,32,151,30],[149,0,151,31],[149,3]],"functionMap":{"names":["<global>","dumpReactTree","getReactTree"],"mappings":"AAA;ACyB;CDM;AEE;CFiB"}},"type":"js/module"}]}