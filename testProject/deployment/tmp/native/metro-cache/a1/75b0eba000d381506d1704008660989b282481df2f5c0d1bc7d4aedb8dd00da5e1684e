{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":33,"column":0,"index":1010}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":33,"column":0,"index":1010}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = validatePathConfig;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  var formatToList = function formatToList(items) {\n    return items.map(function (key) {\n      return `- ${key}`;\n    }).join('\\n');\n  };\n  function validatePathConfig(config) {\n    var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var validKeys = ['initialRouteName', 'screens'];\n    if (!root) {\n      validKeys.push('path', 'exact', 'stringify', 'parse');\n    }\n    var invalidKeys = Object.keys(config).filter(function (key) {\n      return !validKeys.includes(key);\n    });\n    if (invalidKeys.length) {\n      throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n    }\n    if (config.screens) {\n      Object.entries(config.screens).forEach(function (_ref) {\n        var _ref2 = (0, _slicedToArray2.default)(_ref, 2),\n          _ = _ref2[0],\n          value = _ref2[1];\n        if (typeof value !== 'string') {\n          validatePathConfig(value, false);\n        }\n      });\n    }\n  }\n});","lineCount":36,"map":[[8,2,1,0],[8,6,1,6,"formatToList"],[8,18,1,18],[8,21,1,21],[8,30,1,6,"formatToList"],[8,42,1,18,"formatToList"],[8,43,1,22,"items"],[8,48,1,37],[9,4,1,37],[9,11,2,2,"items"],[9,16,2,7],[9,17,2,8,"map"],[9,20,2,11],[9,21,2,12],[9,31,2,13,"key"],[9,34,2,16],[10,6,2,16],[10,13,2,21],[10,18,2,26,"key"],[10,21,2,29],[10,23,2,31],[11,4,2,31],[11,6,2,32],[11,7,2,33,"join"],[11,11,2,37],[11,12,2,38],[11,16,2,42],[11,17,2,43],[12,2,2,43],[13,2,4,15],[13,11,4,24,"validatePathConfig"],[13,29,4,42,"validatePathConfig"],[13,30,4,43,"config"],[13,36,4,54],[13,38,4,69],[14,4,4,69],[14,8,4,56,"root"],[14,12,4,60],[14,15,4,60,"arguments"],[14,24,4,60],[14,25,4,60,"length"],[14,31,4,60],[14,39,4,60,"arguments"],[14,48,4,60],[14,56,4,60,"undefined"],[14,65,4,60],[14,68,4,60,"arguments"],[14,77,4,60],[14,83,4,63],[14,87,4,67],[15,4,5,2],[15,8,5,8,"validKeys"],[15,17,5,17],[15,20,5,20],[15,21,5,21],[15,39,5,39],[15,41,5,41],[15,50,5,50],[15,51,5,51],[16,4,7,2],[16,8,7,6],[16,9,7,7,"root"],[16,13,7,11],[16,15,7,13],[17,6,8,4,"validKeys"],[17,15,8,13],[17,16,8,14,"push"],[17,20,8,18],[17,21,8,19],[17,27,8,25],[17,29,8,27],[17,36,8,34],[17,38,8,36],[17,49,8,47],[17,51,8,49],[17,58,8,56],[17,59,8,57],[18,4,9,2],[19,4,11,2],[19,8,11,8,"invalidKeys"],[19,19,11,19],[19,22,11,22,"Object"],[19,28,11,28],[19,29,11,29,"keys"],[19,33,11,33],[19,34,11,34,"config"],[19,40,11,40],[19,41,11,41],[19,42,11,42,"filter"],[19,48,11,48],[19,49,12,4],[19,59,12,5,"key"],[19,62,12,8],[20,6,12,8],[20,13,12,13],[20,14,12,14,"validKeys"],[20,23,12,23],[20,24,12,24,"includes"],[20,32,12,32],[20,33,12,33,"key"],[20,36,12,36],[20,37,12,37],[21,4,12,37],[21,5,13,2],[21,6,13,3],[22,4,15,2],[22,8,15,6,"invalidKeys"],[22,19,15,17],[22,20,15,18,"length"],[22,26,15,24],[22,28,15,26],[23,6,16,4],[23,12,16,10],[23,16,16,14,"Error"],[23,21,16,19],[23,22,17,6],[23,73,17,57,"formatToList"],[23,85,17,69],[23,86,18,8,"invalidKeys"],[23,97,19,6],[23,98,19,7],[23,215,19,124,"formatToList"],[23,227,19,136],[23,228,20,8,"validKeys"],[23,237,21,6],[23,238,21,7],[23,358,22,4],[23,359,22,5],[24,4,23,2],[25,4,25,2],[25,8,25,6,"config"],[25,14,25,12],[25,15,25,13,"screens"],[25,22,25,20],[25,24,25,22],[26,6,26,4,"Object"],[26,12,26,10],[26,13,26,11,"entries"],[26,20,26,18],[26,21,26,19,"config"],[26,27,26,25],[26,28,26,26,"screens"],[26,35,26,33],[26,36,26,34],[26,37,26,35,"forEach"],[26,44,26,42],[26,45,26,43],[26,55,26,43,"_ref"],[26,59,26,43],[26,61,26,59],[27,8,26,59],[27,12,26,59,"_ref2"],[27,17,26,59],[27,24,26,59,"_slicedToArray2"],[27,39,26,59],[27,40,26,59,"default"],[27,47,26,59],[27,49,26,59,"_ref"],[27,53,26,59],[28,10,26,45,"_"],[28,11,26,46],[28,14,26,46,"_ref2"],[28,19,26,46],[29,10,26,48,"value"],[29,15,26,53],[29,18,26,53,"_ref2"],[29,23,26,53],[30,8,27,6],[30,12,27,10],[30,19,27,17,"value"],[30,24,27,22],[30,29,27,27],[30,37,27,35],[30,39,27,37],[31,10,28,8,"validatePathConfig"],[31,28,28,26],[31,29,28,27,"value"],[31,34,28,32],[31,36,28,34],[31,41,28,39],[31,42,28,40],[32,8,29,6],[33,6,30,4],[33,7,30,5],[33,8,30,6],[34,4,31,2],[35,2,32,0],[36,0,32,1],[36,3]],"functionMap":{"names":["<global>","formatToList","items.map$argument_0","validatePathConfig","Object.keys.filter$argument_0","Object.entries.forEach$argument_0"],"mappings":"AAA,qBC;YCC,mBD,YD;eGE;ICQ,iCD;2CEc;KFI;CHE"}},"type":"js/module"}]}