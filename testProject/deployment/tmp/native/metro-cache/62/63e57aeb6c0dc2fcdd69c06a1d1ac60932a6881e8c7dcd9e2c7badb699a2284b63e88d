{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":493,"column":0,"index":14326}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"../../StyleSheet/flattenStyle","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":0,"index":299},"end":{"line":13,"column":57,"index":356}}],"key":"g+sqej+kEmJ8JPA0E/+1AP6zIz0="}},{"name":"../../Utilities/differ/deepDiffer","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":0,"index":357},"end":{"line":14,"column":59,"index":416}}],"key":"RIySo1xGvjE24IBLNLlCwGHNNo0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.create = create;\n  exports.diff = diff;\n  var _flattenStyle = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"../../StyleSheet/flattenStyle\"));\n  var _deepDiffer = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"../../Utilities/differ/deepDiffer\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  var emptyObject = {};\n\n  /**\n   * Create a payload that contains all the updates between two sets of props.\n   *\n   * These helpers are all encapsulated into a single module, because they use\n   * mutation as a performance optimization which leads to subtle shared\n   * dependencies between the code paths. To avoid this mutable state leaking\n   * across modules, I've kept them isolated to this module.\n   */\n\n  // Tracks removed keys\n  var removedKeys = null;\n  var removedKeyCount = 0;\n  var deepDifferOptions = {\n    unsafelyIgnoreFunctions: true\n  };\n  function defaultDiffer(prevProp, nextProp) {\n    if (typeof nextProp !== 'object' || nextProp === null) {\n      // Scalars have already been checked for equality\n      return true;\n    } else {\n      // For objects and arrays, the default diffing algorithm is a deep compare\n      return (0, _deepDiffer.default)(prevProp, nextProp, deepDifferOptions);\n    }\n  }\n  function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {\n    if (Array.isArray(node)) {\n      var i = node.length;\n      while (i-- && removedKeyCount > 0) {\n        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);\n      }\n    } else if (node && removedKeyCount > 0) {\n      var obj = node;\n      for (var propKey in removedKeys) {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        if (!removedKeys[propKey]) {\n          continue;\n        }\n        var nextProp = obj[propKey];\n        if (nextProp === undefined) {\n          continue;\n        }\n        var attributeConfig = validAttributes[propKey];\n        if (!attributeConfig) {\n          continue; // not a valid native prop\n        }\n        if (typeof nextProp === 'function') {\n          // $FlowFixMe[incompatible-type] found when upgrading Flow\n          nextProp = true;\n        }\n        if (typeof nextProp === 'undefined') {\n          // $FlowFixMe[incompatible-type] found when upgrading Flow\n          nextProp = null;\n        }\n        if (typeof attributeConfig !== 'object') {\n          // case: !Object is the default case\n          updatePayload[propKey] = nextProp;\n        } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {\n          // case: CustomAttributeConfiguration\n          var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;\n          updatePayload[propKey] = nextValue;\n        }\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        removedKeys[propKey] = false;\n        removedKeyCount--;\n      }\n    }\n  }\n  function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {\n    var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;\n    var i;\n    for (i = 0; i < minLength; i++) {\n      // Diff any items in the array in the forward direction. Repeated keys\n      // will be overwritten by later values.\n      updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);\n    }\n    for (; i < prevArray.length; i++) {\n      // Clear out all remaining properties.\n      updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);\n    }\n    for (; i < nextArray.length; i++) {\n      // Add all remaining properties.\n      updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);\n    }\n    return updatePayload;\n  }\n  function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {\n    if (!updatePayload && prevProp === nextProp) {\n      // If no properties have been added, then we can bail out quickly on object\n      // equality.\n      return updatePayload;\n    }\n    if (!prevProp || !nextProp) {\n      if (nextProp) {\n        return addNestedProperty(updatePayload, nextProp, validAttributes);\n      }\n      if (prevProp) {\n        return clearNestedProperty(updatePayload, prevProp, validAttributes);\n      }\n      return updatePayload;\n    }\n    if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {\n      // Both are leaves, we can diff the leaves.\n      return diffProperties(updatePayload, prevProp, nextProp, validAttributes);\n    }\n    if (Array.isArray(prevProp) && Array.isArray(nextProp)) {\n      // Both are arrays, we can diff the arrays.\n      return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);\n    }\n    if (Array.isArray(prevProp)) {\n      return diffProperties(updatePayload,\n      // $FlowFixMe - We know that this is always an object when the input is.\n      (0, _flattenStyle.default)(prevProp),\n      // $FlowFixMe - We know that this isn't an array because of above flow.\n      nextProp, validAttributes);\n    }\n    return diffProperties(updatePayload, prevProp,\n    // $FlowFixMe - We know that this is always an object when the input is.\n    (0, _flattenStyle.default)(nextProp), validAttributes);\n  }\n\n  /**\n   * addNestedProperty takes a single set of props and valid attribute\n   * attribute configurations. It processes each prop and adds it to the\n   * updatePayload.\n   */\n  function addNestedProperty(updatePayload, nextProp, validAttributes) {\n    if (!nextProp) {\n      return updatePayload;\n    }\n    if (!Array.isArray(nextProp)) {\n      // Add each property of the leaf.\n      return addProperties(updatePayload, nextProp, validAttributes);\n    }\n    for (var i = 0; i < nextProp.length; i++) {\n      // Add all the properties of the array.\n      updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);\n    }\n    return updatePayload;\n  }\n\n  /**\n   * clearNestedProperty takes a single set of props and valid attributes. It\n   * adds a null sentinel to the updatePayload, for each prop key.\n   */\n  function clearNestedProperty(updatePayload, prevProp, validAttributes) {\n    if (!prevProp) {\n      return updatePayload;\n    }\n    if (!Array.isArray(prevProp)) {\n      // Add each property of the leaf.\n      return clearProperties(updatePayload, prevProp, validAttributes);\n    }\n    for (var i = 0; i < prevProp.length; i++) {\n      // Add all the properties of the array.\n      updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);\n    }\n    return updatePayload;\n  }\n\n  /**\n   * diffProperties takes two sets of props and a set of valid attributes\n   * and write to updatePayload the values that changed or were deleted.\n   * If no updatePayload is provided, a new one is created and returned if\n   * anything changed.\n   */\n  function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {\n    var attributeConfig;\n    var nextProp;\n    var prevProp;\n    for (var propKey in nextProps) {\n      attributeConfig = validAttributes[propKey];\n      if (!attributeConfig) {\n        continue; // not a valid native prop\n      }\n      prevProp = prevProps[propKey];\n      nextProp = nextProps[propKey];\n\n      // functions are converted to booleans as markers that the associated\n      // events should be sent from native.\n      if (typeof nextProp === 'function') {\n        nextProp = true;\n        // If nextProp is not a function, then don't bother changing prevProp\n        // since nextProp will win and go into the updatePayload regardless.\n        if (typeof prevProp === 'function') {\n          prevProp = true;\n        }\n      }\n\n      // An explicit value of undefined is treated as a null because it overrides\n      // any other preceding value.\n      if (typeof nextProp === 'undefined') {\n        nextProp = null;\n        if (typeof prevProp === 'undefined') {\n          prevProp = null;\n        }\n      }\n      if (removedKeys) {\n        removedKeys[propKey] = false;\n      }\n      if (updatePayload && updatePayload[propKey] !== undefined) {\n        // Something else already triggered an update to this key because another\n        // value diffed. Since we're now later in the nested arrays our value is\n        // more important so we need to calculate it and override the existing\n        // value. It doesn't matter if nothing changed, we'll set it anyway.\n\n        // Pattern match on: attributeConfig\n        if (typeof attributeConfig !== 'object') {\n          // case: !Object is the default case\n          updatePayload[propKey] = nextProp;\n        } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {\n          // case: CustomAttributeConfiguration\n          var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;\n          updatePayload[propKey] = nextValue;\n        }\n        continue;\n      }\n      if (prevProp === nextProp) {\n        continue; // nothing changed\n      }\n\n      // Pattern match on: attributeConfig\n      if (typeof attributeConfig !== 'object') {\n        // case: !Object is the default case\n        if (defaultDiffer(prevProp, nextProp)) {\n          // a normal leaf has changed\n          (updatePayload || (updatePayload = {}))[propKey] = nextProp;\n        }\n      } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {\n        // case: CustomAttributeConfiguration\n        var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === 'function' ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));\n        if (shouldUpdate) {\n          var _nextValue = typeof attributeConfig.process === 'function' ?\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          attributeConfig.process(nextProp) : nextProp;\n          (updatePayload || (updatePayload = {}))[propKey] = _nextValue;\n        }\n      } else {\n        // default: fallthrough case when nested properties are defined\n        removedKeys = null;\n        removedKeyCount = 0;\n        // We think that attributeConfig is not CustomAttributeConfiguration at\n        // this point so we assume it must be AttributeConfiguration.\n        updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);\n        if (removedKeyCount > 0 && updatePayload) {\n          restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);\n          removedKeys = null;\n        }\n      }\n    }\n\n    // Also iterate through all the previous props to catch any that have been\n    // removed and make sure native gets the signal so it can reset them to the\n    // default.\n    for (var _propKey in prevProps) {\n      if (nextProps[_propKey] !== undefined) {\n        continue; // we've already covered this key in the previous pass\n      }\n      attributeConfig = validAttributes[_propKey];\n      if (!attributeConfig) {\n        continue; // not a valid native prop\n      }\n      if (updatePayload && updatePayload[_propKey] !== undefined) {\n        // This was already updated to a diff result earlier.\n        continue;\n      }\n      prevProp = prevProps[_propKey];\n      if (prevProp === undefined) {\n        continue; // was already empty anyway\n      }\n      // Pattern match on: attributeConfig\n      if (typeof attributeConfig !== 'object' || typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {\n        // case: CustomAttributeConfiguration | !Object\n        // Flag the leaf property for removal by sending a sentinel.\n        (updatePayload || (updatePayload = {}))[_propKey] = null;\n        if (!removedKeys) {\n          removedKeys = {};\n        }\n        if (!removedKeys[_propKey]) {\n          removedKeys[_propKey] = true;\n          removedKeyCount++;\n        }\n      } else {\n        // default:\n        // This is a nested attribute configuration where all the properties\n        // were removed so we need to go through and clear out all of them.\n        updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);\n      }\n    }\n    return updatePayload;\n  }\n\n  /**\n   * addProperties adds all the valid props to the payload after being processed.\n   */\n  function addProperties(updatePayload, props, validAttributes) {\n    // TODO: Fast path\n    return diffProperties(updatePayload, emptyObject, props, validAttributes);\n  }\n\n  /**\n   * clearProperties clears all the previous props by adding a null sentinel\n   * to the payload for each valid key.\n   */\n  function clearProperties(updatePayload, prevProps, validAttributes) {\n    // TODO: Fast path\n    return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);\n  }\n  function create(props, validAttributes) {\n    return addProperties(null,\n    // updatePayload\n    props, validAttributes);\n  }\n  function diff(prevProps, nextProps, validAttributes) {\n    return diffProperties(null,\n    // updatePayload\n    prevProps, nextProps, validAttributes);\n  }\n});","lineCount":339,"map":[[8,2,13,0],[8,6,13,0,"_flattenStyle"],[8,19,13,0],[8,22,13,0,"_interopRequireDefault"],[8,44,13,0],[8,45,13,0,"_$$_REQUIRE"],[8,56,13,0],[8,57,13,0,"_dependencyMap"],[8,71,13,0],[9,2,14,0],[9,6,14,0,"_deepDiffer"],[9,17,14,0],[9,20,14,0,"_interopRequireDefault"],[9,42,14,0],[9,43,14,0,"_$$_REQUIRE"],[9,54,14,0],[9,55,14,0,"_dependencyMap"],[9,69,14,0],[10,2,1,0],[11,0,2,0],[12,0,3,0],[13,0,4,0],[14,0,5,0],[15,0,6,0],[16,0,7,0],[17,0,8,0],[18,0,9,0],[20,2,16,0],[20,6,16,6,"emptyObject"],[20,17,16,17],[20,20,16,20],[20,21,16,21],[20,22,16,22],[22,2,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[31,2,29,0],[32,2,30,0],[32,6,30,4,"removedKeys"],[32,17,30,43],[32,20,30,46],[32,24,30,50],[33,2,31,0],[33,6,31,4,"removedKeyCount"],[33,21,31,19],[33,24,31,22],[33,25,31,23],[34,2,33,0],[34,6,33,6,"deepDifferOptions"],[34,23,33,23],[34,26,33,26],[35,4,34,2,"unsafelyIgnoreFunctions"],[35,27,34,25],[35,29,34,27],[36,2,35,0],[36,3,35,1],[37,2,37,0],[37,11,37,9,"defaultDiffer"],[37,24,37,22,"defaultDiffer"],[37,25,37,23,"prevProp"],[37,33,37,38],[37,35,37,40,"nextProp"],[37,43,37,55],[37,45,37,66],[38,4,38,2],[38,8,38,6],[38,15,38,13,"nextProp"],[38,23,38,21],[38,28,38,26],[38,36,38,34],[38,40,38,38,"nextProp"],[38,48,38,46],[38,53,38,51],[38,57,38,55],[38,59,38,57],[39,6,39,4],[40,6,40,4],[40,13,40,11],[40,17,40,15],[41,4,41,2],[41,5,41,3],[41,11,41,9],[42,6,42,4],[43,6,43,4],[43,13,43,11],[43,17,43,11,"deepDiffer"],[43,36,43,21],[43,38,43,22,"prevProp"],[43,46,43,30],[43,48,43,32,"nextProp"],[43,56,43,40],[43,58,43,42,"deepDifferOptions"],[43,75,43,59],[43,76,43,60],[44,4,44,2],[45,2,45,0],[46,2,47,0],[46,11,47,9,"restoreDeletedValuesInNestedArray"],[46,44,47,42,"restoreDeletedValuesInNestedArray"],[46,45,48,2,"updatePayload"],[46,58,48,23],[46,60,49,2,"node"],[46,64,49,18],[46,66,50,2,"validAttributes"],[46,81,50,41],[46,83,51,2],[47,4,52,2],[47,8,52,6,"Array"],[47,13,52,11],[47,14,52,12,"isArray"],[47,21,52,19],[47,22,52,20,"node"],[47,26,52,24],[47,27,52,25],[47,29,52,27],[48,6,53,4],[48,10,53,8,"i"],[48,11,53,9],[48,14,53,12,"node"],[48,18,53,16],[48,19,53,17,"length"],[48,25,53,23],[49,6,54,4],[49,13,54,11,"i"],[49,14,54,12],[49,16,54,14],[49,20,54,18,"removedKeyCount"],[49,35,54,33],[49,38,54,36],[49,39,54,37],[49,41,54,39],[50,8,55,6,"restoreDeletedValuesInNestedArray"],[50,41,55,39],[50,42,56,8,"updatePayload"],[50,55,56,21],[50,57,57,8,"node"],[50,61,57,12],[50,62,57,13,"i"],[50,63,57,14],[50,64,57,15],[50,66,58,8,"validAttributes"],[50,81,59,6],[50,82,59,7],[51,6,60,4],[52,4,61,2],[52,5,61,3],[52,11,61,9],[52,15,61,13,"node"],[52,19,61,17],[52,23,61,21,"removedKeyCount"],[52,38,61,36],[52,41,61,39],[52,42,61,40],[52,44,61,42],[53,6,62,4],[53,10,62,10,"obj"],[53,13,62,13],[53,16,62,16,"node"],[53,20,62,20],[54,6,63,4],[54,11,63,9],[54,15,63,15,"propKey"],[54,22,63,22],[54,26,63,26,"removedKeys"],[54,37,63,37],[54,39,63,39],[55,8,64,6],[56,8,65,6],[56,12,65,10],[56,13,65,11,"removedKeys"],[56,24,65,22],[56,25,65,23,"propKey"],[56,32,65,30],[56,33,65,31],[56,35,65,33],[57,10,66,8],[58,8,67,6],[59,8,68,6],[59,12,68,10,"nextProp"],[59,20,68,18],[59,23,68,21,"obj"],[59,26,68,24],[59,27,68,25,"propKey"],[59,34,68,32],[59,35,68,33],[60,8,69,6],[60,12,69,10,"nextProp"],[60,20,69,18],[60,25,69,23,"undefined"],[60,34,69,32],[60,36,69,34],[61,10,70,8],[62,8,71,6],[63,8,73,6],[63,12,73,12,"attributeConfig"],[63,27,73,27],[63,30,73,30,"validAttributes"],[63,45,73,45],[63,46,73,46,"propKey"],[63,53,73,53],[63,54,73,54],[64,8,74,6],[64,12,74,10],[64,13,74,11,"attributeConfig"],[64,28,74,26],[64,30,74,28],[65,10,75,8],[65,19,75,17],[65,20,75,18],[66,8,76,6],[67,8,78,6],[67,12,78,10],[67,19,78,17,"nextProp"],[67,27,78,25],[67,32,78,30],[67,42,78,40],[67,44,78,42],[68,10,79,8],[69,10,80,8,"nextProp"],[69,18,80,16],[69,21,80,19],[69,25,80,23],[70,8,81,6],[71,8,82,6],[71,12,82,10],[71,19,82,17,"nextProp"],[71,27,82,25],[71,32,82,30],[71,43,82,41],[71,45,82,43],[72,10,83,8],[73,10,84,8,"nextProp"],[73,18,84,16],[73,21,84,19],[73,25,84,23],[74,8,85,6],[75,8,87,6],[75,12,87,10],[75,19,87,17,"attributeConfig"],[75,34,87,32],[75,39,87,37],[75,47,87,45],[75,49,87,47],[76,10,88,8],[77,10,89,8,"updatePayload"],[77,23,89,21],[77,24,89,22,"propKey"],[77,31,89,29],[77,32,89,30],[77,35,89,33,"nextProp"],[77,43,89,41],[78,8,90,6],[78,9,90,7],[78,15,90,13],[78,19,91,8],[78,26,91,15,"attributeConfig"],[78,41,91,30],[78,42,91,31,"diff"],[78,46,91,35],[78,51,91,40],[78,61,91,50],[78,65,92,8],[78,72,92,15,"attributeConfig"],[78,87,92,30],[78,88,92,31,"process"],[78,95,92,38],[78,100,92,43],[78,110,92,53],[78,112,93,8],[79,10,94,8],[80,10,95,8],[80,14,95,14,"nextValue"],[80,23,95,23],[80,26,96,10],[80,33,96,17,"attributeConfig"],[80,48,96,32],[80,49,96,33,"process"],[80,56,96,40],[80,61,96,45],[80,71,96,55],[80,74,97,14,"attributeConfig"],[80,89,97,29],[80,90,97,30,"process"],[80,97,97,37],[80,98,97,38,"nextProp"],[80,106,97,46],[80,107,97,47],[80,110,98,14,"nextProp"],[80,118,98,22],[81,10,99,8,"updatePayload"],[81,23,99,21],[81,24,99,22,"propKey"],[81,31,99,29],[81,32,99,30],[81,35,99,33,"nextValue"],[81,44,99,42],[82,8,100,6],[83,8,101,6],[84,8,102,6,"removedKeys"],[84,19,102,17],[84,20,102,18,"propKey"],[84,27,102,25],[84,28,102,26],[84,31,102,29],[84,36,102,34],[85,8,103,6,"removedKeyCount"],[85,23,103,21],[85,25,103,23],[86,6,104,4],[87,4,105,2],[88,2,106,0],[89,2,108,0],[89,11,108,9,"diffNestedArrayProperty"],[89,34,108,32,"diffNestedArrayProperty"],[89,35,109,2,"updatePayload"],[89,48,109,30],[89,50,110,2,"prevArray"],[89,59,110,30],[89,61,111,2,"nextArray"],[89,70,111,30],[89,72,112,2,"validAttributes"],[89,87,112,41],[89,89,113,17],[90,4,114,2],[90,8,114,8,"minLength"],[90,17,114,17],[90,20,115,4,"prevArray"],[90,29,115,13],[90,30,115,14,"length"],[90,36,115,20],[90,39,115,23,"nextArray"],[90,48,115,32],[90,49,115,33,"length"],[90,55,115,39],[90,58,115,42,"prevArray"],[90,67,115,51],[90,68,115,52,"length"],[90,74,115,58],[90,77,115,61,"nextArray"],[90,86,115,70],[90,87,115,71,"length"],[90,93,115,77],[91,4,116,2],[91,8,116,6,"i"],[91,9,116,7],[92,4,117,2],[92,9,117,7,"i"],[92,10,117,8],[92,13,117,11],[92,14,117,12],[92,16,117,14,"i"],[92,17,117,15],[92,20,117,18,"minLength"],[92,29,117,27],[92,31,117,29,"i"],[92,32,117,30],[92,34,117,32],[92,36,117,34],[93,6,118,4],[94,6,119,4],[95,6,120,4,"updatePayload"],[95,19,120,17],[95,22,120,20,"diffNestedProperty"],[95,40,120,38],[95,41,121,6,"updatePayload"],[95,54,121,19],[95,56,122,6,"prevArray"],[95,65,122,15],[95,66,122,16,"i"],[95,67,122,17],[95,68,122,18],[95,70,123,6,"nextArray"],[95,79,123,15],[95,80,123,16,"i"],[95,81,123,17],[95,82,123,18],[95,84,124,6,"validAttributes"],[95,99,125,4],[95,100,125,5],[96,4,126,2],[97,4,127,2],[97,11,127,9,"i"],[97,12,127,10],[97,15,127,13,"prevArray"],[97,24,127,22],[97,25,127,23,"length"],[97,31,127,29],[97,33,127,31,"i"],[97,34,127,32],[97,36,127,34],[97,38,127,36],[98,6,128,4],[99,6,129,4,"updatePayload"],[99,19,129,17],[99,22,129,20,"clearNestedProperty"],[99,41,129,39],[99,42,130,6,"updatePayload"],[99,55,130,19],[99,57,131,6,"prevArray"],[99,66,131,15],[99,67,131,16,"i"],[99,68,131,17],[99,69,131,18],[99,71,132,6,"validAttributes"],[99,86,133,4],[99,87,133,5],[100,4,134,2],[101,4,135,2],[101,11,135,9,"i"],[101,12,135,10],[101,15,135,13,"nextArray"],[101,24,135,22],[101,25,135,23,"length"],[101,31,135,29],[101,33,135,31,"i"],[101,34,135,32],[101,36,135,34],[101,38,135,36],[102,6,136,4],[103,6,137,4,"updatePayload"],[103,19,137,17],[103,22,137,20,"addNestedProperty"],[103,39,137,37],[103,40,138,6,"updatePayload"],[103,53,138,19],[103,55,139,6,"nextArray"],[103,64,139,15],[103,65,139,16,"i"],[103,66,139,17],[103,67,139,18],[103,69,140,6,"validAttributes"],[103,84,141,4],[103,85,141,5],[104,4,142,2],[105,4,143,2],[105,11,143,9,"updatePayload"],[105,24,143,22],[106,2,144,0],[107,2,146,0],[107,11,146,9,"diffNestedProperty"],[107,29,146,27,"diffNestedProperty"],[107,30,147,2,"updatePayload"],[107,43,147,30],[107,45,148,2,"prevProp"],[107,53,148,22],[107,55,149,2,"nextProp"],[107,63,149,22],[107,65,150,2,"validAttributes"],[107,80,150,41],[107,82,151,17],[108,4,152,2],[108,8,152,6],[108,9,152,7,"updatePayload"],[108,22,152,20],[108,26,152,24,"prevProp"],[108,34,152,32],[108,39,152,37,"nextProp"],[108,47,152,45],[108,49,152,47],[109,6,153,4],[110,6,154,4],[111,6,155,4],[111,13,155,11,"updatePayload"],[111,26,155,24],[112,4,156,2],[113,4,158,2],[113,8,158,6],[113,9,158,7,"prevProp"],[113,17,158,15],[113,21,158,19],[113,22,158,20,"nextProp"],[113,30,158,28],[113,32,158,30],[114,6,159,4],[114,10,159,8,"nextProp"],[114,18,159,16],[114,20,159,18],[115,8,160,6],[115,15,160,13,"addNestedProperty"],[115,32,160,30],[115,33,160,31,"updatePayload"],[115,46,160,44],[115,48,160,46,"nextProp"],[115,56,160,54],[115,58,160,56,"validAttributes"],[115,73,160,71],[115,74,160,72],[116,6,161,4],[117,6,162,4],[117,10,162,8,"prevProp"],[117,18,162,16],[117,20,162,18],[118,8,163,6],[118,15,163,13,"clearNestedProperty"],[118,34,163,32],[118,35,163,33,"updatePayload"],[118,48,163,46],[118,50,163,48,"prevProp"],[118,58,163,56],[118,60,163,58,"validAttributes"],[118,75,163,73],[118,76,163,74],[119,6,164,4],[120,6,165,4],[120,13,165,11,"updatePayload"],[120,26,165,24],[121,4,166,2],[122,4,168,2],[122,8,168,6],[122,9,168,7,"Array"],[122,14,168,12],[122,15,168,13,"isArray"],[122,22,168,20],[122,23,168,21,"prevProp"],[122,31,168,29],[122,32,168,30],[122,36,168,34],[122,37,168,35,"Array"],[122,42,168,40],[122,43,168,41,"isArray"],[122,50,168,48],[122,51,168,49,"nextProp"],[122,59,168,57],[122,60,168,58],[122,62,168,60],[123,6,169,4],[124,6,170,4],[124,13,170,11,"diffProperties"],[124,27,170,25],[124,28,170,26,"updatePayload"],[124,41,170,39],[124,43,170,41,"prevProp"],[124,51,170,49],[124,53,170,51,"nextProp"],[124,61,170,59],[124,63,170,61,"validAttributes"],[124,78,170,76],[124,79,170,77],[125,4,171,2],[126,4,173,2],[126,8,173,6,"Array"],[126,13,173,11],[126,14,173,12,"isArray"],[126,21,173,19],[126,22,173,20,"prevProp"],[126,30,173,28],[126,31,173,29],[126,35,173,33,"Array"],[126,40,173,38],[126,41,173,39,"isArray"],[126,48,173,46],[126,49,173,47,"nextProp"],[126,57,173,55],[126,58,173,56],[126,60,173,58],[127,6,174,4],[128,6,175,4],[128,13,175,11,"diffNestedArrayProperty"],[128,36,175,34],[128,37,176,6,"updatePayload"],[128,50,176,19],[128,52,177,6,"prevProp"],[128,60,177,14],[128,62,178,6,"nextProp"],[128,70,178,14],[128,72,179,6,"validAttributes"],[128,87,180,4],[128,88,180,5],[129,4,181,2],[130,4,183,2],[130,8,183,6,"Array"],[130,13,183,11],[130,14,183,12,"isArray"],[130,21,183,19],[130,22,183,20,"prevProp"],[130,30,183,28],[130,31,183,29],[130,33,183,31],[131,6,184,4],[131,13,184,11,"diffProperties"],[131,27,184,25],[131,28,185,6,"updatePayload"],[131,41,185,19],[132,6,186,6],[133,6,187,6],[133,10,187,6,"flattenStyle"],[133,31,187,18],[133,33,187,19,"prevProp"],[133,41,187,27],[133,42,187,28],[134,6,188,6],[135,6,189,6,"nextProp"],[135,14,189,14],[135,16,190,6,"validAttributes"],[135,31,191,4],[135,32,191,5],[136,4,192,2],[137,4,194,2],[137,11,194,9,"diffProperties"],[137,25,194,23],[137,26,195,4,"updatePayload"],[137,39,195,17],[137,41,196,4,"prevProp"],[137,49,196,12],[138,4,197,4],[139,4,198,4],[139,8,198,4,"flattenStyle"],[139,29,198,16],[139,31,198,17,"nextProp"],[139,39,198,25],[139,40,198,26],[139,42,199,4,"validAttributes"],[139,57,200,2],[139,58,200,3],[140,2,201,0],[142,2,203,0],[143,0,204,0],[144,0,205,0],[145,0,206,0],[146,0,207,0],[147,2,208,0],[147,11,208,9,"addNestedProperty"],[147,28,208,26,"addNestedProperty"],[147,29,209,2,"updatePayload"],[147,42,209,30],[147,44,210,2,"nextProp"],[147,52,210,22],[147,54,211,2,"validAttributes"],[147,69,211,41],[147,71,212,14],[148,4,213,2],[148,8,213,6],[148,9,213,7,"nextProp"],[148,17,213,15],[148,19,213,17],[149,6,214,4],[149,13,214,11,"updatePayload"],[149,26,214,24],[150,4,215,2],[151,4,217,2],[151,8,217,6],[151,9,217,7,"Array"],[151,14,217,12],[151,15,217,13,"isArray"],[151,22,217,20],[151,23,217,21,"nextProp"],[151,31,217,29],[151,32,217,30],[151,34,217,32],[152,6,218,4],[153,6,219,4],[153,13,219,11,"addProperties"],[153,26,219,24],[153,27,219,25,"updatePayload"],[153,40,219,38],[153,42,219,40,"nextProp"],[153,50,219,48],[153,52,219,50,"validAttributes"],[153,67,219,65],[153,68,219,66],[154,4,220,2],[155,4,222,2],[155,9,222,7],[155,13,222,11,"i"],[155,14,222,12],[155,17,222,15],[155,18,222,16],[155,20,222,18,"i"],[155,21,222,19],[155,24,222,22,"nextProp"],[155,32,222,30],[155,33,222,31,"length"],[155,39,222,37],[155,41,222,39,"i"],[155,42,222,40],[155,44,222,42],[155,46,222,44],[156,6,223,4],[157,6,224,4,"updatePayload"],[157,19,224,17],[157,22,224,20,"addNestedProperty"],[157,39,224,37],[157,40,225,6,"updatePayload"],[157,53,225,19],[157,55,226,6,"nextProp"],[157,63,226,14],[157,64,226,15,"i"],[157,65,226,16],[157,66,226,17],[157,68,227,6,"validAttributes"],[157,83,228,4],[157,84,228,5],[158,4,229,2],[159,4,231,2],[159,11,231,9,"updatePayload"],[159,24,231,22],[160,2,232,0],[162,2,234,0],[163,0,235,0],[164,0,236,0],[165,0,237,0],[166,2,238,0],[166,11,238,9,"clearNestedProperty"],[166,30,238,28,"clearNestedProperty"],[166,31,239,2,"updatePayload"],[166,44,239,30],[166,46,240,2,"prevProp"],[166,54,240,22],[166,56,241,2,"validAttributes"],[166,71,241,41],[166,73,242,17],[167,4,243,2],[167,8,243,6],[167,9,243,7,"prevProp"],[167,17,243,15],[167,19,243,17],[168,6,244,4],[168,13,244,11,"updatePayload"],[168,26,244,24],[169,4,245,2],[170,4,247,2],[170,8,247,6],[170,9,247,7,"Array"],[170,14,247,12],[170,15,247,13,"isArray"],[170,22,247,20],[170,23,247,21,"prevProp"],[170,31,247,29],[170,32,247,30],[170,34,247,32],[171,6,248,4],[172,6,249,4],[172,13,249,11,"clearProperties"],[172,28,249,26],[172,29,249,27,"updatePayload"],[172,42,249,40],[172,44,249,42,"prevProp"],[172,52,249,50],[172,54,249,52,"validAttributes"],[172,69,249,67],[172,70,249,68],[173,4,250,2],[174,4,252,2],[174,9,252,7],[174,13,252,11,"i"],[174,14,252,12],[174,17,252,15],[174,18,252,16],[174,20,252,18,"i"],[174,21,252,19],[174,24,252,22,"prevProp"],[174,32,252,30],[174,33,252,31,"length"],[174,39,252,37],[174,41,252,39,"i"],[174,42,252,40],[174,44,252,42],[174,46,252,44],[175,6,253,4],[176,6,254,4,"updatePayload"],[176,19,254,17],[176,22,254,20,"clearNestedProperty"],[176,41,254,39],[176,42,255,6,"updatePayload"],[176,55,255,19],[176,57,256,6,"prevProp"],[176,65,256,14],[176,66,256,15,"i"],[176,67,256,16],[176,68,256,17],[176,70,257,6,"validAttributes"],[176,85,258,4],[176,86,258,5],[177,4,259,2],[178,4,260,2],[178,11,260,9,"updatePayload"],[178,24,260,22],[179,2,261,0],[181,2,263,0],[182,0,264,0],[183,0,265,0],[184,0,266,0],[185,0,267,0],[186,0,268,0],[187,2,269,0],[187,11,269,9,"diffProperties"],[187,25,269,23,"diffProperties"],[187,26,270,2,"updatePayload"],[187,39,270,30],[187,41,271,2,"prevProps"],[187,50,271,19],[187,52,272,2,"nextProps"],[187,61,272,19],[187,63,273,2,"validAttributes"],[187,78,273,41],[187,80,274,17],[188,4,275,2],[188,8,275,6,"attributeConfig"],[188,23,275,21],[189,4,276,2],[189,8,276,6,"nextProp"],[189,16,276,14],[190,4,277,2],[190,8,277,6,"prevProp"],[190,16,277,14],[191,4,279,2],[191,9,279,7],[191,13,279,13,"propKey"],[191,20,279,20],[191,24,279,24,"nextProps"],[191,33,279,33],[191,35,279,35],[192,6,280,4,"attributeConfig"],[192,21,280,19],[192,24,280,22,"validAttributes"],[192,39,280,37],[192,40,280,38,"propKey"],[192,47,280,45],[192,48,280,46],[193,6,281,4],[193,10,281,8],[193,11,281,9,"attributeConfig"],[193,26,281,24],[193,28,281,26],[194,8,282,6],[194,17,282,15],[194,18,282,16],[195,6,283,4],[196,6,285,4,"prevProp"],[196,14,285,12],[196,17,285,15,"prevProps"],[196,26,285,24],[196,27,285,25,"propKey"],[196,34,285,32],[196,35,285,33],[197,6,286,4,"nextProp"],[197,14,286,12],[197,17,286,15,"nextProps"],[197,26,286,24],[197,27,286,25,"propKey"],[197,34,286,32],[197,35,286,33],[199,6,288,4],[200,6,289,4],[201,6,290,4],[201,10,290,8],[201,17,290,15,"nextProp"],[201,25,290,23],[201,30,290,28],[201,40,290,38],[201,42,290,40],[202,8,291,6,"nextProp"],[202,16,291,14],[202,19,291,18],[202,23,291,28],[203,8,292,6],[204,8,293,6],[205,8,294,6],[205,12,294,10],[205,19,294,17,"prevProp"],[205,27,294,25],[205,32,294,30],[205,42,294,40],[205,44,294,42],[206,10,295,8,"prevProp"],[206,18,295,16],[206,21,295,20],[206,25,295,30],[207,8,296,6],[208,6,297,4],[210,6,299,4],[211,6,300,4],[212,6,301,4],[212,10,301,8],[212,17,301,15,"nextProp"],[212,25,301,23],[212,30,301,28],[212,41,301,39],[212,43,301,41],[213,8,302,6,"nextProp"],[213,16,302,14],[213,19,302,18],[213,23,302,28],[214,8,303,6],[214,12,303,10],[214,19,303,17,"prevProp"],[214,27,303,25],[214,32,303,30],[214,43,303,41],[214,45,303,43],[215,10,304,8,"prevProp"],[215,18,304,16],[215,21,304,20],[215,25,304,30],[216,8,305,6],[217,6,306,4],[218,6,308,4],[218,10,308,8,"removedKeys"],[218,21,308,19],[218,23,308,21],[219,8,309,6,"removedKeys"],[219,19,309,17],[219,20,309,18,"propKey"],[219,27,309,25],[219,28,309,26],[219,31,309,29],[219,36,309,34],[220,6,310,4],[221,6,312,4],[221,10,312,8,"updatePayload"],[221,23,312,21],[221,27,312,25,"updatePayload"],[221,40,312,38],[221,41,312,39,"propKey"],[221,48,312,46],[221,49,312,47],[221,54,312,52,"undefined"],[221,63,312,61],[221,65,312,63],[222,8,313,6],[223,8,314,6],[224,8,315,6],[225,8,316,6],[227,8,318,6],[228,8,319,6],[228,12,319,10],[228,19,319,17,"attributeConfig"],[228,34,319,32],[228,39,319,37],[228,47,319,45],[228,49,319,47],[229,10,320,8],[230,10,321,8,"updatePayload"],[230,23,321,21],[230,24,321,22,"propKey"],[230,31,321,29],[230,32,321,30],[230,35,321,33,"nextProp"],[230,43,321,41],[231,8,322,6],[231,9,322,7],[231,15,322,13],[231,19,323,8],[231,26,323,15,"attributeConfig"],[231,41,323,30],[231,42,323,31,"diff"],[231,46,323,35],[231,51,323,40],[231,61,323,50],[231,65,324,8],[231,72,324,15,"attributeConfig"],[231,87,324,30],[231,88,324,31,"process"],[231,95,324,38],[231,100,324,43],[231,110,324,53],[231,112,325,8],[232,10,326,8],[233,10,327,8],[233,14,327,14,"nextValue"],[233,23,327,23],[233,26,328,10],[233,33,328,17,"attributeConfig"],[233,48,328,32],[233,49,328,33,"process"],[233,56,328,40],[233,61,328,45],[233,71,328,55],[233,74,329,14,"attributeConfig"],[233,89,329,29],[233,90,329,30,"process"],[233,97,329,37],[233,98,329,38,"nextProp"],[233,106,329,46],[233,107,329,47],[233,110,330,14,"nextProp"],[233,118,330,22],[234,10,331,8,"updatePayload"],[234,23,331,21],[234,24,331,22,"propKey"],[234,31,331,29],[234,32,331,30],[234,35,331,33,"nextValue"],[234,44,331,42],[235,8,332,6],[236,8,333,6],[237,6,334,4],[238,6,336,4],[238,10,336,8,"prevProp"],[238,18,336,16],[238,23,336,21,"nextProp"],[238,31,336,29],[238,33,336,31],[239,8,337,6],[239,17,337,15],[239,18,337,16],[240,6,338,4],[242,6,340,4],[243,6,341,4],[243,10,341,8],[243,17,341,15,"attributeConfig"],[243,32,341,30],[243,37,341,35],[243,45,341,43],[243,47,341,45],[244,8,342,6],[245,8,343,6],[245,12,343,10,"defaultDiffer"],[245,25,343,23],[245,26,343,24,"prevProp"],[245,34,343,32],[245,36,343,34,"nextProp"],[245,44,343,42],[245,45,343,43],[245,47,343,45],[246,10,344,8],[247,10,345,8],[247,11,345,9,"updatePayload"],[247,24,345,22],[247,29,345,27,"updatePayload"],[247,42,345,40],[247,45,345,44],[247,46,345,45],[247,47,345,71],[247,48,345,72],[247,50,346,10,"propKey"],[247,57,346,17],[247,58,347,9],[247,61,347,12,"nextProp"],[247,69,347,20],[248,8,348,6],[249,6,349,4],[249,7,349,5],[249,13,349,11],[249,17,350,6],[249,24,350,13,"attributeConfig"],[249,39,350,28],[249,40,350,29,"diff"],[249,44,350,33],[249,49,350,38],[249,59,350,48],[249,63,351,6],[249,70,351,13,"attributeConfig"],[249,85,351,28],[249,86,351,29,"process"],[249,93,351,36],[249,98,351,41],[249,108,351,51],[249,110,352,6],[250,8,353,6],[251,8,354,6],[251,12,354,12,"shouldUpdate"],[251,24,354,24],[251,27,355,8,"prevProp"],[251,35,355,16],[251,40,355,21,"undefined"],[251,49,355,30],[251,54,356,9],[251,61,356,16,"attributeConfig"],[251,76,356,31],[251,77,356,32,"diff"],[251,81,356,36],[251,86,356,41],[251,96,356,51],[251,99,357,12,"attributeConfig"],[251,114,357,27],[251,115,357,28,"diff"],[251,119,357,32],[251,120,357,33,"prevProp"],[251,128,357,41],[251,130,357,43,"nextProp"],[251,138,357,51],[251,139,357,52],[251,142,358,12,"defaultDiffer"],[251,155,358,25],[251,156,358,26,"prevProp"],[251,164,358,34],[251,166,358,36,"nextProp"],[251,174,358,44],[251,175,358,45],[251,176,358,46],[252,8,359,6],[252,12,359,10,"shouldUpdate"],[252,24,359,22],[252,26,359,24],[253,10,360,8],[253,14,360,14,"nextValue"],[253,24,360,23],[253,27,361,10],[253,34,361,17,"attributeConfig"],[253,49,361,32],[253,50,361,33,"process"],[253,57,361,40],[253,62,361,45],[253,72,361,55],[254,10,362,14],[255,10,363,14,"attributeConfig"],[255,25,363,29],[255,26,363,30,"process"],[255,33,363,37],[255,34,363,38,"nextProp"],[255,42,363,46],[255,43,363,47],[255,46,364,14,"nextProp"],[255,54,364,22],[256,10,365,8],[256,11,365,9,"updatePayload"],[256,24,365,22],[256,29,365,27,"updatePayload"],[256,42,365,40],[256,45,365,44],[256,46,365,45],[256,47,365,71],[256,48,365,72],[256,50,366,10,"propKey"],[256,57,366,17],[256,58,367,9],[256,61,367,12,"nextValue"],[256,71,367,21],[257,8,368,6],[258,6,369,4],[258,7,369,5],[258,13,369,11],[259,8,370,6],[260,8,371,6,"removedKeys"],[260,19,371,17],[260,22,371,20],[260,26,371,24],[261,8,372,6,"removedKeyCount"],[261,23,372,21],[261,26,372,24],[261,27,372,25],[262,8,373,6],[263,8,374,6],[264,8,375,6,"updatePayload"],[264,21,375,19],[264,24,375,22,"diffNestedProperty"],[264,42,375,40],[264,43,376,8,"updatePayload"],[264,56,376,21],[264,58,377,8,"prevProp"],[264,66,377,16],[264,68,378,8,"nextProp"],[264,76,378,16],[264,78,379,10,"attributeConfig"],[264,93,380,6],[264,94,380,7],[265,8,381,6],[265,12,381,10,"removedKeyCount"],[265,27,381,25],[265,30,381,28],[265,31,381,29],[265,35,381,33,"updatePayload"],[265,48,381,46],[265,50,381,48],[266,10,382,8,"restoreDeletedValuesInNestedArray"],[266,43,382,41],[266,44,383,10,"updatePayload"],[266,57,383,23],[266,59,384,10,"nextProp"],[266,67,384,18],[266,69,385,12,"attributeConfig"],[266,84,386,8],[266,85,386,9],[267,10,387,8,"removedKeys"],[267,21,387,19],[267,24,387,22],[267,28,387,26],[268,8,388,6],[269,6,389,4],[270,4,390,2],[272,4,392,2],[273,4,393,2],[274,4,394,2],[275,4,395,2],[275,9,395,7],[275,13,395,13,"propKey"],[275,21,395,20],[275,25,395,24,"prevProps"],[275,34,395,33],[275,36,395,35],[276,6,396,4],[276,10,396,8,"nextProps"],[276,19,396,17],[276,20,396,18,"propKey"],[276,28,396,25],[276,29,396,26],[276,34,396,31,"undefined"],[276,43,396,40],[276,45,396,42],[277,8,397,6],[277,17,397,15],[277,18,397,16],[278,6,398,4],[279,6,399,4,"attributeConfig"],[279,21,399,19],[279,24,399,22,"validAttributes"],[279,39,399,37],[279,40,399,38,"propKey"],[279,48,399,45],[279,49,399,46],[280,6,400,4],[280,10,400,8],[280,11,400,9,"attributeConfig"],[280,26,400,24],[280,28,400,26],[281,8,401,6],[281,17,401,15],[281,18,401,16],[282,6,402,4],[283,6,404,4],[283,10,404,8,"updatePayload"],[283,23,404,21],[283,27,404,25,"updatePayload"],[283,40,404,38],[283,41,404,39,"propKey"],[283,49,404,46],[283,50,404,47],[283,55,404,52,"undefined"],[283,64,404,61],[283,66,404,63],[284,8,405,6],[285,8,406,6],[286,6,407,4],[287,6,409,4,"prevProp"],[287,14,409,12],[287,17,409,15,"prevProps"],[287,26,409,24],[287,27,409,25,"propKey"],[287,35,409,32],[287,36,409,33],[288,6,410,4],[288,10,410,8,"prevProp"],[288,18,410,16],[288,23,410,21,"undefined"],[288,32,410,30],[288,34,410,32],[289,8,411,6],[289,17,411,15],[289,18,411,16],[290,6,412,4],[291,6,413,4],[292,6,414,4],[292,10,415,6],[292,17,415,13,"attributeConfig"],[292,32,415,28],[292,37,415,33],[292,45,415,41],[292,49,416,6],[292,56,416,13,"attributeConfig"],[292,71,416,28],[292,72,416,29,"diff"],[292,76,416,33],[292,81,416,38],[292,91,416,48],[292,95,417,6],[292,102,417,13,"attributeConfig"],[292,117,417,28],[292,118,417,29,"process"],[292,125,417,36],[292,130,417,41],[292,140,417,51],[292,142,418,6],[293,8,419,6],[294,8,420,6],[295,8,421,6],[295,9,421,7,"updatePayload"],[295,22,421,20],[295,27,421,25,"updatePayload"],[295,40,421,38],[295,43,421,42],[295,44,421,43],[295,45,421,69],[295,46,421,70],[295,48,422,8,"propKey"],[295,56,422,15],[295,57,423,7],[295,60,423,10],[295,64,423,14],[296,8,424,6],[296,12,424,10],[296,13,424,11,"removedKeys"],[296,24,424,22],[296,26,424,24],[297,10,425,8,"removedKeys"],[297,21,425,19],[297,24,425,23],[297,25,425,24],[297,26,425,47],[298,8,426,6],[299,8,427,6],[299,12,427,10],[299,13,427,11,"removedKeys"],[299,24,427,22],[299,25,427,23,"propKey"],[299,33,427,30],[299,34,427,31],[299,36,427,33],[300,10,428,8,"removedKeys"],[300,21,428,19],[300,22,428,20,"propKey"],[300,30,428,27],[300,31,428,28],[300,34,428,31],[300,38,428,35],[301,10,429,8,"removedKeyCount"],[301,25,429,23],[301,27,429,25],[302,8,430,6],[303,6,431,4],[303,7,431,5],[303,13,431,11],[304,8,432,6],[305,8,433,6],[306,8,434,6],[307,8,435,6,"updatePayload"],[307,21,435,19],[307,24,435,22,"clearNestedProperty"],[307,43,435,41],[307,44,436,8,"updatePayload"],[307,57,436,21],[307,59,437,8,"prevProp"],[307,67,437,16],[307,69,438,10,"attributeConfig"],[307,84,439,6],[307,85,439,7],[308,6,440,4],[309,4,441,2],[310,4,442,2],[310,11,442,9,"updatePayload"],[310,24,442,22],[311,2,443,0],[313,2,445,0],[314,0,446,0],[315,0,447,0],[316,2,448,0],[316,11,448,9,"addProperties"],[316,24,448,22,"addProperties"],[316,25,449,2,"updatePayload"],[316,38,449,30],[316,40,450,2,"props"],[316,45,450,15],[316,47,451,2,"validAttributes"],[316,62,451,41],[316,64,452,17],[317,4,453,2],[318,4,454,2],[318,11,454,9,"diffProperties"],[318,25,454,23],[318,26,454,24,"updatePayload"],[318,39,454,37],[318,41,454,39,"emptyObject"],[318,52,454,50],[318,54,454,52,"props"],[318,59,454,57],[318,61,454,59,"validAttributes"],[318,76,454,74],[318,77,454,75],[319,2,455,0],[321,2,457,0],[322,0,458,0],[323,0,459,0],[324,0,460,0],[325,2,461,0],[325,11,461,9,"clearProperties"],[325,26,461,24,"clearProperties"],[325,27,462,2,"updatePayload"],[325,40,462,30],[325,42,463,2,"prevProps"],[325,51,463,19],[325,53,464,2,"validAttributes"],[325,68,464,41],[325,70,465,17],[326,4,466,2],[327,4,467,2],[327,11,467,9,"diffProperties"],[327,25,467,23],[327,26,467,24,"updatePayload"],[327,39,467,37],[327,41,467,39,"prevProps"],[327,50,467,48],[327,52,467,50,"emptyObject"],[327,63,467,61],[327,65,467,63,"validAttributes"],[327,80,467,78],[327,81,467,79],[328,2,468,0],[329,2,470,7],[329,11,470,16,"create"],[329,17,470,22,"create"],[329,18,471,2,"props"],[329,23,471,15],[329,25,472,2,"validAttributes"],[329,40,472,41],[329,42,473,17],[330,4,474,2],[330,11,474,9,"addProperties"],[330,24,474,22],[330,25,475,4],[330,29,475,8],[331,4,475,10],[332,4,476,4,"props"],[332,9,476,9],[332,11,477,4,"validAttributes"],[332,26,478,2],[332,27,478,3],[333,2,479,0],[334,2,481,7],[334,11,481,16,"diff"],[334,15,481,20,"diff"],[334,16,482,2,"prevProps"],[334,25,482,19],[334,27,483,2,"nextProps"],[334,36,483,19],[334,38,484,2,"validAttributes"],[334,53,484,41],[334,55,485,17],[335,4,486,2],[335,11,486,9,"diffProperties"],[335,25,486,23],[335,26,487,4],[335,30,487,8],[336,4,487,10],[337,4,488,4,"prevProps"],[337,13,488,13],[337,15,489,4,"nextProps"],[337,24,489,13],[337,26,490,4,"validAttributes"],[337,41,491,2],[337,42,491,3],[338,2,492,0],[339,0,492,1],[339,3]],"functionMap":{"names":["<global>","defaultDiffer","restoreDeletedValuesInNestedArray","diffNestedArrayProperty","diffNestedProperty","addNestedProperty","clearNestedProperty","diffProperties","addProperties","clearProperties","create","diff"],"mappings":"AAA;ACoC;CDQ;AEE;CF2D;AGE;CHoC;AIE;CJuD;AKO;CLwB;AMM;CNuB;AOQ;CP8K;AQK;CRO;ASM;CTO;OUE;CVS;OWE;CXW"}},"type":"js/module"}]}