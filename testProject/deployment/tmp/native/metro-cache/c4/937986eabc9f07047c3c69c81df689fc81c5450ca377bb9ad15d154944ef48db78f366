{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":153,"column":0,"index":3948}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":153,"column":0,"index":3948}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":153,"column":0,"index":3948}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":153,"column":0,"index":3948}}],"key":"rcd0dMwf8BS2g+8U1wyhIOxtYEo="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":153,"column":0,"index":3948}}],"key":"4pxOr+e+5cSZAdeEKxSt3F7LoKY="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":153,"column":0,"index":3948}}],"key":"EDnOjopp9yNVawSzfBRsy2dq5dM="}},{"name":"./AnimatedNode","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":30},"end":{"line":2,"column":42,"index":72}}],"key":"3roa5JYtcfxCkpexJXwVNW3mWv0="}},{"name":"fbjs/lib/invariant","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":73},"end":{"line":3,"column":43,"index":116}}],"key":"avnjoAx2FQYjx6eZ7ALk+OuZk68="}},{"name":"../val","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":29,"index":29}}],"key":"CDlYAz5y1JiXWGTtKqaFUSMXIf0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\"));\n  var _AnimatedNode2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./AnimatedNode\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"fbjs/lib/invariant\"));\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\n  // These values are established by empiricism with tests (tradeoff: performance VS precision)\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  var float32ArraySupported = typeof Float32Array === 'function';\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1) {\n    return 3.0 * aA1;\n  }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n  function binarySubdivide(aX, aA, aB, mX1, mX2) {\n    var currentX = 0;\n    var currentT = 0;\n    var i = 0;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n  }\n  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  function bezier(mX1, mY1, mX2, mY2) {\n    // Precompute samples table\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n    }\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n      --currentSample;\n\n      // Interpolate to provide an initial guess for t\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n      if (initialSlope >= NEWTON_MIN_SLOPE) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n    return function BezierEasing(x) {\n      if (mX1 === mY1 && mX2 === mY2) {\n        return x; // linear\n      }\n      // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n      if (x === 0) {\n        return 0;\n      }\n      if (x === 1) {\n        return 1;\n      }\n      return calcBezier(getTForX(x), mY1, mY2);\n    };\n  }\n  var AnimatedBezier = exports.default = /*#__PURE__*/function (_AnimatedNode) {\n    function AnimatedBezier(value, mX1, mY1, mX2, mY2) {\n      var _this;\n      (0, _classCallCheck2.default)(this, AnimatedBezier);\n      (0, _invariant.default)(value instanceof _AnimatedNode2.default, `Reanimated: Bezier node argument should be of type AnimatedNode but got ${value}`);\n      _this = _callSuper(this, AnimatedBezier, [{\n        type: 'bezier',\n        mX1: mX1,\n        mY1: mY1,\n        mX2: mX2,\n        mY2: mY2,\n        input: value\n      }, [value]]);\n      _this._value = value;\n      _this._bezier = bezier(mX1, mY1, mX2, mY2);\n      return _this;\n    }\n    (0, _inherits2.default)(AnimatedBezier, _AnimatedNode);\n    return (0, _createClass2.default)(AnimatedBezier, [{\n      key: \"toString\",\n      value: function toString() {\n        return `AnimatedBezier, id: ${this.__nodeID}`;\n      }\n    }, {\n      key: \"__onEvaluate\",\n      value: function __onEvaluate() {\n        return this._bezier((0, _$$_REQUIRE(_dependencyMap[8], \"../val\").val)(this._value));\n      }\n    }]);\n  }(_AnimatedNode2.default);\n});","lineCount":142,"map":[[12,2,2,0],[12,6,2,0,"_AnimatedNode2"],[12,20,2,0],[12,23,2,0,"_interopRequireDefault"],[12,45,2,0],[12,46,2,0,"_$$_REQUIRE"],[12,57,2,0],[12,58,2,0,"_dependencyMap"],[12,72,2,0],[13,2,3,0],[13,6,3,0,"_invariant"],[13,16,3,0],[13,19,3,0,"_interopRequireDefault"],[13,41,3,0],[13,42,3,0,"_$$_REQUIRE"],[13,53,3,0],[13,54,3,0,"_dependencyMap"],[13,68,3,0],[14,2,3,43],[14,11,3,43,"_callSuper"],[14,22,3,43,"t"],[14,23,3,43],[14,25,3,43,"o"],[14,26,3,43],[14,28,3,43,"e"],[14,29,3,43],[14,40,3,43,"o"],[14,41,3,43],[14,48,3,43,"_getPrototypeOf2"],[14,64,3,43],[14,65,3,43,"default"],[14,72,3,43],[14,74,3,43,"o"],[14,75,3,43],[14,82,3,43,"_possibleConstructorReturn2"],[14,109,3,43],[14,110,3,43,"default"],[14,117,3,43],[14,119,3,43,"t"],[14,120,3,43],[14,122,3,43,"_isNativeReflectConstruct"],[14,147,3,43],[14,152,3,43,"Reflect"],[14,159,3,43],[14,160,3,43,"construct"],[14,169,3,43],[14,170,3,43,"o"],[14,171,3,43],[14,173,3,43,"e"],[14,174,3,43],[14,186,3,43,"_getPrototypeOf2"],[14,202,3,43],[14,203,3,43,"default"],[14,210,3,43],[14,212,3,43,"t"],[14,213,3,43],[14,215,3,43,"constructor"],[14,226,3,43],[14,230,3,43,"o"],[14,231,3,43],[14,232,3,43,"apply"],[14,237,3,43],[14,238,3,43,"t"],[14,239,3,43],[14,241,3,43,"e"],[14,242,3,43],[15,2,3,43],[15,11,3,43,"_isNativeReflectConstruct"],[15,37,3,43],[15,51,3,43,"t"],[15,52,3,43],[15,56,3,43,"Boolean"],[15,63,3,43],[15,64,3,43,"prototype"],[15,73,3,43],[15,74,3,43,"valueOf"],[15,81,3,43],[15,82,3,43,"call"],[15,86,3,43],[15,87,3,43,"Reflect"],[15,94,3,43],[15,95,3,43,"construct"],[15,104,3,43],[15,105,3,43,"Boolean"],[15,112,3,43],[15,145,3,43,"t"],[15,146,3,43],[15,159,3,43,"_isNativeReflectConstruct"],[15,184,3,43],[15,196,3,43,"_isNativeReflectConstruct"],[15,222,3,43],[15,235,3,43,"t"],[15,236,3,43],[16,2,5,0],[17,2,6,0],[17,6,6,4,"NEWTON_ITERATIONS"],[17,23,6,21],[17,26,6,24],[17,27,6,25],[18,2,7,0],[18,6,7,4,"NEWTON_MIN_SLOPE"],[18,22,7,20],[18,25,7,23],[18,30,7,28],[19,2,8,0],[19,6,8,4,"SUBDIVISION_PRECISION"],[19,27,8,25],[19,30,8,28],[19,39,8,37],[20,2,9,0],[20,6,9,4,"SUBDIVISION_MAX_ITERATIONS"],[20,32,9,30],[20,35,9,33],[20,37,9,35],[21,2,11,0],[21,6,11,4,"kSplineTableSize"],[21,22,11,20],[21,25,11,23],[21,27,11,25],[22,2,12,0],[22,6,12,4,"kSampleStepSize"],[22,21,12,19],[22,24,12,22],[22,27,12,25],[22,31,12,29,"kSplineTableSize"],[22,47,12,45],[22,50,12,48],[22,53,12,51],[22,54,12,52],[23,2,14,0],[23,6,14,4,"float32ArraySupported"],[23,27,14,25],[23,30,14,28],[23,37,14,35,"Float32Array"],[23,49,14,47],[23,54,14,52],[23,64,14,62],[24,2,16,0],[24,11,16,9,"A"],[24,12,16,10,"A"],[24,13,16,11,"aA1"],[24,16,16,14],[24,18,16,16,"aA2"],[24,21,16,19],[24,23,16,21],[25,4,17,2],[25,11,17,9],[25,14,17,12],[25,17,17,15],[25,20,17,18],[25,23,17,21,"aA2"],[25,26,17,24],[25,29,17,27],[25,32,17,30],[25,35,17,33,"aA1"],[25,38,17,36],[26,2,18,0],[27,2,19,0],[27,11,19,9,"B"],[27,12,19,10,"B"],[27,13,19,11,"aA1"],[27,16,19,14],[27,18,19,16,"aA2"],[27,21,19,19],[27,23,19,21],[28,4,20,2],[28,11,20,9],[28,14,20,12],[28,17,20,15,"aA2"],[28,20,20,18],[28,23,20,21],[28,26,20,24],[28,29,20,27,"aA1"],[28,32,20,30],[29,2,21,0],[30,2,22,0],[30,11,22,9,"C"],[30,12,22,10,"C"],[30,13,22,11,"aA1"],[30,16,22,14],[30,18,22,16],[31,4,23,2],[31,11,23,9],[31,14,23,12],[31,17,23,15,"aA1"],[31,20,23,18],[32,2,24,0],[34,2,26,0],[35,2,27,0],[35,11,27,9,"calcBezier"],[35,21,27,19,"calcBezier"],[35,22,27,20,"aT"],[35,24,27,22],[35,26,27,24,"aA1"],[35,29,27,27],[35,31,27,29,"aA2"],[35,34,27,32],[35,36,27,34],[36,4,28,2],[36,11,28,9],[36,12,28,10],[36,13,28,11,"A"],[36,14,28,12],[36,15,28,13,"aA1"],[36,18,28,16],[36,20,28,18,"aA2"],[36,23,28,21],[36,24,28,22],[36,27,28,25,"aT"],[36,29,28,27],[36,32,28,30,"B"],[36,33,28,31],[36,34,28,32,"aA1"],[36,37,28,35],[36,39,28,37,"aA2"],[36,42,28,40],[36,43,28,41],[36,47,28,45,"aT"],[36,49,28,47],[36,52,28,50,"C"],[36,53,28,51],[36,54,28,52,"aA1"],[36,57,28,55],[36,58,28,56],[36,62,28,60,"aT"],[36,64,28,62],[37,2,29,0],[39,2,31,0],[40,2,32,0],[40,11,32,9,"getSlope"],[40,19,32,17,"getSlope"],[40,20,32,18,"aT"],[40,22,32,20],[40,24,32,22,"aA1"],[40,27,32,25],[40,29,32,27,"aA2"],[40,32,32,30],[40,34,32,32],[41,4,33,2],[41,11,33,9],[41,14,33,12],[41,17,33,15,"A"],[41,18,33,16],[41,19,33,17,"aA1"],[41,22,33,20],[41,24,33,22,"aA2"],[41,27,33,25],[41,28,33,26],[41,31,33,29,"aT"],[41,33,33,31],[41,36,33,34,"aT"],[41,38,33,36],[41,41,33,39],[41,44,33,42],[41,47,33,45,"B"],[41,48,33,46],[41,49,33,47,"aA1"],[41,52,33,50],[41,54,33,52,"aA2"],[41,57,33,55],[41,58,33,56],[41,61,33,59,"aT"],[41,63,33,61],[41,66,33,64,"C"],[41,67,33,65],[41,68,33,66,"aA1"],[41,71,33,69],[41,72,33,70],[42,2,34,0],[43,2,36,0],[43,11,36,9,"binarySubdivide"],[43,26,36,24,"binarySubdivide"],[43,27,36,25,"aX"],[43,29,36,27],[43,31,36,29,"aA"],[43,33,36,31],[43,35,36,33,"aB"],[43,37,36,35],[43,39,36,37,"mX1"],[43,42,36,40],[43,44,36,42,"mX2"],[43,47,36,45],[43,49,36,47],[44,4,37,2],[44,8,37,6,"currentX"],[44,16,37,14],[44,19,37,17],[44,20,37,18],[45,4,38,2],[45,8,38,6,"currentT"],[45,16,38,14],[45,19,38,17],[45,20,38,18],[46,4,39,2],[46,8,39,6,"i"],[46,9,39,7],[46,12,39,10],[46,13,39,11],[47,4,40,2],[47,7,40,5],[48,6,41,4,"currentT"],[48,14,41,12],[48,17,41,15,"aA"],[48,19,41,17],[48,22,41,20],[48,23,41,21,"aB"],[48,25,41,23],[48,28,41,26,"aA"],[48,30,41,28],[48,34,41,32],[48,37,41,35],[49,6,42,4,"currentX"],[49,14,42,12],[49,17,42,15,"calcBezier"],[49,27,42,25],[49,28,42,26,"currentT"],[49,36,42,34],[49,38,42,36,"mX1"],[49,41,42,39],[49,43,42,41,"mX2"],[49,46,42,44],[49,47,42,45],[49,50,42,48,"aX"],[49,52,42,50],[50,6,43,4],[50,10,43,8,"currentX"],[50,18,43,16],[50,21,43,19],[50,24,43,22],[50,26,43,24],[51,8,44,6,"aB"],[51,10,44,8],[51,13,44,11,"currentT"],[51,21,44,19],[52,6,45,4],[52,7,45,5],[52,13,45,11],[53,8,46,6,"aA"],[53,10,46,8],[53,13,46,11,"currentT"],[53,21,46,19],[54,6,47,4],[55,4,48,2],[55,5,48,3],[55,13,49,4,"Math"],[55,17,49,8],[55,18,49,9,"abs"],[55,21,49,12],[55,22,49,13,"currentX"],[55,30,49,21],[55,31,49,22],[55,34,49,25,"SUBDIVISION_PRECISION"],[55,55,49,46],[55,59,50,4],[55,61,50,6,"i"],[55,62,50,7],[55,65,50,10,"SUBDIVISION_MAX_ITERATIONS"],[55,91,50,36],[56,4,52,2],[56,11,52,9,"currentT"],[56,19,52,17],[57,2,53,0],[58,2,55,0],[58,11,55,9,"newtonRaphsonIterate"],[58,31,55,29,"newtonRaphsonIterate"],[58,32,55,30,"aX"],[58,34,55,32],[58,36,55,34,"aGuessT"],[58,43,55,41],[58,45,55,43,"mX1"],[58,48,55,46],[58,50,55,48,"mX2"],[58,53,55,51],[58,55,55,53],[59,4,56,2],[59,9,56,7],[59,13,56,11,"i"],[59,14,56,12],[59,17,56,15],[59,18,56,16],[59,20,56,18,"i"],[59,21,56,19],[59,24,56,22,"NEWTON_ITERATIONS"],[59,41,56,39],[59,43,56,41],[59,45,56,43,"i"],[59,46,56,44],[59,48,56,46],[60,6,57,4],[60,10,57,8,"currentSlope"],[60,22,57,20],[60,25,57,23,"getSlope"],[60,33,57,31],[60,34,57,32,"aGuessT"],[60,41,57,39],[60,43,57,41,"mX1"],[60,46,57,44],[60,48,57,46,"mX2"],[60,51,57,49],[60,52,57,50],[61,6,58,4],[61,10,58,8,"currentSlope"],[61,22,58,20],[61,27,58,25],[61,30,58,28],[61,32,58,30],[62,8,59,6],[62,15,59,13,"aGuessT"],[62,22,59,20],[63,6,60,4],[64,6,61,4],[64,10,61,8,"currentX"],[64,18,61,16],[64,21,61,19,"calcBezier"],[64,31,61,29],[64,32,61,30,"aGuessT"],[64,39,61,37],[64,41,61,39,"mX1"],[64,44,61,42],[64,46,61,44,"mX2"],[64,49,61,47],[64,50,61,48],[64,53,61,51,"aX"],[64,55,61,53],[65,6,62,4,"aGuessT"],[65,13,62,11],[65,17,62,15,"currentX"],[65,25,62,23],[65,28,62,26,"currentSlope"],[65,40,62,38],[66,4,63,2],[67,4,64,2],[67,11,64,9,"aGuessT"],[67,18,64,16],[68,2,65,0],[69,2,67,0],[69,11,67,9,"bezier"],[69,17,67,15,"bezier"],[69,18,67,16,"mX1"],[69,21,67,19],[69,23,67,21,"mY1"],[69,26,67,24],[69,28,67,26,"mX2"],[69,31,67,29],[69,33,67,31,"mY2"],[69,36,67,34],[69,38,67,36],[70,4,68,2],[71,4,69,2],[71,8,69,6,"sampleValues"],[71,20,69,18],[71,23,69,21,"float32ArraySupported"],[71,44,69,42],[71,47,70,6],[71,51,70,10,"Float32Array"],[71,63,70,22],[71,64,70,23,"kSplineTableSize"],[71,80,70,39],[71,81,70,40],[71,84,71,6],[71,88,71,10,"Array"],[71,93,71,15],[71,94,71,16,"kSplineTableSize"],[71,110,71,32],[71,111,71,33],[72,4,72,2],[72,8,72,6,"mX1"],[72,11,72,9],[72,16,72,14,"mY1"],[72,19,72,17],[72,23,72,21,"mX2"],[72,26,72,24],[72,31,72,29,"mY2"],[72,34,72,32],[72,36,72,34],[73,6,73,4],[73,11,73,9],[73,15,73,13,"i"],[73,16,73,14],[73,19,73,17],[73,20,73,18],[73,22,73,20,"i"],[73,23,73,21],[73,26,73,24,"kSplineTableSize"],[73,42,73,40],[73,44,73,42],[73,46,73,44,"i"],[73,47,73,45],[73,49,73,47],[74,8,74,6,"sampleValues"],[74,20,74,18],[74,21,74,19,"i"],[74,22,74,20],[74,23,74,21],[74,26,74,24,"calcBezier"],[74,36,74,34],[74,37,74,35,"i"],[74,38,74,36],[74,41,74,39,"kSampleStepSize"],[74,56,74,54],[74,58,74,56,"mX1"],[74,61,74,59],[74,63,74,61,"mX2"],[74,66,74,64],[74,67,74,65],[75,6,75,4],[76,4,76,2],[77,4,78,2],[77,13,78,11,"getTForX"],[77,21,78,19,"getTForX"],[77,22,78,20,"aX"],[77,24,78,22],[77,26,78,24],[78,6,79,4],[78,10,79,8,"intervalStart"],[78,23,79,21],[78,26,79,24],[78,29,79,27],[79,6,80,4],[79,10,80,8,"currentSample"],[79,23,80,21],[79,26,80,24],[79,27,80,25],[80,6,81,4],[80,10,81,8,"lastSample"],[80,20,81,18],[80,23,81,21,"kSplineTableSize"],[80,39,81,37],[80,42,81,40],[80,43,81,41],[81,6,83,4],[81,13,85,6,"currentSample"],[81,26,85,19],[81,31,85,24,"lastSample"],[81,41,85,34],[81,45,85,38,"sampleValues"],[81,57,85,50],[81,58,85,51,"currentSample"],[81,71,85,64],[81,72,85,65],[81,76,85,69,"aX"],[81,78,85,71],[81,80,86,6],[81,82,86,8,"currentSample"],[81,95,86,21],[81,97,87,6],[82,8,88,6,"intervalStart"],[82,21,88,19],[82,25,88,23,"kSampleStepSize"],[82,40,88,38],[83,6,89,4],[84,6,90,4],[84,8,90,6,"currentSample"],[84,21,90,19],[86,6,92,4],[87,6,93,4],[87,10,93,8,"dist"],[87,14,93,12],[87,17,94,6],[87,18,94,7,"aX"],[87,20,94,9],[87,23,94,12,"sampleValues"],[87,35,94,24],[87,36,94,25,"currentSample"],[87,49,94,38],[87,50,94,39],[87,55,95,7,"sampleValues"],[87,67,95,19],[87,68,95,20,"currentSample"],[87,81,95,33],[87,84,95,36],[87,85,95,37],[87,86,95,38],[87,89,95,41,"sampleValues"],[87,101,95,53],[87,102,95,54,"currentSample"],[87,115,95,67],[87,116,95,68],[87,117,95,69],[88,6,96,4],[88,10,96,8,"guessForT"],[88,19,96,17],[88,22,96,20,"intervalStart"],[88,35,96,33],[88,38,96,36,"dist"],[88,42,96,40],[88,45,96,43,"kSampleStepSize"],[88,60,96,58],[89,6,98,4],[89,10,98,8,"initialSlope"],[89,22,98,20],[89,25,98,23,"getSlope"],[89,33,98,31],[89,34,98,32,"guessForT"],[89,43,98,41],[89,45,98,43,"mX1"],[89,48,98,46],[89,50,98,48,"mX2"],[89,53,98,51],[89,54,98,52],[90,6,99,4],[90,10,99,8,"initialSlope"],[90,22,99,20],[90,26,99,24,"NEWTON_MIN_SLOPE"],[90,42,99,40],[90,44,99,42],[91,8,100,6],[91,15,100,13,"newtonRaphsonIterate"],[91,35,100,33],[91,36,100,34,"aX"],[91,38,100,36],[91,40,100,38,"guessForT"],[91,49,100,47],[91,51,100,49,"mX1"],[91,54,100,52],[91,56,100,54,"mX2"],[91,59,100,57],[91,60,100,58],[92,6,101,4],[92,7,101,5],[92,13,101,11],[92,17,101,15,"initialSlope"],[92,29,101,27],[92,34,101,32],[92,37,101,35],[92,39,101,37],[93,8,102,6],[93,15,102,13,"guessForT"],[93,24,102,22],[94,6,103,4],[94,7,103,5],[94,13,103,11],[95,8,104,6],[95,15,104,13,"binarySubdivide"],[95,30,104,28],[95,31,105,8,"aX"],[95,33,105,10],[95,35,106,8,"intervalStart"],[95,48,106,21],[95,50,107,8,"intervalStart"],[95,63,107,21],[95,66,107,24,"kSampleStepSize"],[95,81,107,39],[95,83,108,8,"mX1"],[95,86,108,11],[95,88,109,8,"mX2"],[95,91,110,6],[95,92,110,7],[96,6,111,4],[97,4,112,2],[98,4,114,2],[98,11,114,9],[98,20,114,18,"BezierEasing"],[98,32,114,30,"BezierEasing"],[98,33,114,31,"x"],[98,34,114,32],[98,36,114,34],[99,6,115,4],[99,10,115,8,"mX1"],[99,13,115,11],[99,18,115,16,"mY1"],[99,21,115,19],[99,25,115,23,"mX2"],[99,28,115,26],[99,33,115,31,"mY2"],[99,36,115,34],[99,38,115,36],[100,8,116,6],[100,15,116,13,"x"],[100,16,116,14],[100,17,116,15],[100,18,116,16],[101,6,117,4],[102,6,118,4],[103,6,119,4],[103,10,119,8,"x"],[103,11,119,9],[103,16,119,14],[103,17,119,15],[103,19,119,17],[104,8,120,6],[104,15,120,13],[104,16,120,14],[105,6,121,4],[106,6,122,4],[106,10,122,8,"x"],[106,11,122,9],[106,16,122,14],[106,17,122,15],[106,19,122,17],[107,8,123,6],[107,15,123,13],[107,16,123,14],[108,6,124,4],[109,6,125,4],[109,13,125,11,"calcBezier"],[109,23,125,21],[109,24,125,22,"getTForX"],[109,32,125,30],[109,33,125,31,"x"],[109,34,125,32],[109,35,125,33],[109,37,125,35,"mY1"],[109,40,125,38],[109,42,125,40,"mY2"],[109,45,125,43],[109,46,125,44],[110,4,126,2],[110,5,126,3],[111,2,127,0],[112,2,127,1],[112,6,129,21,"AnimatedBezier"],[112,20,129,35],[112,23,129,35,"exports"],[112,30,129,35],[112,31,129,35,"default"],[112,38,129,35],[112,64,129,35,"_AnimatedNode"],[112,77,129,35],[113,4,133,2],[113,13,133,2,"AnimatedBezier"],[113,28,133,14,"value"],[113,33,133,19],[113,35,133,21,"mX1"],[113,38,133,24],[113,40,133,26,"mY1"],[113,43,133,29],[113,45,133,31,"mX2"],[113,48,133,34],[113,50,133,36,"mY2"],[113,53,133,39],[113,55,133,41],[114,6,133,41],[114,10,133,41,"_this"],[114,15,133,41],[115,6,133,41],[115,10,133,41,"_classCallCheck2"],[115,26,133,41],[115,27,133,41,"default"],[115,34,133,41],[115,42,133,41,"AnimatedBezier"],[115,56,133,41],[116,6,134,4],[116,10,134,4,"invariant"],[116,28,134,13],[116,30,135,6,"value"],[116,35,135,11],[116,47,135,23,"AnimatedNode"],[116,69,135,35],[116,71,136,6],[116,146,136,81,"value"],[116,151,136,86],[116,153,137,4],[116,154,137,5],[117,6,138,4,"_this"],[117,11,138,4],[117,14,138,4,"_callSuper"],[117,24,138,4],[117,31,138,4,"AnimatedBezier"],[117,45,138,4],[117,48,138,10],[118,8,138,12,"type"],[118,12,138,16],[118,14,138,18],[118,22,138,26],[119,8,138,28,"mX1"],[119,11,138,31],[119,13,138,28,"mX1"],[119,16,138,31],[120,8,138,33,"mY1"],[120,11,138,36],[120,13,138,33,"mY1"],[120,16,138,36],[121,8,138,38,"mX2"],[121,11,138,41],[121,13,138,38,"mX2"],[121,16,138,41],[122,8,138,43,"mY2"],[122,11,138,46],[122,13,138,43,"mY2"],[122,16,138,46],[123,8,138,48,"input"],[123,13,138,53],[123,15,138,55,"value"],[124,6,138,61],[124,7,138,62],[124,9,138,64],[124,10,139,6,"value"],[124,15,139,11],[124,16,140,5],[125,6,141,4,"_this"],[125,11,141,4],[125,12,141,9,"_value"],[125,18,141,15],[125,21,141,18,"value"],[125,26,141,23],[126,6,142,4,"_this"],[126,11,142,4],[126,12,142,9,"_bezier"],[126,19,142,16],[126,22,142,19,"bezier"],[126,28,142,25],[126,29,142,26,"mX1"],[126,32,142,29],[126,34,142,31,"mY1"],[126,37,142,34],[126,39,142,36,"mX2"],[126,42,142,39],[126,44,142,41,"mY2"],[126,47,142,44],[126,48,142,45],[127,6,142,46],[127,13,142,46,"_this"],[127,18,142,46],[128,4,143,2],[129,4,143,3],[129,8,143,3,"_inherits2"],[129,18,143,3],[129,19,143,3,"default"],[129,26,143,3],[129,28,143,3,"AnimatedBezier"],[129,42,143,3],[129,44,143,3,"_AnimatedNode"],[129,57,143,3],[130,4,143,3],[130,15,143,3,"_createClass2"],[130,28,143,3],[130,29,143,3,"default"],[130,36,143,3],[130,38,143,3,"AnimatedBezier"],[130,52,143,3],[131,6,143,3,"key"],[131,9,143,3],[132,6,143,3,"value"],[132,11,143,3],[132,13,145,2],[132,22,145,2,"toString"],[132,30,145,10,"toString"],[132,31,145,10],[132,33,145,13],[133,8,146,4],[133,15,146,11],[133,38,146,34],[133,42,146,38],[133,43,146,39,"__nodeID"],[133,51,146,47],[133,53,146,49],[134,6,147,2],[135,4,147,3],[136,6,147,3,"key"],[136,9,147,3],[137,6,147,3,"value"],[137,11,147,3],[137,13,149,2],[137,22,149,2,"__onEvaluate"],[137,34,149,14,"__onEvaluate"],[137,35,149,14],[137,37,149,17],[138,8,150,4],[138,15,150,11],[138,19,150,15],[138,20,150,16,"_bezier"],[138,27,150,23],[138,28,150,24],[138,32,150,24,"val"],[138,62,150,24],[138,63,150,24,"val"],[138,76,150,27],[138,78,150,28],[138,82,150,32],[138,83,150,33,"_value"],[138,89,150,39],[138,90,150,40],[138,91,150,41],[139,6,151,2],[140,4,151,3],[141,2,151,3],[141,4,129,44,"AnimatedNode"],[141,26,129,56],[142,0,129,56],[142,3]],"functionMap":{"names":["<global>","A","B","C","calcBezier","getSlope","binarySubdivide","newtonRaphsonIterate","bezier","getTForX","BezierEasing","AnimatedBezier","constructor","toString","__onEvaluate"],"mappings":"AAA;ACe;CDE;AEC;CFE;AGC;CHE;AIG;CJE;AKG;CLE;AME;CNiB;AOE;CPU;AQE;ECW;GDkC;SEE;GFY;CRC;eWE;ECI;GDU;EEE;GFE;EGE;GHE;CXC"}},"type":"js/module"}]}