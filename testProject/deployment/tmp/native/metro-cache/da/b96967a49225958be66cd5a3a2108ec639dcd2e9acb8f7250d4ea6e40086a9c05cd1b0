{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Portions Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  /**\n   * BezierEasing - use bezier curve for transition easing function\n   * https://github.com/gre/bezier-easing\n   * @copyright 2014-2015 GaÃ«tan Renaudeau. MIT License.\n   */\n\n  'use strict';\n\n  // These values are established by empiricism with tests (tradeoff: performance VS precision)\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = bezier;\n  var NEWTON_ITERATIONS = 4;\n  var NEWTON_MIN_SLOPE = 0.001;\n  var SUBDIVISION_PRECISION = 0.0000001;\n  var SUBDIVISION_MAX_ITERATIONS = 10;\n  var kSplineTableSize = 11;\n  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n  var float32ArraySupported = typeof Float32Array === 'function';\n  function A(aA1, aA2) {\n    return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n  }\n  function B(aA1, aA2) {\n    return 3.0 * aA2 - 6.0 * aA1;\n  }\n  function C(aA1) {\n    return 3.0 * aA1;\n  }\n\n  // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n  function calcBezier(aT, aA1, aA2) {\n    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n  }\n\n  // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\n  function getSlope(aT, aA1, aA2) {\n    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n  }\n  function binarySubdivide(aX, _aA, _aB, mX1, mX2) {\n    var currentX,\n      currentT,\n      i = 0,\n      aA = _aA,\n      aB = _aB;\n    do {\n      currentT = aA + (aB - aA) / 2.0;\n      currentX = calcBezier(currentT, mX1, mX2) - aX;\n      if (currentX > 0.0) {\n        aB = currentT;\n      } else {\n        aA = currentT;\n      }\n    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n    return currentT;\n  }\n  function newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {\n    var aGuessT = _aGuessT;\n    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n      var currentSlope = getSlope(aGuessT, mX1, mX2);\n      if (currentSlope === 0.0) {\n        return aGuessT;\n      }\n      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  }\n  function bezier(mX1, mY1, mX2, mY2) {\n    if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n      throw new Error('bezier x values must be in [0, 1] range');\n    }\n\n    // Precompute samples table\n    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    if (mX1 !== mY1 || mX2 !== mY2) {\n      for (var i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n      }\n    }\n    function getTForX(aX) {\n      var intervalStart = 0.0;\n      var currentSample = 1;\n      var lastSample = kSplineTableSize - 1;\n      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n        intervalStart += kSampleStepSize;\n      }\n      --currentSample;\n\n      // Interpolate to provide an initial guess for t\n      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n      var guessForT = intervalStart + dist * kSampleStepSize;\n      var initialSlope = getSlope(guessForT, mX1, mX2);\n      if (initialSlope >= NEWTON_MIN_SLOPE) {\n        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n      } else if (initialSlope === 0.0) {\n        return guessForT;\n      } else {\n        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n      }\n    }\n    return function BezierEasing(x) {\n      if (mX1 === mY1 && mX2 === mY2) {\n        return x; // linear\n      }\n      // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n      if (x === 0) {\n        return 0;\n      }\n      if (x === 1) {\n        return 1;\n      }\n      return calcBezier(getTForX(x), mY1, mY2);\n    };\n  }\n});","lineCount":127,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[18,2,17,0],[18,14,17,12],[20,2,19,0],[21,2,19,0,"Object"],[21,8,19,0],[21,9,19,0,"defineProperty"],[21,23,19,0],[21,24,19,0,"exports"],[21,31,19,0],[22,4,19,0,"value"],[22,9,19,0],[23,2,19,0],[24,2,19,0,"exports"],[24,9,19,0],[24,10,19,0,"default"],[24,17,19,0],[24,20,19,0,"bezier"],[24,26,19,0],[25,2,20,0],[25,6,20,6,"NEWTON_ITERATIONS"],[25,23,20,23],[25,26,20,26],[25,27,20,27],[26,2,21,0],[26,6,21,6,"NEWTON_MIN_SLOPE"],[26,22,21,22],[26,25,21,25],[26,30,21,30],[27,2,22,0],[27,6,22,6,"SUBDIVISION_PRECISION"],[27,27,22,27],[27,30,22,30],[27,39,22,39],[28,2,23,0],[28,6,23,6,"SUBDIVISION_MAX_ITERATIONS"],[28,32,23,32],[28,35,23,35],[28,37,23,37],[29,2,25,0],[29,6,25,6,"kSplineTableSize"],[29,22,25,22],[29,25,25,25],[29,27,25,27],[30,2,26,0],[30,6,26,6,"kSampleStepSize"],[30,21,26,21],[30,24,26,24],[30,27,26,27],[30,31,26,31,"kSplineTableSize"],[30,47,26,47],[30,50,26,50],[30,53,26,53],[30,54,26,54],[31,2,28,0],[31,6,28,6,"float32ArraySupported"],[31,27,28,27],[31,30,28,30],[31,37,28,37,"Float32Array"],[31,49,28,49],[31,54,28,54],[31,64,28,64],[32,2,30,0],[32,11,30,9,"A"],[32,12,30,10,"A"],[32,13,30,11,"aA1"],[32,16,30,22],[32,18,30,24,"aA2"],[32,21,30,35],[32,23,30,37],[33,4,31,2],[33,11,31,9],[33,14,31,12],[33,17,31,15],[33,20,31,18],[33,23,31,21,"aA2"],[33,26,31,24],[33,29,31,27],[33,32,31,30],[33,35,31,33,"aA1"],[33,38,31,36],[34,2,32,0],[35,2,33,0],[35,11,33,9,"B"],[35,12,33,10,"B"],[35,13,33,11,"aA1"],[35,16,33,22],[35,18,33,24,"aA2"],[35,21,33,35],[35,23,33,37],[36,4,34,2],[36,11,34,9],[36,14,34,12],[36,17,34,15,"aA2"],[36,20,34,18],[36,23,34,21],[36,26,34,24],[36,29,34,27,"aA1"],[36,32,34,30],[37,2,35,0],[38,2,36,0],[38,11,36,9,"C"],[38,12,36,10,"C"],[38,13,36,11,"aA1"],[38,16,36,22],[38,18,36,24],[39,4,37,2],[39,11,37,9],[39,14,37,12],[39,17,37,15,"aA1"],[39,20,37,18],[40,2,38,0],[42,2,40,0],[43,2,41,0],[43,11,41,9,"calcBezier"],[43,21,41,19,"calcBezier"],[43,22,41,20,"aT"],[43,24,41,30],[43,26,41,32,"aA1"],[43,29,41,43],[43,31,41,45,"aA2"],[43,34,41,56],[43,36,41,58],[44,4,42,2],[44,11,42,9],[44,12,42,10],[44,13,42,11,"A"],[44,14,42,12],[44,15,42,13,"aA1"],[44,18,42,16],[44,20,42,18,"aA2"],[44,23,42,21],[44,24,42,22],[44,27,42,25,"aT"],[44,29,42,27],[44,32,42,30,"B"],[44,33,42,31],[44,34,42,32,"aA1"],[44,37,42,35],[44,39,42,37,"aA2"],[44,42,42,40],[44,43,42,41],[44,47,42,45,"aT"],[44,49,42,47],[44,52,42,50,"C"],[44,53,42,51],[44,54,42,52,"aA1"],[44,57,42,55],[44,58,42,56],[44,62,42,60,"aT"],[44,64,42,62],[45,2,43,0],[47,2,45,0],[48,2,46,0],[48,11,46,9,"getSlope"],[48,19,46,17,"getSlope"],[48,20,46,18,"aT"],[48,22,46,28],[48,24,46,30,"aA1"],[48,27,46,41],[48,29,46,43,"aA2"],[48,32,46,54],[48,34,46,56],[49,4,47,2],[49,11,47,9],[49,14,47,12],[49,17,47,15,"A"],[49,18,47,16],[49,19,47,17,"aA1"],[49,22,47,20],[49,24,47,22,"aA2"],[49,27,47,25],[49,28,47,26],[49,31,47,29,"aT"],[49,33,47,31],[49,36,47,34,"aT"],[49,38,47,36],[49,41,47,39],[49,44,47,42],[49,47,47,45,"B"],[49,48,47,46],[49,49,47,47,"aA1"],[49,52,47,50],[49,54,47,52,"aA2"],[49,57,47,55],[49,58,47,56],[49,61,47,59,"aT"],[49,63,47,61],[49,66,47,64,"C"],[49,67,47,65],[49,68,47,66,"aA1"],[49,71,47,69],[49,72,47,70],[50,2,48,0],[51,2,50,0],[51,11,50,9,"binarySubdivide"],[51,26,50,24,"binarySubdivide"],[51,27,51,2,"aX"],[51,29,51,12],[51,31,52,2,"_aA"],[51,34,52,13],[51,36,53,2,"_aB"],[51,39,53,13],[51,41,54,2,"mX1"],[51,44,54,13],[51,46,55,2,"mX2"],[51,49,55,13],[51,51,56,2],[52,4,57,2],[52,8,57,6,"currentX"],[52,16,57,14],[53,6,58,4,"currentT"],[53,14,58,12],[54,6,59,4,"i"],[54,7,59,5],[54,10,59,8],[54,11,59,9],[55,6,60,4,"aA"],[55,8,60,6],[55,11,60,9,"_aA"],[55,14,60,12],[56,6,61,4,"aB"],[56,8,61,6],[56,11,61,9,"_aB"],[56,14,61,12],[57,4,62,2],[57,7,62,5],[58,6,63,4,"currentT"],[58,14,63,12],[58,17,63,15,"aA"],[58,19,63,17],[58,22,63,20],[58,23,63,21,"aB"],[58,25,63,23],[58,28,63,26,"aA"],[58,30,63,28],[58,34,63,32],[58,37,63,35],[59,6,64,4,"currentX"],[59,14,64,12],[59,17,64,15,"calcBezier"],[59,27,64,25],[59,28,64,26,"currentT"],[59,36,64,34],[59,38,64,36,"mX1"],[59,41,64,39],[59,43,64,41,"mX2"],[59,46,64,44],[59,47,64,45],[59,50,64,48,"aX"],[59,52,64,50],[60,6,65,4],[60,10,65,8,"currentX"],[60,18,65,16],[60,21,65,19],[60,24,65,22],[60,26,65,24],[61,8,66,6,"aB"],[61,10,66,8],[61,13,66,11,"currentT"],[61,21,66,19],[62,6,67,4],[62,7,67,5],[62,13,67,11],[63,8,68,6,"aA"],[63,10,68,8],[63,13,68,11,"currentT"],[63,21,68,19],[64,6,69,4],[65,4,70,2],[65,5,70,3],[65,13,71,4,"Math"],[65,17,71,8],[65,18,71,9,"abs"],[65,21,71,12],[65,22,71,13,"currentX"],[65,30,71,21],[65,31,71,22],[65,34,71,25,"SUBDIVISION_PRECISION"],[65,55,71,46],[65,59,72,4],[65,61,72,6,"i"],[65,62,72,7],[65,65,72,10,"SUBDIVISION_MAX_ITERATIONS"],[65,91,72,36],[66,4,74,2],[66,11,74,9,"currentT"],[66,19,74,17],[67,2,75,0],[68,2,77,0],[68,11,77,9,"newtonRaphsonIterate"],[68,31,77,29,"newtonRaphsonIterate"],[68,32,78,2,"aX"],[68,34,78,12],[68,36,79,2,"_aGuessT"],[68,44,79,18],[68,46,80,2,"mX1"],[68,49,80,13],[68,51,81,2,"mX2"],[68,54,81,13],[68,56,82,2],[69,4,83,2],[69,8,83,6,"aGuessT"],[69,15,83,13],[69,18,83,16,"_aGuessT"],[69,26,83,24],[70,4,84,2],[70,9,84,7],[70,13,84,11,"i"],[70,14,84,12],[70,17,84,15],[70,18,84,16],[70,20,84,18,"i"],[70,21,84,19],[70,24,84,22,"NEWTON_ITERATIONS"],[70,41,84,39],[70,43,84,41],[70,45,84,43,"i"],[70,46,84,44],[70,48,84,46],[71,6,85,4],[71,10,85,10,"currentSlope"],[71,22,85,22],[71,25,85,25,"getSlope"],[71,33,85,33],[71,34,85,34,"aGuessT"],[71,41,85,41],[71,43,85,43,"mX1"],[71,46,85,46],[71,48,85,48,"mX2"],[71,51,85,51],[71,52,85,52],[72,6,86,4],[72,10,86,8,"currentSlope"],[72,22,86,20],[72,27,86,25],[72,30,86,28],[72,32,86,30],[73,8,87,6],[73,15,87,13,"aGuessT"],[73,22,87,20],[74,6,88,4],[75,6,89,4],[75,10,89,10,"currentX"],[75,18,89,18],[75,21,89,21,"calcBezier"],[75,31,89,31],[75,32,89,32,"aGuessT"],[75,39,89,39],[75,41,89,41,"mX1"],[75,44,89,44],[75,46,89,46,"mX2"],[75,49,89,49],[75,50,89,50],[75,53,89,53,"aX"],[75,55,89,55],[76,6,90,4,"aGuessT"],[76,13,90,11],[76,17,90,15,"currentX"],[76,25,90,23],[76,28,90,26,"currentSlope"],[76,40,90,38],[77,4,91,2],[78,4,92,2],[78,11,92,9,"aGuessT"],[78,18,92,16],[79,2,93,0],[80,2,95,15],[80,11,95,24,"bezier"],[80,17,95,30,"bezier"],[80,18,96,2,"mX1"],[80,21,96,13],[80,23,97,2,"mY1"],[80,26,97,13],[80,28,98,2,"mX2"],[80,31,98,13],[80,33,99,2,"mY2"],[80,36,99,13],[80,38,100,25],[81,4,101,2],[81,8,101,6],[81,10,101,8,"mX1"],[81,13,101,11],[81,17,101,15],[81,18,101,16],[81,22,101,20,"mX1"],[81,25,101,23],[81,29,101,27],[81,30,101,28],[81,34,101,32,"mX2"],[81,37,101,35],[81,41,101,39],[81,42,101,40],[81,46,101,44,"mX2"],[81,49,101,47],[81,53,101,51],[81,54,101,52],[81,55,101,53],[81,57,101,55],[82,6,102,4],[82,12,102,10],[82,16,102,14,"Error"],[82,21,102,19],[82,22,102,20],[82,63,102,61],[82,64,102,62],[83,4,103,2],[85,4,105,2],[86,4,106,2],[86,8,106,8,"sampleValues"],[86,20,106,20],[86,23,106,23,"float32ArraySupported"],[86,44,106,44],[86,47,107,6],[86,51,107,10,"Float32Array"],[86,63,107,22],[86,64,107,23,"kSplineTableSize"],[86,80,107,39],[86,81,107,40],[86,84,108,6],[86,88,108,10,"Array"],[86,93,108,15],[86,94,108,24,"kSplineTableSize"],[86,110,108,40],[86,111,108,41],[87,4,109,2],[87,8,109,6,"mX1"],[87,11,109,9],[87,16,109,14,"mY1"],[87,19,109,17],[87,23,109,21,"mX2"],[87,26,109,24],[87,31,109,29,"mY2"],[87,34,109,32],[87,36,109,34],[88,6,110,4],[88,11,110,9],[88,15,110,13,"i"],[88,16,110,14],[88,19,110,17],[88,20,110,18],[88,22,110,20,"i"],[88,23,110,21],[88,26,110,24,"kSplineTableSize"],[88,42,110,40],[88,44,110,42],[88,46,110,44,"i"],[88,47,110,45],[88,49,110,47],[89,8,111,6,"sampleValues"],[89,20,111,18],[89,21,111,19,"i"],[89,22,111,20],[89,23,111,21],[89,26,111,24,"calcBezier"],[89,36,111,34],[89,37,111,35,"i"],[89,38,111,36],[89,41,111,39,"kSampleStepSize"],[89,56,111,54],[89,58,111,56,"mX1"],[89,61,111,59],[89,63,111,61,"mX2"],[89,66,111,64],[89,67,111,65],[90,6,112,4],[91,4,113,2],[92,4,115,2],[92,13,115,11,"getTForX"],[92,21,115,19,"getTForX"],[92,22,115,20,"aX"],[92,24,115,30],[92,26,115,32],[93,6,116,4],[93,10,116,8,"intervalStart"],[93,23,116,21],[93,26,116,24],[93,29,116,27],[94,6,117,4],[94,10,117,8,"currentSample"],[94,23,117,21],[94,26,117,24],[94,27,117,25],[95,6,118,4],[95,10,118,10,"lastSample"],[95,20,118,20],[95,23,118,23,"kSplineTableSize"],[95,39,118,39],[95,42,118,42],[95,43,118,43],[96,6,120,4],[96,13,122,6,"currentSample"],[96,26,122,19],[96,31,122,24,"lastSample"],[96,41,122,34],[96,45,122,38,"sampleValues"],[96,57,122,50],[96,58,122,51,"currentSample"],[96,71,122,64],[96,72,122,65],[96,76,122,69,"aX"],[96,78,122,71],[96,80,123,6],[96,82,123,8,"currentSample"],[96,95,123,21],[96,97,124,6],[97,8,125,6,"intervalStart"],[97,21,125,19],[97,25,125,23,"kSampleStepSize"],[97,40,125,38],[98,6,126,4],[99,6,127,4],[99,8,127,6,"currentSample"],[99,21,127,19],[101,6,129,4],[102,6,130,4],[102,10,130,10,"dist"],[102,14,130,14],[102,17,131,6],[102,18,131,7,"aX"],[102,20,131,9],[102,23,131,12,"sampleValues"],[102,35,131,24],[102,36,131,25,"currentSample"],[102,49,131,38],[102,50,131,39],[102,55,132,7,"sampleValues"],[102,67,132,19],[102,68,132,20,"currentSample"],[102,81,132,33],[102,84,132,36],[102,85,132,37],[102,86,132,38],[102,89,132,41,"sampleValues"],[102,101,132,53],[102,102,132,54,"currentSample"],[102,115,132,67],[102,116,132,68],[102,117,132,69],[103,6,133,4],[103,10,133,10,"guessForT"],[103,19,133,19],[103,22,133,22,"intervalStart"],[103,35,133,35],[103,38,133,38,"dist"],[103,42,133,42],[103,45,133,45,"kSampleStepSize"],[103,60,133,60],[104,6,135,4],[104,10,135,10,"initialSlope"],[104,22,135,22],[104,25,135,25,"getSlope"],[104,33,135,33],[104,34,135,34,"guessForT"],[104,43,135,43],[104,45,135,45,"mX1"],[104,48,135,48],[104,50,135,50,"mX2"],[104,53,135,53],[104,54,135,54],[105,6,136,4],[105,10,136,8,"initialSlope"],[105,22,136,20],[105,26,136,24,"NEWTON_MIN_SLOPE"],[105,42,136,40],[105,44,136,42],[106,8,137,6],[106,15,137,13,"newtonRaphsonIterate"],[106,35,137,33],[106,36,137,34,"aX"],[106,38,137,36],[106,40,137,38,"guessForT"],[106,49,137,47],[106,51,137,49,"mX1"],[106,54,137,52],[106,56,137,54,"mX2"],[106,59,137,57],[106,60,137,58],[107,6,138,4],[107,7,138,5],[107,13,138,11],[107,17,138,15,"initialSlope"],[107,29,138,27],[107,34,138,32],[107,37,138,35],[107,39,138,37],[108,8,139,6],[108,15,139,13,"guessForT"],[108,24,139,22],[109,6,140,4],[109,7,140,5],[109,13,140,11],[110,8,141,6],[110,15,141,13,"binarySubdivide"],[110,30,141,28],[110,31,142,8,"aX"],[110,33,142,10],[110,35,143,8,"intervalStart"],[110,48,143,21],[110,50,144,8,"intervalStart"],[110,63,144,21],[110,66,144,24,"kSampleStepSize"],[110,81,144,39],[110,83,145,8,"mX1"],[110,86,145,11],[110,88,146,8,"mX2"],[110,91,147,6],[110,92,147,7],[111,6,148,4],[112,4,149,2],[113,4,151,2],[113,11,151,9],[113,20,151,18,"BezierEasing"],[113,32,151,30,"BezierEasing"],[113,33,151,31,"x"],[113,34,151,40],[113,36,151,50],[114,6,152,4],[114,10,152,8,"mX1"],[114,13,152,11],[114,18,152,16,"mY1"],[114,21,152,19],[114,25,152,23,"mX2"],[114,28,152,26],[114,33,152,31,"mY2"],[114,36,152,34],[114,38,152,36],[115,8,153,6],[115,15,153,13,"x"],[115,16,153,14],[115,17,153,15],[115,18,153,16],[116,6,154,4],[117,6,155,4],[118,6,156,4],[118,10,156,8,"x"],[118,11,156,9],[118,16,156,14],[118,17,156,15],[118,19,156,17],[119,8,157,6],[119,15,157,13],[119,16,157,14],[120,6,158,4],[121,6,159,4],[121,10,159,8,"x"],[121,11,159,9],[121,16,159,14],[121,17,159,15],[121,19,159,17],[122,8,160,6],[122,15,160,13],[122,16,160,14],[123,6,161,4],[124,6,162,4],[124,13,162,11,"calcBezier"],[124,23,162,21],[124,24,162,22,"getTForX"],[124,32,162,30],[124,33,162,31,"x"],[124,34,162,32],[124,35,162,33],[124,37,162,35,"mY1"],[124,40,162,38],[124,42,162,40,"mY2"],[124,45,162,43],[124,46,162,44],[125,4,163,2],[125,5,163,3],[126,2,164,0],[127,0,164,1],[127,3]],"functionMap":{"names":["<global>","A","B","C","calcBezier","getSlope","binarySubdivide","newtonRaphsonIterate","bezier","getTForX","BezierEasing"],"mappings":"AAA;AC6B;CDE;AEC;CFE;AGC;CHE;AIG;CJE;AKG;CLE;AME;CNyB;AOE;CPgB;eQE;ECoB;GDkC;SEE;GFY;CRC"}},"type":"js/module"}]}