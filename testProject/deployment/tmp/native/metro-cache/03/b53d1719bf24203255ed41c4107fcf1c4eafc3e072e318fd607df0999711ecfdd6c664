{"dependencies":[{"name":"react","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":222},"end":{"line":11,"column":42,"index":264}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = useRefEffect;\n  var _react = _$$_REQUIRE(_dependencyMap[0], \"react\");\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  /**\n   * Constructs a callback ref that provides similar semantics as `useEffect`. The\n   * supplied `effect` callback will be called with non-null component instances.\n   * The `effect` callback can also optionally return a cleanup function.\n   *\n   * When a component is updated or unmounted, the cleanup function is called. The\n   * `effect` callback will then be called again, if applicable.\n   *\n   * When a new `effect` callback is supplied, the previously returned cleanup\n   * function will be called before the new `effect` callback is called with the\n   * same instance.\n   *\n   * WARNING: The `effect` callback should be stable (e.g. using `useCallback`).\n   */\n  function useRefEffect(effect) {\n    var cleanupRef = (0, _react.useRef)(undefined);\n    return (0, _react.useCallback)(function (instance) {\n      if (cleanupRef.current) {\n        cleanupRef.current();\n        cleanupRef.current = undefined;\n      }\n      if (instance != null) {\n        cleanupRef.current = effect(instance);\n      }\n    }, [effect]);\n  }\n});","lineCount":43,"map":[[6,2,11,0],[6,6,11,0,"_react"],[6,12,11,0],[6,15,11,0,"_$$_REQUIRE"],[6,26,11,0],[6,27,11,0,"_dependencyMap"],[6,41,11,0],[7,2,1,0],[8,0,2,0],[9,0,3,0],[10,0,4,0],[11,0,5,0],[12,0,6,0],[13,0,7,0],[14,0,8,0],[15,0,9,0],[17,2,15,0],[18,0,16,0],[19,0,17,0],[20,0,18,0],[21,0,19,0],[22,0,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,2,29,15],[31,11,29,24,"useRefEffect"],[31,23,29,36,"useRefEffect"],[31,24,30,2,"effect"],[31,30,30,42],[31,32,31,33],[32,4,32,2],[32,8,32,8,"cleanupRef"],[32,18,32,18],[32,21,32,21],[32,25,32,21,"useRef"],[32,38,32,27],[32,40,32,49,"undefined"],[32,49,32,58],[32,50,32,59],[33,4,33,2],[33,11,33,9],[33,15,33,9,"useCallback"],[33,33,33,20],[33,35,34,4],[33,45,34,5,"instance"],[33,53,34,31],[33,55,34,36],[34,6,35,6],[34,10,35,10,"cleanupRef"],[34,20,35,20],[34,21,35,21,"current"],[34,28,35,28],[34,30,35,30],[35,8,36,8,"cleanupRef"],[35,18,36,18],[35,19,36,19,"current"],[35,26,36,26],[35,27,36,27],[35,28,36,28],[36,8,37,8,"cleanupRef"],[36,18,37,18],[36,19,37,19,"current"],[36,26,37,26],[36,29,37,29,"undefined"],[36,38,37,38],[37,6,38,6],[38,6,39,6],[38,10,39,10,"instance"],[38,18,39,18],[38,22,39,22],[38,26,39,26],[38,28,39,28],[39,8,40,8,"cleanupRef"],[39,18,40,18],[39,19,40,19,"current"],[39,26,40,26],[39,29,40,29,"effect"],[39,35,40,35],[39,36,40,36,"instance"],[39,44,40,44],[39,45,40,45],[40,6,41,6],[41,4,42,4],[41,5,42,5],[41,7,43,4],[41,8,43,5,"effect"],[41,14,43,11],[41,15,44,2],[41,16,44,3],[42,2,45,0],[43,0,45,1],[43,3]],"functionMap":{"names":["<global>","useRefEffect","<anonymous>"],"mappings":"AAA;eC4B;ICK;KDQ;CDG"}},"type":"js/module"}]}