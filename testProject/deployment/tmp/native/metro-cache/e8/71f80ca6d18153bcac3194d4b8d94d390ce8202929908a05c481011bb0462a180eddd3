{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":124,"column":0,"index":4176}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":124,"column":0,"index":4176}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":124,"column":0,"index":4176}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"../EventEmitter/RCTDeviceEventEmitter","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":215},"end":{"line":11,"column":74,"index":289}}],"key":"8/8s2qHajvAK0ZSPYhrCXcF24uY="}},{"name":"../vendor/emitter/EventEmitter","data":{"asyncType":null,"locs":[{"start":{"line":12,"column":0,"index":290},"end":{"line":14,"column":40,"index":379}}],"key":"fgDwi/IrVIcBdLV47qHthWsoTIw="}},{"name":"./NativeDeviceInfo","data":{"asyncType":null,"locs":[{"start":{"line":15,"column":0,"index":380},"end":{"line":19,"column":28,"index":514}}],"key":"8i4Oz6uHBBZAInr+k+x9cTUYfm8="}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":20,"column":0,"index":515},"end":{"line":20,"column":34,"index":549}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _RCTDeviceEventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../EventEmitter/RCTDeviceEventEmitter\"));\n  var _EventEmitter = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"../vendor/emitter/EventEmitter\"));\n  var _NativeDeviceInfo = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./NativeDeviceInfo\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  var eventEmitter = new _EventEmitter.default();\n  var dimensionsInitialized = false;\n  var dimensions;\n  var Dimensions = /*#__PURE__*/function () {\n    function Dimensions() {\n      (0, _classCallCheck2.default)(this, Dimensions);\n    }\n    return (0, _createClass2.default)(Dimensions, null, [{\n      key: \"get\",\n      value:\n      /**\n       * NOTE: `useWindowDimensions` is the preferred API for React components.\n       *\n       * Initial dimensions are set before `runApplication` is called so they should\n       * be available before any other require's are run, but may be updated later.\n       *\n       * Note: Although dimensions are available immediately, they may change (e.g\n       * due to device rotation) so any rendering logic or styles that depend on\n       * these constants should try to call this function on every render, rather\n       * than caching the value (for example, using inline styles rather than\n       * setting a value in a `StyleSheet`).\n       *\n       * Example: `const {height, width} = Dimensions.get('window');`\n       *\n       * @param {string} dim Name of dimension as defined when calling `set`.\n       * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.\n       */\n      function get(dim) {\n        // $FlowFixMe[invalid-computed-prop]\n        (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);\n        return dimensions[dim];\n      }\n\n      /**\n       * This should only be called from native code by sending the\n       * didUpdateDimensions event.\n       *\n       * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set\n       */\n    }, {\n      key: \"set\",\n      value: function set(dims) {\n        // We calculate the window dimensions in JS so that we don't encounter loss of\n        // precision in transferring the dimensions (which could be non-integers) over\n        // the bridge.\n        var screen = dims.screen,\n          window = dims.window;\n        var windowPhysicalPixels = dims.windowPhysicalPixels;\n        if (windowPhysicalPixels) {\n          window = {\n            width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n            height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n            scale: windowPhysicalPixels.scale,\n            fontScale: windowPhysicalPixels.fontScale\n          };\n        }\n        var screenPhysicalPixels = dims.screenPhysicalPixels;\n        if (screenPhysicalPixels) {\n          screen = {\n            width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n            height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n            scale: screenPhysicalPixels.scale,\n            fontScale: screenPhysicalPixels.fontScale\n          };\n        } else if (screen == null) {\n          screen = window;\n        }\n        dimensions = {\n          window: window,\n          screen: screen\n        };\n        if (dimensionsInitialized) {\n          // Don't fire 'change' the first time the dimensions are set.\n          eventEmitter.emit('change', dimensions);\n        } else {\n          dimensionsInitialized = true;\n        }\n      }\n\n      /**\n       * Add an event handler. Supported events:\n       *\n       * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n       *   to the event handler is an object with `window` and `screen` properties whose values\n       *   are the same as the return values of `Dimensions.get('window')` and\n       *   `Dimensions.get('screen')`, respectively.\n       */\n    }, {\n      key: \"addEventListener\",\n      value: function addEventListener(type, handler) {\n        (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: \"%s\"', type);\n        return eventEmitter.addListener(type, handler);\n      }\n    }]);\n  }(); // Subscribe before calling getConstants to make sure we don't miss any updates in between.\n  _RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', function (update) {\n    Dimensions.set(update);\n  });\n  Dimensions.set(_NativeDeviceInfo.default.getConstants().Dimensions);\n  var _default = exports.default = Dimensions;\n});","lineCount":123,"map":[[9,2,11,0],[9,6,11,0,"_RCTDeviceEventEmitter"],[9,28,11,0],[9,31,11,0,"_interopRequireDefault"],[9,53,11,0],[9,54,11,0,"_$$_REQUIRE"],[9,65,11,0],[9,66,11,0,"_dependencyMap"],[9,80,11,0],[10,2,12,0],[10,6,12,0,"_EventEmitter"],[10,19,12,0],[10,22,12,0,"_interopRequireDefault"],[10,44,12,0],[10,45,12,0,"_$$_REQUIRE"],[10,56,12,0],[10,57,12,0,"_dependencyMap"],[10,71,12,0],[11,2,15,0],[11,6,15,0,"_NativeDeviceInfo"],[11,23,15,0],[11,26,15,0,"_interopRequireDefault"],[11,48,15,0],[11,49,15,0,"_$$_REQUIRE"],[11,60,15,0],[11,61,15,0,"_dependencyMap"],[11,75,15,0],[12,2,20,0],[12,6,20,0,"_invariant"],[12,16,20,0],[12,19,20,0,"_interopRequireDefault"],[12,41,20,0],[12,42,20,0,"_$$_REQUIRE"],[12,53,20,0],[12,54,20,0,"_dependencyMap"],[12,68,20,0],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,0,8,0],[21,0,9,0],[23,2,22,0],[23,6,22,6,"eventEmitter"],[23,18,22,18],[23,21,22,21],[23,25,22,25,"EventEmitter"],[23,46,22,37],[23,47,24,3],[23,48,24,4],[24,2,25,0],[24,6,25,4,"dimensionsInitialized"],[24,27,25,25],[24,30,25,28],[24,35,25,33],[25,2,26,0],[25,6,26,4,"dimensions"],[25,16,26,33],[26,2,26,34],[26,6,28,6,"Dimensions"],[26,16,28,16],[27,4,28,16],[27,13,28,16,"Dimensions"],[27,24,28,16],[28,6,28,16],[28,10,28,16,"_classCallCheck2"],[28,26,28,16],[28,27,28,16,"default"],[28,34,28,16],[28,42,28,16,"Dimensions"],[28,52,28,16],[29,4,28,16],[30,4,28,16],[30,15,28,16,"_createClass2"],[30,28,28,16],[30,29,28,16,"default"],[30,36,28,16],[30,38,28,16,"Dimensions"],[30,48,28,16],[31,6,28,16,"key"],[31,9,28,16],[32,6,28,16,"value"],[32,11,28,16],[33,6,29,2],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,6,46,2],[50,15,46,9,"get"],[50,18,46,12,"get"],[50,19,46,13,"dim"],[50,22,46,24],[50,24,46,66],[51,8,47,4],[52,8,48,4],[52,12,48,4,"invariant"],[52,30,48,13],[52,32,48,14,"dimensions"],[52,42,48,24],[52,43,48,25,"dim"],[52,46,48,28],[52,47,48,29],[52,49,48,31],[52,76,48,58],[52,79,48,61,"dim"],[52,82,48,64],[52,83,48,65],[53,8,49,4],[53,15,49,11,"dimensions"],[53,25,49,21],[53,26,49,22,"dim"],[53,29,49,25],[53,30,49,26],[54,6,50,2],[56,6,52,2],[57,0,53,0],[58,0,54,0],[59,0,55,0],[60,0,56,0],[61,0,57,0],[62,4,52,2],[63,6,52,2,"key"],[63,9,52,2],[64,6,52,2,"value"],[64,11,52,2],[64,13,58,2],[64,22,58,9,"set"],[64,25,58,12,"set"],[64,26,58,13,"dims"],[64,30,58,47],[64,32,58,55],[65,8,59,4],[66,8,60,4],[67,8,61,4],[68,8,62,4],[68,12,62,9,"screen"],[68,18,62,15],[68,21,62,27,"dims"],[68,25,62,31],[68,26,62,9,"screen"],[68,32,62,15],[69,10,62,17,"window"],[69,16,62,23],[69,19,62,27,"dims"],[69,23,62,31],[69,24,62,17,"window"],[69,30,62,23],[70,8,63,4],[70,12,63,11,"windowPhysicalPixels"],[70,32,63,31],[70,35,63,35,"dims"],[70,39,63,39],[70,40,63,11,"windowPhysicalPixels"],[70,60,63,31],[71,8,64,4],[71,12,64,8,"windowPhysicalPixels"],[71,32,64,28],[71,34,64,30],[72,10,65,6,"window"],[72,16,65,12],[72,19,65,15],[73,12,66,8,"width"],[73,17,66,13],[73,19,66,15,"windowPhysicalPixels"],[73,39,66,35],[73,40,66,36,"width"],[73,45,66,41],[73,48,66,44,"windowPhysicalPixels"],[73,68,66,64],[73,69,66,65,"scale"],[73,74,66,70],[74,12,67,8,"height"],[74,18,67,14],[74,20,67,16,"windowPhysicalPixels"],[74,40,67,36],[74,41,67,37,"height"],[74,47,67,43],[74,50,67,46,"windowPhysicalPixels"],[74,70,67,66],[74,71,67,67,"scale"],[74,76,67,72],[75,12,68,8,"scale"],[75,17,68,13],[75,19,68,15,"windowPhysicalPixels"],[75,39,68,35],[75,40,68,36,"scale"],[75,45,68,41],[76,12,69,8,"fontScale"],[76,21,69,17],[76,23,69,19,"windowPhysicalPixels"],[76,43,69,39],[76,44,69,40,"fontScale"],[77,10,70,6],[77,11,70,7],[78,8,71,4],[79,8,72,4],[79,12,72,11,"screenPhysicalPixels"],[79,32,72,31],[79,35,72,35,"dims"],[79,39,72,39],[79,40,72,11,"screenPhysicalPixels"],[79,60,72,31],[80,8,73,4],[80,12,73,8,"screenPhysicalPixels"],[80,32,73,28],[80,34,73,30],[81,10,74,6,"screen"],[81,16,74,12],[81,19,74,15],[82,12,75,8,"width"],[82,17,75,13],[82,19,75,15,"screenPhysicalPixels"],[82,39,75,35],[82,40,75,36,"width"],[82,45,75,41],[82,48,75,44,"screenPhysicalPixels"],[82,68,75,64],[82,69,75,65,"scale"],[82,74,75,70],[83,12,76,8,"height"],[83,18,76,14],[83,20,76,16,"screenPhysicalPixels"],[83,40,76,36],[83,41,76,37,"height"],[83,47,76,43],[83,50,76,46,"screenPhysicalPixels"],[83,70,76,66],[83,71,76,67,"scale"],[83,76,76,72],[84,12,77,8,"scale"],[84,17,77,13],[84,19,77,15,"screenPhysicalPixels"],[84,39,77,35],[84,40,77,36,"scale"],[84,45,77,41],[85,12,78,8,"fontScale"],[85,21,78,17],[85,23,78,19,"screenPhysicalPixels"],[85,43,78,39],[85,44,78,40,"fontScale"],[86,10,79,6],[86,11,79,7],[87,8,80,4],[87,9,80,5],[87,15,80,11],[87,19,80,15,"screen"],[87,25,80,21],[87,29,80,25],[87,33,80,29],[87,35,80,31],[88,10,81,6,"screen"],[88,16,81,12],[88,19,81,15,"window"],[88,25,81,21],[89,8,82,4],[90,8,84,4,"dimensions"],[90,18,84,14],[90,21,84,17],[91,10,84,18,"window"],[91,16,84,24],[91,18,84,18,"window"],[91,24,84,24],[92,10,84,26,"screen"],[92,16,84,32],[92,18,84,26,"screen"],[93,8,84,32],[93,9,84,33],[94,8,85,4],[94,12,85,8,"dimensionsInitialized"],[94,33,85,29],[94,35,85,31],[95,10,86,6],[96,10,87,6,"eventEmitter"],[96,22,87,18],[96,23,87,19,"emit"],[96,27,87,23],[96,28,87,24],[96,36,87,32],[96,38,87,34,"dimensions"],[96,48,87,44],[96,49,87,45],[97,8,88,4],[97,9,88,5],[97,15,88,11],[98,10,89,6,"dimensionsInitialized"],[98,31,89,27],[98,34,89,30],[98,38,89,34],[99,8,90,4],[100,6,91,2],[102,6,93,2],[103,0,94,0],[104,0,95,0],[105,0,96,0],[106,0,97,0],[107,0,98,0],[108,0,99,0],[109,0,100,0],[110,4,93,2],[111,6,93,2,"key"],[111,9,93,2],[112,6,93,2,"value"],[112,11,93,2],[112,13,101,2],[112,22,101,9,"addEventListener"],[112,38,101,25,"addEventListener"],[112,39,102,4,"type"],[112,43,102,18],[112,45,103,4,"handler"],[112,52,103,21],[112,54,104,23],[113,8,105,4],[113,12,105,4,"invariant"],[113,30,105,13],[113,32,106,6,"type"],[113,36,106,10],[113,41,106,15],[113,49,106,23],[113,51,107,6],[113,95,107,50],[113,97,108,6,"type"],[113,101,109,4],[113,102,109,5],[114,8,110,4],[114,15,110,11,"eventEmitter"],[114,27,110,23],[114,28,110,24,"addListener"],[114,39,110,35],[114,40,110,36,"type"],[114,44,110,40],[114,46,110,42,"handler"],[114,53,110,49],[114,54,110,50],[115,6,111,2],[116,4,111,3],[117,2,111,3],[117,7,114,0],[118,2,115,0,"RCTDeviceEventEmitter"],[118,32,115,21],[118,33,115,22,"addListener"],[118,44,115,33],[118,45,116,2],[118,66,116,23],[118,68,117,2],[118,78,117,3,"update"],[118,84,117,28],[118,86,117,33],[119,4,118,4,"Dimensions"],[119,14,118,14],[119,15,118,15,"set"],[119,18,118,18],[119,19,118,19,"update"],[119,25,118,25],[119,26,118,26],[120,2,119,2],[120,3,120,0],[120,4,120,1],[121,2,121,0,"Dimensions"],[121,12,121,10],[121,13,121,11,"set"],[121,16,121,14],[121,17,121,15,"NativeDeviceInfo"],[121,42,121,31],[121,43,121,32,"getConstants"],[121,55,121,44],[121,56,121,45],[121,57,121,46],[121,58,121,47,"Dimensions"],[121,68,121,57],[121,69,121,58],[122,2,121,59],[122,6,121,59,"_default"],[122,14,121,59],[122,17,121,59,"exports"],[122,24,121,59],[122,25,121,59,"default"],[122,32,121,59],[122,35,123,15,"Dimensions"],[122,45,123,25],[123,0,123,25],[123,3]],"functionMap":{"names":["<global>","Dimensions","get","set","addEventListener","RCTDeviceEventEmitter.addListener$argument_1"],"mappings":"AAA;AC2B;ECkB;GDI;EEQ;GFiC;EGU;GHU;CDC;EKK;GLE"}},"type":"js/module"}]}