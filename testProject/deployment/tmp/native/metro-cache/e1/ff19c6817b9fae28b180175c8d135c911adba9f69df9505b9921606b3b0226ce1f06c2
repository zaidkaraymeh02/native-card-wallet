{"dependencies":[{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":183,"column":0,"index":5846}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":183,"column":0,"index":5846}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"../Utilities/infoLog","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}}],"key":"te7FMDljSHoh4Ptoq0ebhkaWbSA="}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":18,"index":304},"end":{"line":14,"column":38,"index":324}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var _classCallCheck = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/classCallCheck\");\n  var _createClass = _$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/createClass\");\n  var DEBUG = false;\n\n  /**\n   * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n   * trees of dependent tasks based on Promises. No tasks are executed unless\n   * `processNext` is called.\n   *\n   * `enqueue` takes a Task object with either a simple `run` callback, or a\n   * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n   * function is supplied, then the promise it returns will block execution of\n   * tasks already in the queue until it resolves. This can be used to make sure\n   * the first task is fully resolved (including asynchronous dependencies that\n   * also schedule more tasks via `enqueue`) before starting on the next task.\n   * The `onMoreTasks` constructor argument is used to inform the owner that an\n   * async task has resolved and that the queue should be processed again.\n   *\n   * Note: Tasks are only actually executed with explicit calls to `processNext`.\n   */\n  var TaskQueue = /*#__PURE__*/function () {\n    /**\n     * TaskQueue instances are self contained and independent, so multiple tasks\n     * of varying semantics and priority can operate together.\n     *\n     * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n     * tasks to process.\n     */\n    function TaskQueue(_ref) {\n      var onMoreTasks = _ref.onMoreTasks;\n      _classCallCheck(this, TaskQueue);\n      this._onMoreTasks = onMoreTasks;\n      this._queueStack = [{\n        tasks: [],\n        popable: false\n      }];\n    }\n\n    /**\n     * Add a task to the queue.  It is recommended to name your tasks for easier\n     * async debugging. Tasks will not be executed until `processNext` is called\n     * explicitly.\n     */\n    return _createClass(TaskQueue, [{\n      key: \"enqueue\",\n      value: function enqueue(task) {\n        this._getCurrentQueue().push(task);\n      }\n    }, {\n      key: \"enqueueTasks\",\n      value: function enqueueTasks(tasks) {\n        var _this = this;\n        tasks.forEach(function (task) {\n          return _this.enqueue(task);\n        });\n      }\n    }, {\n      key: \"cancelTasks\",\n      value: function cancelTasks(tasksToCancel) {\n        // search through all tasks and remove them.\n        this._queueStack = this._queueStack.map(function (queue) {\n          return Object.assign({}, queue, {\n            tasks: queue.tasks.filter(function (task) {\n              return tasksToCancel.indexOf(task) === -1;\n            })\n          });\n        }).filter(function (queue, idx) {\n          return queue.tasks.length > 0 || idx === 0;\n        });\n      }\n\n      /**\n       * Check to see if `processNext` should be called.\n       *\n       * @returns {boolean} Returns true if there are tasks that are ready to be\n       * processed with `processNext`, or returns false if there are no more tasks\n       * to be processed right now, although there may be tasks in the queue that\n       * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n       * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n       * tasks ready to run at that point.\n       */\n    }, {\n      key: \"hasTasksToProcess\",\n      value: function hasTasksToProcess() {\n        return this._getCurrentQueue().length > 0;\n      }\n\n      /**\n       * Executes the next task in the queue.\n       */\n    }, {\n      key: \"processNext\",\n      value: function processNext() {\n        var queue = this._getCurrentQueue();\n        if (queue.length) {\n          var task = queue.shift();\n          try {\n            if (typeof task === 'object' && task.gen) {\n              DEBUG && _$$_REQUIRE(_dependencyMap[2], \"../Utilities/infoLog\")('TaskQueue: genPromise for task ' + task.name);\n              this._genPromise(task);\n            } else if (typeof task === 'object' && task.run) {\n              DEBUG && _$$_REQUIRE(_dependencyMap[2], \"../Utilities/infoLog\")('TaskQueue: run task ' + task.name);\n              task.run();\n            } else {\n              _$$_REQUIRE(_dependencyMap[3], \"invariant\")(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\\n' + JSON.stringify(task, null, 2));\n              DEBUG && _$$_REQUIRE(_dependencyMap[2], \"../Utilities/infoLog\")('TaskQueue: run anonymous task');\n              task();\n            }\n          } catch (e) {\n            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n            throw e;\n          }\n        }\n      }\n    }, {\n      key: \"_getCurrentQueue\",\n      value: function _getCurrentQueue() {\n        var stackIdx = this._queueStack.length - 1;\n        var queue = this._queueStack[stackIdx];\n        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {\n          this._queueStack.pop();\n          DEBUG && _$$_REQUIRE(_dependencyMap[2], \"../Utilities/infoLog\")('TaskQueue: popped queue: ', {\n            stackIdx: stackIdx,\n            queueStackSize: this._queueStack.length\n          });\n          return this._getCurrentQueue();\n        } else {\n          return queue.tasks;\n        }\n      }\n    }, {\n      key: \"_genPromise\",\n      value: function _genPromise(task) {\n        var _this2 = this;\n        // Each async task pushes it's own queue onto the queue stack. This\n        // effectively defers execution of previously queued tasks until the promise\n        // resolves, at which point we allow the new queue to be popped, which\n        // happens once it is fully processed.\n        this._queueStack.push({\n          tasks: [],\n          popable: false\n        });\n        var stackIdx = this._queueStack.length - 1;\n        var stackItem = this._queueStack[stackIdx];\n        DEBUG && _$$_REQUIRE(_dependencyMap[2], \"../Utilities/infoLog\")('TaskQueue: push new queue: ', {\n          stackIdx: stackIdx\n        });\n        DEBUG && _$$_REQUIRE(_dependencyMap[2], \"../Utilities/infoLog\")('TaskQueue: exec gen task ' + task.name);\n        task.gen().then(function () {\n          DEBUG && _$$_REQUIRE(_dependencyMap[2], \"../Utilities/infoLog\")('TaskQueue: onThen for gen task ' + task.name, {\n            stackIdx: stackIdx,\n            queueStackSize: _this2._queueStack.length\n          });\n          stackItem.popable = true;\n          _this2.hasTasksToProcess() && _this2._onMoreTasks();\n        }).catch(function (ex) {\n          setTimeout(function () {\n            ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n            throw ex;\n          }, 0);\n        });\n      }\n    }]);\n  }();\n  module.exports = TaskQueue;\n});","lineCount":179,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_classCallCheck"],[14,21,11,13],[14,24,11,13,"_$$_REQUIRE"],[14,35,11,13],[14,36,11,13,"_dependencyMap"],[14,50,11,13],[15,2,11,13],[15,6,11,13,"_createClass"],[15,18,11,13],[15,21,11,13,"_$$_REQUIRE"],[15,32,11,13],[15,33,11,13,"_dependencyMap"],[15,47,11,13],[16,2,26,0],[16,6,26,6,"DEBUG"],[16,11,26,18],[16,14,26,21],[16,19,26,26],[18,2,28,0],[19,0,29,0],[20,0,30,0],[21,0,31,0],[22,0,32,0],[23,0,33,0],[24,0,34,0],[25,0,35,0],[26,0,36,0],[27,0,37,0],[28,0,38,0],[29,0,39,0],[30,0,40,0],[31,0,41,0],[32,0,42,0],[33,0,43,0],[34,2,28,0],[34,6,44,6,"TaskQueue"],[34,15,44,15],[35,4,45,2],[36,0,46,0],[37,0,47,0],[38,0,48,0],[39,0,49,0],[40,0,50,0],[41,0,51,0],[42,4,52,2],[42,13,52,2,"TaskQueue"],[42,23,52,2,"_ref"],[42,27,52,2],[42,29,52,61],[43,6,52,61],[43,10,52,15,"onMoreTasks"],[43,21,52,26],[43,24,52,26,"_ref"],[43,28,52,26],[43,29,52,15,"onMoreTasks"],[43,40,52,26],[44,6,52,26,"_classCallCheck"],[44,21,52,26],[44,28,52,26,"TaskQueue"],[44,37,52,26],[45,6,53,4],[45,10,53,8],[45,11,53,9,"_onMoreTasks"],[45,23,53,21],[45,26,53,24,"onMoreTasks"],[45,37,53,35],[46,6,54,4],[46,10,54,8],[46,11,54,9,"_queueStack"],[46,22,54,20],[46,25,54,23],[46,26,54,24],[47,8,54,25,"tasks"],[47,13,54,30],[47,15,54,32],[47,17,54,34],[48,8,54,36,"popable"],[48,15,54,43],[48,17,54,45],[49,6,54,50],[49,7,54,51],[49,8,54,52],[50,4,55,2],[52,4,57,2],[53,0,58,0],[54,0,59,0],[55,0,60,0],[56,0,61,0],[57,4,57,2],[57,11,57,2,"_createClass"],[57,23,57,2],[57,24,57,2,"TaskQueue"],[57,33,57,2],[58,6,57,2,"key"],[58,9,57,2],[59,6,57,2,"value"],[59,11,57,2],[59,13,62,2],[59,22,62,2,"enqueue"],[59,29,62,9,"enqueue"],[59,30,62,10,"task"],[59,34,62,20],[59,36,62,28],[60,8,63,4],[60,12,63,8],[60,13,63,9,"_getCurrentQueue"],[60,29,63,25],[60,30,63,26],[60,31,63,27],[60,32,63,28,"push"],[60,36,63,32],[60,37,63,33,"task"],[60,41,63,37],[60,42,63,38],[61,6,64,2],[62,4,64,3],[63,6,64,3,"key"],[63,9,64,3],[64,6,64,3,"value"],[64,11,64,3],[64,13,66,2],[64,22,66,2,"enqueueTasks"],[64,34,66,14,"enqueueTasks"],[64,35,66,15,"tasks"],[64,40,66,33],[64,42,66,41],[65,8,66,41],[65,12,66,41,"_this"],[65,17,66,41],[66,8,67,4,"tasks"],[66,13,67,9],[66,14,67,10,"forEach"],[66,21,67,17],[66,22,67,18],[66,32,67,18,"task"],[66,36,67,22],[67,10,67,22],[67,17,67,26,"_this"],[67,22,67,30],[67,23,67,31,"enqueue"],[67,30,67,38],[67,31,67,39,"task"],[67,35,67,43],[67,36,67,44],[68,8,67,44],[68,10,67,45],[69,6,68,2],[70,4,68,3],[71,6,68,3,"key"],[71,9,68,3],[72,6,68,3,"value"],[72,11,68,3],[72,13,70,2],[72,22,70,2,"cancelTasks"],[72,33,70,13,"cancelTasks"],[72,34,70,14,"tasksToCancel"],[72,47,70,40],[72,49,70,48],[73,8,71,4],[74,8,72,4],[74,12,72,8],[74,13,72,9,"_queueStack"],[74,24,72,20],[74,27,72,23],[74,31,72,27],[74,32,72,28,"_queueStack"],[74,43,72,39],[74,44,73,7,"map"],[74,47,73,10],[74,48,73,11],[74,58,73,11,"queue"],[74,63,73,16],[75,10,73,16],[75,17,73,16,"Object"],[75,23,73,16],[75,24,73,16,"assign"],[75,30,73,16],[75,35,74,11,"queue"],[75,40,74,16],[76,12,75,8,"tasks"],[76,17,75,13],[76,19,75,15,"queue"],[76,24,75,20],[76,25,75,21,"tasks"],[76,30,75,26],[76,31,75,27,"filter"],[76,37,75,33],[76,38,75,34],[76,48,75,34,"task"],[76,52,75,38],[77,14,75,38],[77,21,75,42,"tasksToCancel"],[77,34,75,55],[77,35,75,56,"indexOf"],[77,42,75,63],[77,43,75,64,"task"],[77,47,75,68],[77,48,75,69],[77,53,75,74],[77,54,75,75],[77,55,75,76],[78,12,75,76],[79,10,75,77],[80,8,75,77],[80,9,76,8],[80,10,76,9],[80,11,77,7,"filter"],[80,17,77,13],[80,18,77,14],[80,28,77,15,"queue"],[80,33,77,20],[80,35,77,22,"idx"],[80,38,77,25],[81,10,77,25],[81,17,77,30,"queue"],[81,22,77,35],[81,23,77,36,"tasks"],[81,28,77,41],[81,29,77,42,"length"],[81,35,77,48],[81,38,77,51],[81,39,77,52],[81,43,77,56,"idx"],[81,46,77,59],[81,51,77,64],[81,52,77,65],[82,8,77,65],[82,10,77,66],[83,6,78,2],[85,6,80,2],[86,0,81,0],[87,0,82,0],[88,0,83,0],[89,0,84,0],[90,0,85,0],[91,0,86,0],[92,0,87,0],[93,0,88,0],[94,0,89,0],[95,4,80,2],[96,6,80,2,"key"],[96,9,80,2],[97,6,80,2,"value"],[97,11,80,2],[97,13,90,2],[97,22,90,2,"hasTasksToProcess"],[97,39,90,19,"hasTasksToProcess"],[97,40,90,19],[97,42,90,31],[98,8,91,4],[98,15,91,11],[98,19,91,15],[98,20,91,16,"_getCurrentQueue"],[98,36,91,32],[98,37,91,33],[98,38,91,34],[98,39,91,35,"length"],[98,45,91,41],[98,48,91,44],[98,49,91,45],[99,6,92,2],[101,6,94,2],[102,0,95,0],[103,0,96,0],[104,4,94,2],[105,6,94,2,"key"],[105,9,94,2],[106,6,94,2,"value"],[106,11,94,2],[106,13,97,2],[106,22,97,2,"processNext"],[106,33,97,13,"processNext"],[106,34,97,13],[106,36,97,22],[107,8,98,4],[107,12,98,10,"queue"],[107,17,98,15],[107,20,98,18],[107,24,98,22],[107,25,98,23,"_getCurrentQueue"],[107,41,98,39],[107,42,98,40],[107,43,98,41],[108,8,99,4],[108,12,99,8,"queue"],[108,17,99,13],[108,18,99,14,"length"],[108,24,99,20],[108,26,99,22],[109,10,100,6],[109,14,100,12,"task"],[109,18,100,16],[109,21,100,19,"queue"],[109,26,100,24],[109,27,100,25,"shift"],[109,32,100,30],[109,33,100,31],[109,34,100,32],[110,10,101,6],[110,14,101,10],[111,12,102,8],[111,16,102,12],[111,23,102,19,"task"],[111,27,102,23],[111,32,102,28],[111,40,102,36],[111,44,102,40,"task"],[111,48,102,44],[111,49,102,45,"gen"],[111,52,102,48],[111,54,102,50],[112,14,103,10,"DEBUG"],[112,19,103,15],[112,23,103,19,"_$$_REQUIRE"],[112,34,103,19],[112,35,103,19,"_dependencyMap"],[112,49,103,19],[112,78,103,27],[112,111,103,60],[112,114,103,63,"task"],[112,118,103,67],[112,119,103,68,"name"],[112,123,103,72],[112,124,103,73],[113,14,104,10],[113,18,104,14],[113,19,104,15,"_genPromise"],[113,30,104,26],[113,31,104,27,"task"],[113,35,104,31],[113,36,104,32],[114,12,105,8],[114,13,105,9],[114,19,105,15],[114,23,105,19],[114,30,105,26,"task"],[114,34,105,30],[114,39,105,35],[114,47,105,43],[114,51,105,47,"task"],[114,55,105,51],[114,56,105,52,"run"],[114,59,105,55],[114,61,105,57],[115,14,106,10,"DEBUG"],[115,19,106,15],[115,23,106,19,"_$$_REQUIRE"],[115,34,106,19],[115,35,106,19,"_dependencyMap"],[115,49,106,19],[115,78,106,27],[115,100,106,49],[115,103,106,52,"task"],[115,107,106,56],[115,108,106,57,"name"],[115,112,106,61],[115,113,106,62],[116,14,107,10,"task"],[116,18,107,14],[116,19,107,15,"run"],[116,22,107,18],[116,23,107,19],[116,24,107,20],[117,12,108,8],[117,13,108,9],[117,19,108,15],[118,14,109,10,"_$$_REQUIRE"],[118,25,109,10],[118,26,109,10,"_dependencyMap"],[118,40,109,10],[118,58,110,12],[118,65,110,19,"task"],[118,69,110,23],[118,74,110,28],[118,84,110,38],[118,86,111,12],[118,145,111,71],[118,148,112,14,"JSON"],[118,152,112,18],[118,153,112,19,"stringify"],[118,162,112,28],[118,163,112,29,"task"],[118,167,112,33],[118,169,112,35],[118,173,112,39],[118,175,112,41],[118,176,112,42],[118,177,113,10],[118,178,113,11],[119,14,114,10,"DEBUG"],[119,19,114,15],[119,23,114,19,"_$$_REQUIRE"],[119,34,114,19],[119,35,114,19,"_dependencyMap"],[119,49,114,19],[119,78,114,27],[119,109,114,58],[119,110,114,59],[120,14,115,10,"task"],[120,18,115,14],[120,19,115,15],[120,20,115,16],[121,12,116,8],[122,10,117,6],[122,11,117,7],[122,12,117,8],[122,19,117,15,"e"],[122,20,117,16],[122,22,117,18],[123,12,118,8,"e"],[123,13,118,9],[123,14,118,10,"message"],[123,21,118,17],[123,24,119,10],[123,53,119,39],[123,57,119,43,"task"],[123,61,119,47],[123,62,119,48,"name"],[123,66,119,52],[123,70,119,56],[123,72,119,58],[123,73,119,59],[123,76,119,62],[123,80,119,66],[123,83,119,69,"e"],[123,84,119,70],[123,85,119,71,"message"],[123,92,119,78],[124,12,120,8],[124,18,120,14,"e"],[124,19,120,15],[125,10,121,6],[126,8,122,4],[127,6,123,2],[128,4,123,3],[129,6,123,3,"key"],[129,9,123,3],[130,6,123,3,"value"],[130,11,123,3],[130,13,132,2],[130,22,132,2,"_getCurrentQueue"],[130,38,132,18,"_getCurrentQueue"],[130,39,132,18],[130,41,132,34],[131,8,133,4],[131,12,133,10,"stackIdx"],[131,20,133,18],[131,23,133,21],[131,27,133,25],[131,28,133,26,"_queueStack"],[131,39,133,37],[131,40,133,38,"length"],[131,46,133,44],[131,49,133,47],[131,50,133,48],[132,8,134,4],[132,12,134,10,"queue"],[132,17,134,15],[132,20,134,18],[132,24,134,22],[132,25,134,23,"_queueStack"],[132,36,134,34],[132,37,134,35,"stackIdx"],[132,45,134,43],[132,46,134,44],[133,8,135,4],[133,12,136,6,"queue"],[133,17,136,11],[133,18,136,12,"popable"],[133,25,136,19],[133,29,137,6,"queue"],[133,34,137,11],[133,35,137,12,"tasks"],[133,40,137,17],[133,41,137,18,"length"],[133,47,137,24],[133,52,137,29],[133,53,137,30],[133,57,138,6],[133,61,138,10],[133,62,138,11,"_queueStack"],[133,73,138,22],[133,74,138,23,"length"],[133,80,138,29],[133,83,138,32],[133,84,138,33],[133,86,139,6],[134,10,140,6],[134,14,140,10],[134,15,140,11,"_queueStack"],[134,26,140,22],[134,27,140,23,"pop"],[134,30,140,26],[134,31,140,27],[134,32,140,28],[135,10,141,6,"DEBUG"],[135,15,141,11],[135,19,142,8,"_$$_REQUIRE"],[135,30,142,8],[135,31,142,8,"_dependencyMap"],[135,45,142,8],[135,74,142,16],[135,101,142,43],[135,103,142,45],[136,12,143,10,"stackIdx"],[136,20,143,18],[136,22,143,10,"stackIdx"],[136,30,143,18],[137,12,144,10,"queueStackSize"],[137,26,144,24],[137,28,144,26],[137,32,144,30],[137,33,144,31,"_queueStack"],[137,44,144,42],[137,45,144,43,"length"],[138,10,145,8],[138,11,145,9],[138,12,145,10],[139,10,146,6],[139,17,146,13],[139,21,146,17],[139,22,146,18,"_getCurrentQueue"],[139,38,146,34],[139,39,146,35],[139,40,146,36],[140,8,147,4],[140,9,147,5],[140,15,147,11],[141,10,148,6],[141,17,148,13,"queue"],[141,22,148,18],[141,23,148,19,"tasks"],[141,28,148,24],[142,8,149,4],[143,6,150,2],[144,4,150,3],[145,6,150,3,"key"],[145,9,150,3],[146,6,150,3,"value"],[146,11,150,3],[146,13,152,2],[146,22,152,2,"_genPromise"],[146,33,152,13,"_genPromise"],[146,34,152,14,"task"],[146,38,152,31],[146,40,152,33],[147,8,152,33],[147,12,152,33,"_this2"],[147,18,152,33],[148,8,153,4],[149,8,154,4],[150,8,155,4],[151,8,156,4],[152,8,157,4],[152,12,157,8],[152,13,157,9,"_queueStack"],[152,24,157,20],[152,25,157,21,"push"],[152,29,157,25],[152,30,157,26],[153,10,157,27,"tasks"],[153,15,157,32],[153,17,157,34],[153,19,157,36],[154,10,157,38,"popable"],[154,17,157,45],[154,19,157,47],[155,8,157,52],[155,9,157,53],[155,10,157,54],[156,8,158,4],[156,12,158,10,"stackIdx"],[156,20,158,18],[156,23,158,21],[156,27,158,25],[156,28,158,26,"_queueStack"],[156,39,158,37],[156,40,158,38,"length"],[156,46,158,44],[156,49,158,47],[156,50,158,48],[157,8,159,4],[157,12,159,10,"stackItem"],[157,21,159,19],[157,24,159,22],[157,28,159,26],[157,29,159,27,"_queueStack"],[157,40,159,38],[157,41,159,39,"stackIdx"],[157,49,159,47],[157,50,159,48],[158,8,160,4,"DEBUG"],[158,13,160,9],[158,17,160,13,"_$$_REQUIRE"],[158,28,160,13],[158,29,160,13,"_dependencyMap"],[158,43,160,13],[158,72,160,21],[158,101,160,50],[158,103,160,52],[159,10,160,53,"stackIdx"],[159,18,160,61],[159,20,160,53,"stackIdx"],[160,8,160,61],[160,9,160,62],[160,10,160,63],[161,8,161,4,"DEBUG"],[161,13,161,9],[161,17,161,13,"_$$_REQUIRE"],[161,28,161,13],[161,29,161,13,"_dependencyMap"],[161,43,161,13],[161,72,161,21],[161,99,161,48],[161,102,161,51,"task"],[161,106,161,55],[161,107,161,56,"name"],[161,111,161,60],[161,112,161,61],[162,8,162,4,"task"],[162,12,162,8],[162,13,163,7,"gen"],[162,16,163,10],[162,17,163,11],[162,18,163,12],[162,19,164,7,"then"],[162,23,164,11],[162,24,164,12],[162,36,164,18],[163,10,165,8,"DEBUG"],[163,15,165,13],[163,19,166,10,"_$$_REQUIRE"],[163,30,166,10],[163,31,166,10,"_dependencyMap"],[163,45,166,10],[163,74,166,18],[163,107,166,51],[163,110,166,54,"task"],[163,114,166,58],[163,115,166,59,"name"],[163,119,166,63],[163,121,166,65],[164,12,167,12,"stackIdx"],[164,20,167,20],[164,22,167,12,"stackIdx"],[164,30,167,20],[165,12,168,12,"queueStackSize"],[165,26,168,26],[165,28,168,28,"_this2"],[165,34,168,32],[165,35,168,33,"_queueStack"],[165,46,168,44],[165,47,168,45,"length"],[166,10,169,10],[166,11,169,11],[166,12,169,12],[167,10,170,8,"stackItem"],[167,19,170,17],[167,20,170,18,"popable"],[167,27,170,25],[167,30,170,28],[167,34,170,32],[168,10,171,8,"_this2"],[168,16,171,12],[168,17,171,13,"hasTasksToProcess"],[168,34,171,30],[168,35,171,31],[168,36,171,32],[168,40,171,36,"_this2"],[168,46,171,40],[168,47,171,41,"_onMoreTasks"],[168,59,171,53],[168,60,171,54],[168,61,171,55],[169,8,172,6],[169,9,172,7],[169,10,172,8],[169,11,173,7,"catch"],[169,16,173,12],[169,17,173,13],[169,27,173,13,"ex"],[169,29,173,15],[169,31,173,19],[170,10,174,8,"setTimeout"],[170,20,174,18],[170,21,174,19],[170,33,174,25],[171,12,175,10,"ex"],[171,14,175,12],[171,15,175,13,"message"],[171,22,175,20],[171,25,175,23],[171,71,175,69,"task"],[171,75,175,73],[171,76,175,74,"name"],[171,80,175,78],[171,85,175,83,"ex"],[171,87,175,85],[171,88,175,86,"message"],[171,95,175,93],[171,97,175,95],[172,12,176,10],[172,18,176,16,"ex"],[172,20,176,18],[173,10,177,8],[173,11,177,9],[173,13,177,11],[173,14,177,12],[173,15,177,13],[174,8,178,6],[174,9,178,7],[174,10,178,8],[175,6,179,2],[176,4,179,3],[177,2,179,3],[178,2,182,0,"module"],[178,8,182,6],[178,9,182,7,"exports"],[178,16,182,14],[178,19,182,17,"TaskQueue"],[178,28,182,26],[179,0,182,27],[179,3]],"functionMap":{"names":["<global>","TaskQueue","constructor","enqueue","enqueueTasks","tasks.forEach$argument_0","cancelTasks","_queueStack.map$argument_0","queue.tasks.filter$argument_0","_queueStack.map.filter$argument_0","hasTasksToProcess","processNext","_getCurrentQueue","_genPromise","task.gen.then$argument_0","task.gen.then._catch$argument_0","setTimeout$argument_0"],"mappings":"AAA;AC2C;ECQ;GDG;EEO;GFE;EGE;kBCC,0BD;GHC;EKE;WCG;kCCE,0CD;QDC;cGC,mDH;GLC;ESY;GTE;EUK;GV0B;EWS;GXkB;EYE;YCY;ODQ;aEC;mBCC;SDG;OFC;GZC;CDC"}},"type":"js/module"}]}