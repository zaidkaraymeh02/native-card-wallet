{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":156,"column":0,"index":4163}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":222},"end":{"line":11,"column":34,"index":256}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.CellRenderMask = void 0;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  var CellRenderMask = exports.CellRenderMask = /*#__PURE__*/function () {\n    function CellRenderMask(numCells) {\n      (0, _classCallCheck2.default)(this, CellRenderMask);\n      (0, _invariant.default)(numCells >= 0, 'CellRenderMask must contain a non-negative number os cells');\n      this._numCells = numCells;\n      if (numCells === 0) {\n        this._regions = [];\n      } else {\n        this._regions = [{\n          first: 0,\n          last: numCells - 1,\n          isSpacer: true\n        }];\n      }\n    }\n    return (0, _createClass2.default)(CellRenderMask, [{\n      key: \"enumerateRegions\",\n      value: function enumerateRegions() {\n        return this._regions;\n      }\n    }, {\n      key: \"addCells\",\n      value: function addCells(cells) {\n        var _this$_regions;\n        (0, _invariant.default)(cells.first >= 0 && cells.first < this._numCells && cells.last >= -1 && cells.last < this._numCells && cells.last >= cells.first - 1, 'CellRenderMask.addCells called with invalid cell range');\n\n        // VirtualizedList uses inclusive ranges, where zero-count states are\n        // possible. E.g. [0, -1] for no cells, starting at 0.\n        if (cells.last < cells.first) {\n          return;\n        }\n        var _this$_findRegion = this._findRegion(cells.first),\n          _this$_findRegion2 = (0, _slicedToArray2.default)(_this$_findRegion, 2),\n          firstIntersect = _this$_findRegion2[0],\n          firstIntersectIdx = _this$_findRegion2[1];\n        var _this$_findRegion3 = this._findRegion(cells.last),\n          _this$_findRegion4 = (0, _slicedToArray2.default)(_this$_findRegion3, 2),\n          lastIntersect = _this$_findRegion4[0],\n          lastIntersectIdx = _this$_findRegion4[1];\n\n        // Fast-path if the cells to add are already all present in the mask. We\n        // will otherwise need to do some mutation.\n        if (firstIntersectIdx === lastIntersectIdx && !firstIntersect.isSpacer) {\n          return;\n        }\n\n        // We need to replace the existing covered regions with 1-3 new regions\n        // depending whether we need to split spacers out of overlapping regions.\n        var newLeadRegion = [];\n        var newTailRegion = [];\n        var newMainRegion = Object.assign({}, cells, {\n          isSpacer: false\n        });\n        if (firstIntersect.first < newMainRegion.first) {\n          if (firstIntersect.isSpacer) {\n            newLeadRegion.push({\n              first: firstIntersect.first,\n              last: newMainRegion.first - 1,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.first = firstIntersect.first;\n          }\n        }\n        if (lastIntersect.last > newMainRegion.last) {\n          if (lastIntersect.isSpacer) {\n            newTailRegion.push({\n              first: newMainRegion.last + 1,\n              last: lastIntersect.last,\n              isSpacer: true\n            });\n          } else {\n            newMainRegion.last = lastIntersect.last;\n          }\n        }\n        var replacementRegions = [].concat(newLeadRegion, [newMainRegion], newTailRegion);\n        var numRegionsToDelete = lastIntersectIdx - firstIntersectIdx + 1;\n        (_this$_regions = this._regions).splice.apply(_this$_regions, [firstIntersectIdx, numRegionsToDelete].concat((0, _toConsumableArray2.default)(replacementRegions)));\n      }\n    }, {\n      key: \"numCells\",\n      value: function numCells() {\n        return this._numCells;\n      }\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        return this._numCells === other._numCells && this._regions.length === other._regions.length && this._regions.every(function (region, i) {\n          return region.first === other._regions[i].first && region.last === other._regions[i].last && region.isSpacer === other._regions[i].isSpacer;\n        });\n      }\n    }, {\n      key: \"_findRegion\",\n      value: function _findRegion(cellIdx) {\n        var firstIdx = 0;\n        var lastIdx = this._regions.length - 1;\n        while (firstIdx <= lastIdx) {\n          var middleIdx = Math.floor((firstIdx + lastIdx) / 2);\n          var middleRegion = this._regions[middleIdx];\n          if (cellIdx >= middleRegion.first && cellIdx <= middleRegion.last) {\n            return [middleRegion, middleIdx];\n          } else if (cellIdx < middleRegion.first) {\n            lastIdx = middleIdx - 1;\n          } else if (cellIdx > middleRegion.last) {\n            firstIdx = middleIdx + 1;\n          }\n        }\n        (0, _invariant.default)(false, `A region was not found containing cellIdx ${cellIdx}`);\n      }\n    }]);\n  }();\n});","lineCount":132,"map":[[11,2,11,0],[11,6,11,0,"_invariant"],[11,16,11,0],[11,19,11,0,"_interopRequireDefault"],[11,41,11,0],[11,42,11,0,"_$$_REQUIRE"],[11,53,11,0],[11,54,11,0,"_dependencyMap"],[11,68,11,0],[12,2,1,0],[13,0,2,0],[14,0,3,0],[15,0,4,0],[16,0,5,0],[17,0,6,0],[18,0,7,0],[19,0,8,0],[20,0,9,0],[21,2,1,0],[21,6,19,13,"CellRenderMask"],[21,20,19,27],[21,23,19,27,"exports"],[21,30,19,27],[21,31,19,27,"CellRenderMask"],[21,45,19,27],[22,4,23,2],[22,13,23,2,"CellRenderMask"],[22,28,23,14,"numCells"],[22,36,23,30],[22,38,23,32],[23,6,23,32],[23,10,23,32,"_classCallCheck2"],[23,26,23,32],[23,27,23,32,"default"],[23,34,23,32],[23,42,23,32,"CellRenderMask"],[23,56,23,32],[24,6,24,4],[24,10,24,4,"invariant"],[24,28,24,13],[24,30,25,6,"numCells"],[24,38,25,14],[24,42,25,18],[24,43,25,19],[24,45,26,6],[24,105,27,4],[24,106,27,5],[25,6,29,4],[25,10,29,8],[25,11,29,9,"_numCells"],[25,20,29,18],[25,23,29,21,"numCells"],[25,31,29,29],[26,6,31,4],[26,10,31,8,"numCells"],[26,18,31,16],[26,23,31,21],[26,24,31,22],[26,26,31,24],[27,8,32,6],[27,12,32,10],[27,13,32,11,"_regions"],[27,21,32,19],[27,24,32,22],[27,26,32,24],[28,6,33,4],[28,7,33,5],[28,13,33,11],[29,8,34,6],[29,12,34,10],[29,13,34,11,"_regions"],[29,21,34,19],[29,24,34,22],[29,25,35,8],[30,10,36,10,"first"],[30,15,36,15],[30,17,36,17],[30,18,36,18],[31,10,37,10,"last"],[31,14,37,14],[31,16,37,16,"numCells"],[31,24,37,24],[31,27,37,27],[31,28,37,28],[32,10,38,10,"isSpacer"],[32,18,38,18],[32,20,38,20],[33,8,39,8],[33,9,39,9],[33,10,40,7],[34,6,41,4],[35,4,42,2],[36,4,42,3],[36,15,42,3,"_createClass2"],[36,28,42,3],[36,29,42,3,"default"],[36,36,42,3],[36,38,42,3,"CellRenderMask"],[36,52,42,3],[37,6,42,3,"key"],[37,9,42,3],[38,6,42,3,"value"],[38,11,42,3],[38,13,44,2],[38,22,44,2,"enumerateRegions"],[38,38,44,18,"enumerateRegions"],[38,39,44,18],[38,41,44,49],[39,8,45,4],[39,15,45,11],[39,19,45,15],[39,20,45,16,"_regions"],[39,28,45,24],[40,6,46,2],[41,4,46,3],[42,6,46,3,"key"],[42,9,46,3],[43,6,46,3,"value"],[43,11,46,3],[43,13,48,2],[43,22,48,2,"addCells"],[43,30,48,10,"addCells"],[43,31,48,11,"cells"],[43,36,48,47],[43,38,48,55],[44,8,48,55],[44,12,48,55,"_this$_regions"],[44,26,48,55],[45,8,49,4],[45,12,49,4,"invariant"],[45,30,49,13],[45,32,50,6,"cells"],[45,37,50,11],[45,38,50,12,"first"],[45,43,50,17],[45,47,50,21],[45,48,50,22],[45,52,51,8,"cells"],[45,57,51,13],[45,58,51,14,"first"],[45,63,51,19],[45,66,51,22],[45,70,51,26],[45,71,51,27,"_numCells"],[45,80,51,36],[45,84,52,8,"cells"],[45,89,52,13],[45,90,52,14,"last"],[45,94,52,18],[45,98,52,22],[45,99,52,23],[45,100,52,24],[45,104,53,8,"cells"],[45,109,53,13],[45,110,53,14,"last"],[45,114,53,18],[45,117,53,21],[45,121,53,25],[45,122,53,26,"_numCells"],[45,131,53,35],[45,135,54,8,"cells"],[45,140,54,13],[45,141,54,14,"last"],[45,145,54,18],[45,149,54,22,"cells"],[45,154,54,27],[45,155,54,28,"first"],[45,160,54,33],[45,163,54,36],[45,164,54,37],[45,166,55,6],[45,222,56,4],[45,223,56,5],[47,8,58,4],[48,8,59,4],[49,8,60,4],[49,12,60,8,"cells"],[49,17,60,13],[49,18,60,14,"last"],[49,22,60,18],[49,25,60,21,"cells"],[49,30,60,26],[49,31,60,27,"first"],[49,36,60,32],[49,38,60,34],[50,10,61,6],[51,8,62,4],[52,8,64,4],[52,12,64,4,"_this$_findRegion"],[52,29,64,4],[52,32,64,48],[52,36,64,52],[52,37,64,53,"_findRegion"],[52,48,64,64],[52,49,64,65,"cells"],[52,54,64,70],[52,55,64,71,"first"],[52,60,64,76],[52,61,64,77],[53,10,64,77,"_this$_findRegion2"],[53,28,64,77],[53,35,64,77,"_slicedToArray2"],[53,50,64,77],[53,51,64,77,"default"],[53,58,64,77],[53,60,64,77,"_this$_findRegion"],[53,77,64,77],[54,10,64,11,"firstIntersect"],[54,24,64,25],[54,27,64,25,"_this$_findRegion2"],[54,45,64,25],[55,10,64,27,"firstIntersectIdx"],[55,27,64,44],[55,30,64,44,"_this$_findRegion2"],[55,48,64,44],[56,8,65,4],[56,12,65,4,"_this$_findRegion3"],[56,30,65,4],[56,33,65,46],[56,37,65,50],[56,38,65,51,"_findRegion"],[56,49,65,62],[56,50,65,63,"cells"],[56,55,65,68],[56,56,65,69,"last"],[56,60,65,73],[56,61,65,74],[57,10,65,74,"_this$_findRegion4"],[57,28,65,74],[57,35,65,74,"_slicedToArray2"],[57,50,65,74],[57,51,65,74,"default"],[57,58,65,74],[57,60,65,74,"_this$_findRegion3"],[57,78,65,74],[58,10,65,11,"lastIntersect"],[58,23,65,24],[58,26,65,24,"_this$_findRegion4"],[58,44,65,24],[59,10,65,26,"lastIntersectIdx"],[59,26,65,42],[59,29,65,42,"_this$_findRegion4"],[59,47,65,42],[61,8,67,4],[62,8,68,4],[63,8,69,4],[63,12,69,8,"firstIntersectIdx"],[63,29,69,25],[63,34,69,30,"lastIntersectIdx"],[63,50,69,46],[63,54,69,50],[63,55,69,51,"firstIntersect"],[63,69,69,65],[63,70,69,66,"isSpacer"],[63,78,69,74],[63,80,69,76],[64,10,70,6],[65,8,71,4],[67,8,73,4],[68,8,74,4],[69,8,75,4],[69,12,75,10,"newLeadRegion"],[69,25,75,42],[69,28,75,45],[69,30,75,47],[70,8,76,4],[70,12,76,10,"newTailRegion"],[70,25,76,42],[70,28,76,45],[70,30,76,47],[71,8,77,4],[71,12,77,10,"newMainRegion"],[71,25,77,35],[71,28,77,35,"Object"],[71,34,77,35],[71,35,77,35,"assign"],[71,41,77,35],[71,46,78,9,"cells"],[71,51,78,14],[72,10,79,6,"isSpacer"],[72,18,79,14],[72,20,79,16],[73,8,79,21],[73,10,80,5],[74,8,82,4],[74,12,82,8,"firstIntersect"],[74,26,82,22],[74,27,82,23,"first"],[74,32,82,28],[74,35,82,31,"newMainRegion"],[74,48,82,44],[74,49,82,45,"first"],[74,54,82,50],[74,56,82,52],[75,10,83,6],[75,14,83,10,"firstIntersect"],[75,28,83,24],[75,29,83,25,"isSpacer"],[75,37,83,33],[75,39,83,35],[76,12,84,8,"newLeadRegion"],[76,25,84,21],[76,26,84,22,"push"],[76,30,84,26],[76,31,84,27],[77,14,85,10,"first"],[77,19,85,15],[77,21,85,17,"firstIntersect"],[77,35,85,31],[77,36,85,32,"first"],[77,41,85,37],[78,14,86,10,"last"],[78,18,86,14],[78,20,86,16,"newMainRegion"],[78,33,86,29],[78,34,86,30,"first"],[78,39,86,35],[78,42,86,38],[78,43,86,39],[79,14,87,10,"isSpacer"],[79,22,87,18],[79,24,87,20],[80,12,88,8],[80,13,88,9],[80,14,88,10],[81,10,89,6],[81,11,89,7],[81,17,89,13],[82,12,90,8,"newMainRegion"],[82,25,90,21],[82,26,90,22,"first"],[82,31,90,27],[82,34,90,30,"firstIntersect"],[82,48,90,44],[82,49,90,45,"first"],[82,54,90,50],[83,10,91,6],[84,8,92,4],[85,8,94,4],[85,12,94,8,"lastIntersect"],[85,25,94,21],[85,26,94,22,"last"],[85,30,94,26],[85,33,94,29,"newMainRegion"],[85,46,94,42],[85,47,94,43,"last"],[85,51,94,47],[85,53,94,49],[86,10,95,6],[86,14,95,10,"lastIntersect"],[86,27,95,23],[86,28,95,24,"isSpacer"],[86,36,95,32],[86,38,95,34],[87,12,96,8,"newTailRegion"],[87,25,96,21],[87,26,96,22,"push"],[87,30,96,26],[87,31,96,27],[88,14,97,10,"first"],[88,19,97,15],[88,21,97,17,"newMainRegion"],[88,34,97,30],[88,35,97,31,"last"],[88,39,97,35],[88,42,97,38],[88,43,97,39],[89,14,98,10,"last"],[89,18,98,14],[89,20,98,16,"lastIntersect"],[89,33,98,29],[89,34,98,30,"last"],[89,38,98,34],[90,14,99,10,"isSpacer"],[90,22,99,18],[90,24,99,20],[91,12,100,8],[91,13,100,9],[91,14,100,10],[92,10,101,6],[92,11,101,7],[92,17,101,13],[93,12,102,8,"newMainRegion"],[93,25,102,21],[93,26,102,22,"last"],[93,30,102,26],[93,33,102,29,"lastIntersect"],[93,46,102,42],[93,47,102,43,"last"],[93,51,102,47],[94,10,103,6],[95,8,104,4],[96,8,106,4],[96,12,106,10,"replacementRegions"],[96,30,106,47],[96,36,106,47,"concat"],[96,42,106,47],[96,43,107,9,"newLeadRegion"],[96,56,107,22],[96,59,108,6,"newMainRegion"],[96,72,108,19],[96,75,109,9,"newTailRegion"],[96,88,109,22],[96,89,110,5],[97,8,111,4],[97,12,111,10,"numRegionsToDelete"],[97,30,111,28],[97,33,111,31,"lastIntersectIdx"],[97,49,111,47],[97,52,111,50,"firstIntersectIdx"],[97,69,111,67],[97,72,111,70],[97,73,111,71],[98,8,112,4],[98,9,112,4,"_this$_regions"],[98,23,112,4],[98,30,112,8],[98,31,112,9,"_regions"],[98,39,112,17],[98,41,112,18,"splice"],[98,47,112,24],[98,48,112,24,"apply"],[98,53,112,24],[98,54,112,24,"_this$_regions"],[98,68,112,24],[98,71,113,6,"firstIntersectIdx"],[98,88,113,23],[98,90,114,6,"numRegionsToDelete"],[98,108,114,24],[98,110,114,24,"concat"],[98,116,114,24],[98,121,114,24,"_toConsumableArray2"],[98,140,114,24],[98,141,114,24,"default"],[98,148,114,24],[98,150,115,9,"replacementRegions"],[98,168,115,27],[98,170,116,4],[98,171,116,5],[99,6,117,2],[100,4,117,3],[101,6,117,3,"key"],[101,9,117,3],[102,6,117,3,"value"],[102,11,117,3],[102,13,119,2],[102,22,119,2,"numCells"],[102,30,119,10,"numCells"],[102,31,119,10],[102,33,119,21],[103,8,120,4],[103,15,120,11],[103,19,120,15],[103,20,120,16,"_numCells"],[103,29,120,25],[104,6,121,2],[105,4,121,3],[106,6,121,3,"key"],[106,9,121,3],[107,6,121,3,"value"],[107,11,121,3],[107,13,123,2],[107,22,123,2,"equals"],[107,28,123,8,"equals"],[107,29,123,9,"other"],[107,34,123,30],[107,36,123,41],[108,8,124,4],[108,15,125,6],[108,19,125,10],[108,20,125,11,"_numCells"],[108,29,125,20],[108,34,125,25,"other"],[108,39,125,30],[108,40,125,31,"_numCells"],[108,49,125,40],[108,53,126,6],[108,57,126,10],[108,58,126,11,"_regions"],[108,66,126,19],[108,67,126,20,"length"],[108,73,126,26],[108,78,126,31,"other"],[108,83,126,36],[108,84,126,37,"_regions"],[108,92,126,45],[108,93,126,46,"length"],[108,99,126,52],[108,103,127,6],[108,107,127,10],[108,108,127,11,"_regions"],[108,116,127,19],[108,117,127,20,"every"],[108,122,127,25],[108,123,128,8],[108,133,128,9,"region"],[108,139,128,15],[108,141,128,17,"i"],[108,142,128,18],[109,10,128,18],[109,17,129,10,"region"],[109,23,129,16],[109,24,129,17,"first"],[109,29,129,22],[109,34,129,27,"other"],[109,39,129,32],[109,40,129,33,"_regions"],[109,48,129,41],[109,49,129,42,"i"],[109,50,129,43],[109,51,129,44],[109,52,129,45,"first"],[109,57,129,50],[109,61,130,10,"region"],[109,67,130,16],[109,68,130,17,"last"],[109,72,130,21],[109,77,130,26,"other"],[109,82,130,31],[109,83,130,32,"_regions"],[109,91,130,40],[109,92,130,41,"i"],[109,93,130,42],[109,94,130,43],[109,95,130,44,"last"],[109,99,130,48],[109,103,131,10,"region"],[109,109,131,16],[109,110,131,17,"isSpacer"],[109,118,131,25],[109,123,131,30,"other"],[109,128,131,35],[109,129,131,36,"_regions"],[109,137,131,44],[109,138,131,45,"i"],[109,139,131,46],[109,140,131,47],[109,141,131,48,"isSpacer"],[109,149,131,56],[110,8,131,56],[110,9,132,6],[110,10,132,7],[111,6,134,2],[112,4,134,3],[113,6,134,3,"key"],[113,9,134,3],[114,6,134,3,"value"],[114,11,134,3],[114,13,136,2],[114,22,136,2,"_findRegion"],[114,33,136,13,"_findRegion"],[114,34,136,14,"cellIdx"],[114,41,136,29],[114,43,136,53],[115,8,137,4],[115,12,137,8,"firstIdx"],[115,20,137,16],[115,23,137,19],[115,24,137,20],[116,8,138,4],[116,12,138,8,"lastIdx"],[116,19,138,15],[116,22,138,18],[116,26,138,22],[116,27,138,23,"_regions"],[116,35,138,31],[116,36,138,32,"length"],[116,42,138,38],[116,45,138,41],[116,46,138,42],[117,8,140,4],[117,15,140,11,"firstIdx"],[117,23,140,19],[117,27,140,23,"lastIdx"],[117,34,140,30],[117,36,140,32],[118,10,141,6],[118,14,141,12,"middleIdx"],[118,23,141,21],[118,26,141,24,"Math"],[118,30,141,28],[118,31,141,29,"floor"],[118,36,141,34],[118,37,141,35],[118,38,141,36,"firstIdx"],[118,46,141,44],[118,49,141,47,"lastIdx"],[118,56,141,54],[118,60,141,58],[118,61,141,59],[118,62,141,60],[119,10,142,6],[119,14,142,12,"middleRegion"],[119,26,142,24],[119,29,142,27],[119,33,142,31],[119,34,142,32,"_regions"],[119,42,142,40],[119,43,142,41,"middleIdx"],[119,52,142,50],[119,53,142,51],[120,10,144,6],[120,14,144,10,"cellIdx"],[120,21,144,17],[120,25,144,21,"middleRegion"],[120,37,144,33],[120,38,144,34,"first"],[120,43,144,39],[120,47,144,43,"cellIdx"],[120,54,144,50],[120,58,144,54,"middleRegion"],[120,70,144,66],[120,71,144,67,"last"],[120,75,144,71],[120,77,144,73],[121,12,145,8],[121,19,145,15],[121,20,145,16,"middleRegion"],[121,32,145,28],[121,34,145,30,"middleIdx"],[121,43,145,39],[121,44,145,40],[122,10,146,6],[122,11,146,7],[122,17,146,13],[122,21,146,17,"cellIdx"],[122,28,146,24],[122,31,146,27,"middleRegion"],[122,43,146,39],[122,44,146,40,"first"],[122,49,146,45],[122,51,146,47],[123,12,147,8,"lastIdx"],[123,19,147,15],[123,22,147,18,"middleIdx"],[123,31,147,27],[123,34,147,30],[123,35,147,31],[124,10,148,6],[124,11,148,7],[124,17,148,13],[124,21,148,17,"cellIdx"],[124,28,148,24],[124,31,148,27,"middleRegion"],[124,43,148,39],[124,44,148,40,"last"],[124,48,148,44],[124,50,148,46],[125,12,149,8,"firstIdx"],[125,20,149,16],[125,23,149,19,"middleIdx"],[125,32,149,28],[125,35,149,31],[125,36,149,32],[126,10,150,6],[127,8,151,4],[128,8,153,4],[128,12,153,4,"invariant"],[128,30,153,13],[128,32,153,14],[128,37,153,19],[128,39,153,21],[128,84,153,66,"cellIdx"],[128,91,153,73],[128,93,153,75],[128,94,153,76],[129,6,154,2],[130,4,154,3],[131,2,154,3],[132,0,154,3],[132,3]],"functionMap":{"names":["<global>","CellRenderMask","constructor","enumerateRegions","addCells","numCells","equals","_regions.every$argument_0","_findRegion"],"mappings":"AAA;OCkB;ECI;GDmB;EEE;GFE;EGE;GHqE;EIE;GJE;EKE;QCK;wDDG;GLG;EOE;GPkB;CDC"}},"type":"js/module"}]}