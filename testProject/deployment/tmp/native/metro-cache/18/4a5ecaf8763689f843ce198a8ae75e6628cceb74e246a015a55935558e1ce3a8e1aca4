{"dependencies":[{"name":"base64-js","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":15,"index":252},"end":{"line":13,"column":35,"index":272}},{"start":{"line":13,"column":15,"index":252},"end":{"line":13,"column":35,"index":272}}],"key":"WsVgY7Y3wTb44B4uSuqCo4p+2Ho="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  function binaryToBase64(data) {\n    if (data instanceof ArrayBuffer) {\n      // $FlowFixMe[reassign-const]\n      data = new Uint8Array(data);\n    }\n    if (data instanceof Uint8Array) {\n      return _$$_REQUIRE(_dependencyMap[0], \"base64-js\").fromByteArray(data);\n    }\n    if (!ArrayBuffer.isView(data)) {\n      throw new Error('data must be ArrayBuffer or typed array');\n    }\n    // Already checked that `data` is `DataView` in `ArrayBuffer.isView(data)`\n    var _ref = data,\n      buffer = _ref.buffer,\n      byteOffset = _ref.byteOffset,\n      byteLength = _ref.byteLength;\n    return _$$_REQUIRE(_dependencyMap[0], \"base64-js\").fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));\n  }\n  module.exports = binaryToBase64;\n});","lineCount":33,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,15,0],[14,11,15,9,"binaryToBase64"],[14,25,15,23,"binaryToBase64"],[14,26,15,24,"data"],[14,30,15,60],[14,32,15,70],[15,4,16,2],[15,8,16,6,"data"],[15,12,16,10],[15,24,16,22,"ArrayBuffer"],[15,35,16,33],[15,37,16,35],[16,6,17,4],[17,6,18,4,"data"],[17,10,18,8],[17,13,18,11],[17,17,18,15,"Uint8Array"],[17,27,18,25],[17,28,18,26,"data"],[17,32,18,30],[17,33,18,31],[18,4,19,2],[19,4,20,2],[19,8,20,6,"data"],[19,12,20,10],[19,24,20,22,"Uint8Array"],[19,34,20,32],[19,36,20,34],[20,6,21,4],[20,13,21,11,"_$$_REQUIRE"],[20,24,21,11],[20,25,21,11,"_dependencyMap"],[20,39,21,11],[20,57,21,18,"fromByteArray"],[20,70,21,31],[20,71,21,32,"data"],[20,75,21,36],[20,76,21,37],[21,4,22,2],[22,4,23,2],[22,8,23,6],[22,9,23,7,"ArrayBuffer"],[22,20,23,18],[22,21,23,19,"isView"],[22,27,23,25],[22,28,23,26,"data"],[22,32,23,30],[22,33,23,31],[22,35,23,33],[23,6,24,4],[23,12,24,10],[23,16,24,14,"Error"],[23,21,24,19],[23,22,24,20],[23,63,24,61],[23,64,24,62],[24,4,25,2],[25,4,26,2],[26,4,27,2],[26,8,27,2,"_ref"],[26,12,27,2],[26,15,27,54,"data"],[26,19,27,58],[27,6,27,9,"buffer"],[27,12,27,15],[27,15,27,15,"_ref"],[27,19,27,15],[27,20,27,9,"buffer"],[27,26,27,15],[28,6,27,17,"byteOffset"],[28,16,27,27],[28,19,27,27,"_ref"],[28,23,27,27],[28,24,27,17,"byteOffset"],[28,34,27,27],[29,6,27,29,"byteLength"],[29,16,27,39],[29,19,27,39,"_ref"],[29,23,27,39],[29,24,27,29,"byteLength"],[29,34,27,39],[30,4,28,2],[30,11,28,9,"_$$_REQUIRE"],[30,22,28,9],[30,23,28,9,"_dependencyMap"],[30,37,28,9],[30,55,28,16,"fromByteArray"],[30,68,28,29],[30,69,28,30],[30,73,28,34,"Uint8Array"],[30,83,28,44],[30,84,28,45,"buffer"],[30,90,28,51],[30,92,28,53,"byteOffset"],[30,102,28,63],[30,104,28,65,"byteLength"],[30,114,28,75],[30,115,28,76],[30,116,28,77],[31,2,29,0],[32,2,31,0,"module"],[32,8,31,6],[32,9,31,7,"exports"],[32,16,31,14],[32,19,31,17,"binaryToBase64"],[32,33,31,31],[33,0,31,32],[33,3]],"functionMap":{"names":["<global>","binaryToBase64"],"mappings":"AAA;ACc;CDc"}},"type":"js/module"}]}