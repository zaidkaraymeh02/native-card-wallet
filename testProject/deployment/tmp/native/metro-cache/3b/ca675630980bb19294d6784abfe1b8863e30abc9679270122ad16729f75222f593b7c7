{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"@babel/runtime/helpers/possibleConstructorReturn","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"rcd0dMwf8BS2g+8U1wyhIOxtYEo="}},{"name":"@babel/runtime/helpers/getPrototypeOf","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"4pxOr+e+5cSZAdeEKxSt3F7LoKY="}},{"name":"@babel/runtime/helpers/inherits","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"EDnOjopp9yNVawSzfBRsy2dq5dM="}},{"name":"react","data":{"asyncType":null,"locs":[{"start":{"line":9,"column":0,"index":414},"end":{"line":9,"column":31,"index":445}}],"key":"a4EMkKqamYWCMMPV7UeQlqGQ+ks="}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":481},"end":{"line":11,"column":34,"index":515}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}},{"name":"react-native","data":{"asyncType":null,"locs":[{"start":{"line":12,"column":0,"index":516},"end":{"line":24,"column":22,"index":714}}],"key":"XEo4Z+Aarw9Y7I7ZLBt66vGLAVQ="}},{"name":"react/jsx-runtime","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":757,"column":0,"index":24697}}],"key":"5dCMGbjkz1QWCPjOwzvy5ZBkuK8="}},{"name":"../State","data":{"asyncType":null,"locs":[{"start":{"line":39,"column":0,"index":1119},"end":{"line":39,"column":33,"index":1152}},{"start":{"line":39,"column":0,"index":1119},"end":{"line":39,"column":33,"index":1152}},{"start":{"line":39,"column":0,"index":1119},"end":{"line":39,"column":33,"index":1152}}],"key":"Q8nOM11Vuvfos2IZ/lO9FOcbk+g="}},{"name":"../handlers/TapGestureHandler","data":{"asyncType":null,"locs":[{"start":{"line":38,"column":0,"index":1052},"end":{"line":38,"column":66,"index":1118}}],"key":"udDdKFGO2nasp6gS3VqBD6s+kqU="}},{"name":"../handlers/PanGestureHandler","data":{"asyncType":null,"locs":[{"start":{"line":33,"column":0,"index":856},"end":{"line":33,"column":66,"index":922}}],"key":"bn+lbxpMbf3je7YiD+sp2eAm3NM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _possibleConstructorReturn2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/possibleConstructorReturn\"));\n  var _getPrototypeOf2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/getPrototypeOf\"));\n  var _inherits2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"@babel/runtime/helpers/inherits\"));\n  var _react = _interopRequireWildcard(_$$_REQUIRE(_dependencyMap[6], \"react\"));\n  var React = _react;\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"invariant\"));\n  var _reactNative = _$$_REQUIRE(_dependencyMap[8], \"react-native\");\n  var _jsxRuntime = _$$_REQUIRE(_dependencyMap[9], \"react/jsx-runtime\");\n  var _jsxFileName = \"C:\\\\Program Files\\\\Mendix\\\\10.18.1.55792\\\\modeler\\\\tools\\\\node\\\\node_modules\\\\react-native-gesture-handler\\\\src\\\\components\\\\DrawerLayout.tsx\";\n  function _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }\n  function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n  function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }\n  function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); } // This component is based on RN's DrawerLayoutAndroid API\n  //\n  // It perhaps deserves to be put in a separate repo, but since it relies on\n  // react-native-gesture-handler library which isn't very popular at the moment I\n  // decided to keep it here for the time being. It will allow us to move faster\n  // and fix issues that may arise in gesture handler library that could be found\n  // when using the drawer component\n  var DRAG_TOSS = 0.05;\n  var IDLE = 'Idle';\n  var DRAGGING = 'Dragging';\n  var SETTLING = 'Settling';\n\n  // Animated.AnimatedInterpolation has been converted to a generic type\n  // in @types/react-native 0.70. This way we can maintain compatibility\n  // with all versions of @types/react-native`\n  var DrawerLayout = exports.default = /*#__PURE__*/function (_Component) {\n    function DrawerLayout(_props) {\n      var _this;\n      (0, _classCallCheck2.default)(this, DrawerLayout);\n      _this = _callSuper(this, DrawerLayout, [_props]);\n      _this.accessibilityIsModalView = React.createRef();\n      _this.pointerEventsView = React.createRef();\n      _this.panGestureHandler = React.createRef();\n      _this.drawerShown = false;\n      _this.updateAnimatedEvent = function (props, state) {\n        // Event definition is based on\n        var drawerPosition = props.drawerPosition,\n          drawerWidth = props.drawerWidth,\n          drawerType = props.drawerType;\n        var dragXValue = state.dragX,\n          touchXValue = state.touchX,\n          drawerTranslation = state.drawerTranslation,\n          containerWidth = state.containerWidth;\n        var dragX = dragXValue;\n        var touchX = touchXValue;\n        if (drawerPosition !== 'left') {\n          // Most of the code is written in a way to handle left-side drawer. In\n          // order to handle right-side drawer the only thing we need to do is to\n          // reverse events coming from gesture handler in a way they emulate\n          // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n          // calulcated by subtracing real touchX from the width of the container\n          // (such that when touch happens at the right edge the value is simply 0)\n          dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n          touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n          touchXValue.setValue(containerWidth);\n        } else {\n          touchXValue.setValue(0);\n        }\n\n        // While closing the drawer when user starts gesture outside of its area (in greyed\n        // out part of the window), we want the drawer to follow only once finger reaches the\n        // edge of the drawer.\n        // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n        // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n        // an arrow pointing left\n        // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n        //    +---------------+    +---------------+    +---------------+    +---------------+\n        //\n        // For the above to work properly we define animated value that will keep\n        // start position of the gesture. Then we use that value to calculate how\n        // much we need to subtract from the dragX. If the gesture started on the\n        // greyed out area we take the distance from the edge of the drawer to the\n        // start position. Otherwise we don't subtract at all and the drawer be\n        // pulled back as soon as you start the pan.\n        //\n        // This is used only when drawerType is \"front\"\n        //\n        var translationX = dragX;\n        if (drawerType === 'front') {\n          var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n          var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n            inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n            outputRange: [0, 0, 1]\n          });\n          translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n        }\n        _this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n          inputRange: [0, drawerWidth],\n          outputRange: [0, 1],\n          extrapolate: 'clamp'\n        });\n        var gestureOptions = {\n          useNativeDriver: props.useNativeAnimations\n        };\n        if (_this.props.onDrawerSlide) {\n          gestureOptions.listener = function (ev) {\n            var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n            var position = translationX / _this.state.containerWidth;\n            _this.props.onDrawerSlide == null || _this.props.onDrawerSlide(position);\n          };\n        }\n        _this.onGestureEvent = _reactNative.Animated.event([{\n          nativeEvent: {\n            translationX: dragXValue,\n            x: touchXValue\n          }\n        }], gestureOptions);\n      };\n      _this.handleContainerLayout = function (_ref) {\n        var nativeEvent = _ref.nativeEvent;\n        _this.setState({\n          containerWidth: nativeEvent.layout.width\n        });\n      };\n      _this.emitStateChanged = function (newState, drawerWillShow) {\n        _this.props.onDrawerStateChanged == null || _this.props.onDrawerStateChanged(newState, drawerWillShow);\n      };\n      _this.openingHandlerStateChange = function (_ref2) {\n        var nativeEvent = _ref2.nativeEvent;\n        if (nativeEvent.oldState === _$$_REQUIRE(_dependencyMap[10], \"../State\").State.ACTIVE) {\n          _this.handleRelease({\n            nativeEvent: nativeEvent\n          });\n        } else if (nativeEvent.state === _$$_REQUIRE(_dependencyMap[10], \"../State\").State.ACTIVE) {\n          _this.emitStateChanged(DRAGGING, false);\n          _this.setState({\n            drawerState: DRAGGING\n          });\n          if (_this.props.keyboardDismissMode === 'on-drag') {\n            _reactNative.Keyboard.dismiss();\n          }\n          if (_this.props.hideStatusBar) {\n            _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n          }\n        }\n      };\n      _this.onTapHandlerStateChange = function (_ref3) {\n        var nativeEvent = _ref3.nativeEvent;\n        if (_this.drawerShown && nativeEvent.oldState === _$$_REQUIRE(_dependencyMap[10], \"../State\").State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n          _this.closeDrawer();\n        }\n      };\n      _this.handleRelease = function (_ref4) {\n        var nativeEvent = _ref4.nativeEvent;\n        var _this$props = _this.props,\n          drawerWidth = _this$props.drawerWidth,\n          drawerPosition = _this$props.drawerPosition,\n          drawerType = _this$props.drawerType;\n        var containerWidth = _this.state.containerWidth;\n        var dragX = nativeEvent.translationX,\n          velocityX = nativeEvent.velocityX,\n          touchX = nativeEvent.x;\n        if (drawerPosition !== 'left') {\n          // See description in _updateAnimatedEvent about why events are flipped\n          // for right-side drawer\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n        var gestureStartX = touchX - dragX;\n        var dragOffsetBasedOnStart = 0;\n        if (drawerType === 'front') {\n          dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n        var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n        var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n        var shouldOpen = projOffsetX > drawerWidth / 2;\n        if (shouldOpen) {\n          _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n        } else {\n          _this.animateDrawer(startOffsetX, 0, velocityX);\n        }\n      };\n      _this.updateShowing = function (showing) {\n        var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n        _this.drawerShown = showing;\n        (_this$accessibilityIs = _this.accessibilityIsModalView.current) == null || _this$accessibilityIs.setNativeProps({\n          accessibilityViewIsModal: showing\n        });\n        (_this$pointerEventsVi = _this.pointerEventsView.current) == null || _this$pointerEventsVi.setNativeProps({\n          pointerEvents: showing ? 'auto' : 'none'\n        });\n        var _this$props2 = _this.props,\n          drawerPosition = _this$props2.drawerPosition,\n          minSwipeDistance = _this$props2.minSwipeDistance,\n          edgeWidth = _this$props2.edgeWidth;\n        var fromLeft = drawerPosition === 'left';\n        // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n        var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n        // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n        var hitSlop = fromLeft ? {\n          left: 0,\n          width: showing ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: showing ? undefined : edgeWidth\n        };\n        // @ts-ignore internal API, maybe could be fixed in handler types\n        (_this$panGestureHandl = _this.panGestureHandler.current) == null || _this$panGestureHandl.setNativeProps({\n          hitSlop: hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance\n        });\n      };\n      _this.animateDrawer = function (fromValue, toValue, velocity, speed) {\n        _this.state.dragX.setValue(0);\n        _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n        if (fromValue != null) {\n          var nextFramePosition = fromValue;\n          if (_this.props.useNativeAnimations) {\n            // When using native driver, we predict the next position of the\n            // animation because it takes one frame of a roundtrip to pass RELEASE\n            // event from native driver to JS before we can start animating. Without\n            // it, it is more noticable that the frame is dropped.\n            if (fromValue < toValue && velocity > 0) {\n              nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n            } else if (fromValue > toValue && velocity < 0) {\n              nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n            }\n          }\n          _this.state.drawerTranslation.setValue(nextFramePosition);\n        }\n        var willShow = toValue !== 0;\n        _this.updateShowing(willShow);\n        _this.emitStateChanged(SETTLING, willShow);\n        _this.setState({\n          drawerState: SETTLING\n        });\n        if (_this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n        }\n        _reactNative.Animated.spring(_this.state.drawerTranslation, {\n          velocity: velocity,\n          bounciness: 0,\n          toValue: toValue,\n          useNativeDriver: _this.props.useNativeAnimations,\n          speed: speed != null ? speed : undefined\n        }).start(function (_ref5) {\n          var finished = _ref5.finished;\n          if (finished) {\n            _this.emitStateChanged(IDLE, willShow);\n            _this.setState({\n              drawerOpened: willShow\n            });\n            if (_this.state.drawerState !== DRAGGING) {\n              // It's possilbe that user started drag while the drawer\n              // was settling, don't override state in this case\n              _this.setState({\n                drawerState: IDLE\n              });\n            }\n            if (willShow) {\n              _this.props.onDrawerOpen == null || _this.props.onDrawerOpen();\n            } else {\n              _this.props.onDrawerClose == null || _this.props.onDrawerClose();\n            }\n          }\n        });\n      };\n      _this.openDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _this.animateDrawer(\n        // TODO: decide if it should be null or undefined is the proper value\n        undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n\n        // We need to force the update, otherwise the overlay is not rerendered and\n        // it would not be clickable\n        _this.forceUpdate();\n      };\n      _this.closeDrawer = function () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        // TODO: decide if it should be null or undefined is the proper value\n        _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n\n        // We need to force the update, otherwise the overlay is not rerendered and\n        // it would be still clickable\n        _this.forceUpdate();\n      };\n      _this.renderOverlay = function () {\n        /* Overlay styles */\n        (0, _invariant.default)(_this.openValue, 'should be set');\n        var overlayOpacity;\n        if (_this.state.drawerState !== IDLE) {\n          overlayOpacity = _this.openValue;\n        } else {\n          overlayOpacity = _this.state.drawerOpened ? 1 : 0;\n        }\n        var dynamicOverlayStyles = {\n          opacity: overlayOpacity,\n          backgroundColor: _this.props.overlayColor\n        };\n        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[11], \"../handlers/TapGestureHandler\").TapGestureHandler, {\n          onHandlerStateChange: _this.onTapHandlerStateChange,\n          children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {\n            pointerEvents: _this.drawerShown ? 'auto' : 'none',\n            ref: _this.pointerEventsView,\n            style: [styles.overlay, dynamicOverlayStyles]\n          })\n        });\n      };\n      _this.renderDrawer = function () {\n        var _this$props3 = _this.props,\n          drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n          drawerWidth = _this$props3.drawerWidth,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          drawerContainerStyle = _this$props3.drawerContainerStyle,\n          contentContainerStyle = _this$props3.contentContainerStyle;\n        var fromLeft = drawerPosition === 'left';\n        var drawerSlide = drawerType !== 'back';\n        var containerSlide = drawerType !== 'front';\n\n        // We rely on row and row-reverse flex directions to position the drawer\n        // properly. Apparently for RTL these are flipped which requires us to use\n        // the opposite setting for the drawer to appear from left or right\n        // according to the drawerPosition prop\n        var reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n        var dynamicDrawerStyles = {\n          backgroundColor: drawerBackgroundColor,\n          width: drawerWidth\n        };\n        var openValue = _this.openValue;\n        (0, _invariant.default)(openValue, 'should be set');\n        var containerStyles;\n        if (containerSlide) {\n          var containerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n            extrapolate: 'clamp'\n          });\n          containerStyles = {\n            transform: [{\n              translateX: containerTranslateX\n            }]\n          };\n        }\n        var drawerTranslateX = 0;\n        if (drawerSlide) {\n          var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n          if (_this.state.drawerState !== IDLE) {\n            drawerTranslateX = openValue.interpolate({\n              inputRange: [0, 1],\n              outputRange: [closedDrawerOffset, 0],\n              extrapolate: 'clamp'\n            });\n          } else {\n            drawerTranslateX = _this.state.drawerOpened ? 0 : closedDrawerOffset;\n          }\n        }\n        var drawerStyles = {\n          transform: [{\n            translateX: drawerTranslateX\n          }],\n          flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n        };\n        return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {\n          style: styles.main,\n          onLayout: _this.handleContainerLayout,\n          children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_reactNative.Animated.View, {\n            style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n            importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes',\n            children: [typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()]\n          }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {\n            pointerEvents: \"box-none\",\n            ref: _this.accessibilityIsModalView,\n            accessibilityViewIsModal: _this.drawerShown,\n            style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {\n              style: dynamicDrawerStyles,\n              children: _this.props.renderNavigationView(_this.openValue)\n            })\n          })]\n        });\n      };\n      _this.setPanGestureRef = function (ref) {\n        // TODO(TS): make sure it is OK taken from\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n        _this.panGestureHandler.current = ref;\n        _this.props.onGestureRef == null || _this.props.onGestureRef(ref);\n      };\n      var _dragX = new _reactNative.Animated.Value(0);\n      var _touchX = new _reactNative.Animated.Value(0);\n      var _drawerTranslation = new _reactNative.Animated.Value(0);\n      _this.state = {\n        dragX: _dragX,\n        touchX: _touchX,\n        drawerTranslation: _drawerTranslation,\n        containerWidth: 0,\n        drawerState: IDLE,\n        drawerOpened: false\n      };\n      _this.updateAnimatedEvent(_props, _this.state);\n      return _this;\n    }\n    (0, _inherits2.default)(DrawerLayout, _Component);\n    return (0, _createClass2.default)(DrawerLayout, [{\n      key: \"shouldComponentUpdate\",\n      value: function shouldComponentUpdate(props, state) {\n        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n          this.updateAnimatedEvent(props, state);\n        }\n        return true;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props4 = this.props,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerLockMode = _this$props4.drawerLockMode,\n          edgeWidth = _this$props4.edgeWidth,\n          minSwipeDistance = _this$props4.minSwipeDistance;\n        var fromLeft = drawerPosition === 'left';\n\n        // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n        var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n        // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n        var hitSlop = fromLeft ? {\n          left: 0,\n          width: this.drawerShown ? undefined : edgeWidth\n        } : {\n          right: 0,\n          width: this.drawerShown ? undefined : edgeWidth\n        };\n        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_$$_REQUIRE(_dependencyMap[12], \"../handlers/PanGestureHandler\").PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        , {\n          userSelect: this.props.userSelect,\n          activeCursor: this.props.activeCursor,\n          mouseButton: this.props.mouseButton,\n          enableContextMenu: this.props.enableContextMenu,\n          ref: this.setPanGestureRef,\n          hitSlop: hitSlop,\n          activeOffsetX: gestureOrientation * minSwipeDistance,\n          failOffsetY: [-15, 15],\n          onGestureEvent: this.onGestureEvent,\n          onHandlerStateChange: this.openingHandlerStateChange,\n          enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n          enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n          children: this.renderDrawer()\n        });\n      }\n    }]);\n  }(_react.Component);\n  DrawerLayout.defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false\n  };\n  DrawerLayout.positions = {\n    Left: 'left',\n    Right: 'right'\n  };\n  var styles = _reactNative.StyleSheet.create({\n    drawerContainer: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n      zIndex: 1001,\n      flexDirection: 'row'\n    }),\n    containerInFront: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n      zIndex: 1002\n    }),\n    containerOnBack: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject),\n    main: {\n      flex: 1,\n      zIndex: 0,\n      overflow: 'hidden'\n    },\n    overlay: Object.assign({}, _reactNative.StyleSheet.absoluteFillObject, {\n      zIndex: 1000\n    })\n  });\n});","lineCount":502,"map":[[12,2,9,0],[12,6,9,0,"_react"],[12,12,9,0],[12,15,9,0,"_interopRequireWildcard"],[12,38,9,0],[12,39,9,0,"_$$_REQUIRE"],[12,50,9,0],[12,51,9,0,"_dependencyMap"],[12,65,9,0],[13,2,9,31],[13,6,9,31,"React"],[13,11,9,31],[13,14,9,31,"_react"],[13,20,9,31],[14,2,11,0],[14,6,11,0,"_invariant"],[14,16,11,0],[14,19,11,0,"_interopRequireDefault"],[14,41,11,0],[14,42,11,0,"_$$_REQUIRE"],[14,53,11,0],[14,54,11,0,"_dependencyMap"],[14,68,11,0],[15,2,12,0],[15,6,12,0,"_reactNative"],[15,18,12,0],[15,21,12,0,"_$$_REQUIRE"],[15,32,12,0],[15,33,12,0,"_dependencyMap"],[15,47,12,0],[16,2,24,22],[16,6,24,22,"_jsxRuntime"],[16,17,24,22],[16,20,24,22,"_$$_REQUIRE"],[16,31,24,22],[16,32,24,22,"_dependencyMap"],[16,46,24,22],[17,2,24,22],[17,6,24,22,"_jsxFileName"],[17,18,24,22],[18,2,24,22],[18,11,24,22,"_getRequireWildcardCache"],[18,36,24,22,"e"],[18,37,24,22],[18,66,24,22,"WeakMap"],[18,73,24,22],[18,92,24,22,"r"],[18,93,24,22],[18,100,24,22,"WeakMap"],[18,107,24,22],[18,111,24,22,"t"],[18,112,24,22],[18,119,24,22,"WeakMap"],[18,126,24,22],[18,138,24,22,"_getRequireWildcardCache"],[18,162,24,22],[18,174,24,22,"_getRequireWildcardCache"],[18,199,24,22,"e"],[18,200,24,22],[18,211,24,22,"e"],[18,212,24,22],[18,215,24,22,"t"],[18,216,24,22],[18,219,24,22,"r"],[18,220,24,22],[18,225,24,22,"e"],[18,226,24,22],[19,2,24,22],[19,11,24,22,"_interopRequireWildcard"],[19,35,24,22,"e"],[19,36,24,22],[19,38,24,22,"r"],[19,39,24,22],[19,48,24,22,"r"],[19,49,24,22],[19,53,24,22,"e"],[19,54,24,22],[19,58,24,22,"e"],[19,59,24,22],[19,60,24,22,"__esModule"],[19,70,24,22],[19,79,24,22,"e"],[19,80,24,22],[19,95,24,22,"e"],[19,96,24,22],[19,119,24,22,"e"],[19,120,24,22],[19,145,24,22,"e"],[19,146,24,22],[19,157,24,22,"default"],[19,164,24,22],[19,166,24,22,"e"],[19,167,24,22],[19,175,24,22,"t"],[19,176,24,22],[19,179,24,22,"_getRequireWildcardCache"],[19,203,24,22],[19,204,24,22,"r"],[19,205,24,22],[19,212,24,22,"t"],[19,213,24,22],[19,217,24,22,"t"],[19,218,24,22],[19,219,24,22,"has"],[19,222,24,22],[19,223,24,22,"e"],[19,224,24,22],[19,234,24,22,"t"],[19,235,24,22],[19,236,24,22,"get"],[19,239,24,22],[19,240,24,22,"e"],[19,241,24,22],[19,248,24,22,"n"],[19,249,24,22],[19,254,24,22,"__proto__"],[19,263,24,22],[19,273,24,22,"a"],[19,274,24,22],[19,277,24,22,"Object"],[19,283,24,22],[19,284,24,22,"defineProperty"],[19,298,24,22],[19,302,24,22,"Object"],[19,308,24,22],[19,309,24,22,"getOwnPropertyDescriptor"],[19,333,24,22],[19,344,24,22,"u"],[19,345,24,22],[19,349,24,22,"e"],[19,350,24,22],[19,370,24,22,"u"],[19,371,24,22],[19,378,24,22,"hasOwnProperty"],[19,392,24,22],[19,393,24,22,"call"],[19,397,24,22],[19,398,24,22,"e"],[19,399,24,22],[19,401,24,22,"u"],[19,402,24,22],[19,411,24,22,"i"],[19,412,24,22],[19,415,24,22,"a"],[19,416,24,22],[19,419,24,22,"Object"],[19,425,24,22],[19,426,24,22,"getOwnPropertyDescriptor"],[19,450,24,22],[19,451,24,22,"e"],[19,452,24,22],[19,454,24,22,"u"],[19,455,24,22],[19,465,24,22,"i"],[19,466,24,22],[19,471,24,22,"i"],[19,472,24,22],[19,473,24,22,"get"],[19,476,24,22],[19,480,24,22,"i"],[19,481,24,22],[19,482,24,22,"set"],[19,485,24,22],[19,489,24,22,"Object"],[19,495,24,22],[19,496,24,22,"defineProperty"],[19,510,24,22],[19,511,24,22,"n"],[19,512,24,22],[19,514,24,22,"u"],[19,515,24,22],[19,517,24,22,"i"],[19,518,24,22],[19,522,24,22,"n"],[19,523,24,22],[19,524,24,22,"u"],[19,525,24,22],[19,529,24,22,"e"],[19,530,24,22],[19,531,24,22,"u"],[19,532,24,22],[19,544,24,22,"n"],[19,545,24,22],[19,546,24,22,"default"],[19,553,24,22],[19,556,24,22,"e"],[19,557,24,22],[19,559,24,22,"t"],[19,560,24,22],[19,564,24,22,"t"],[19,565,24,22],[19,566,24,22,"set"],[19,569,24,22],[19,570,24,22,"e"],[19,571,24,22],[19,573,24,22,"n"],[19,574,24,22],[19,577,24,22,"n"],[19,578,24,22],[20,2,24,22],[20,11,24,22,"_callSuper"],[20,22,24,22,"t"],[20,23,24,22],[20,25,24,22,"o"],[20,26,24,22],[20,28,24,22,"e"],[20,29,24,22],[20,40,24,22,"o"],[20,41,24,22],[20,48,24,22,"_getPrototypeOf2"],[20,64,24,22],[20,65,24,22,"default"],[20,72,24,22],[20,74,24,22,"o"],[20,75,24,22],[20,82,24,22,"_possibleConstructorReturn2"],[20,109,24,22],[20,110,24,22,"default"],[20,117,24,22],[20,119,24,22,"t"],[20,120,24,22],[20,122,24,22,"_isNativeReflectConstruct"],[20,147,24,22],[20,152,24,22,"Reflect"],[20,159,24,22],[20,160,24,22,"construct"],[20,169,24,22],[20,170,24,22,"o"],[20,171,24,22],[20,173,24,22,"e"],[20,174,24,22],[20,186,24,22,"_getPrototypeOf2"],[20,202,24,22],[20,203,24,22,"default"],[20,210,24,22],[20,212,24,22,"t"],[20,213,24,22],[20,215,24,22,"constructor"],[20,226,24,22],[20,230,24,22,"o"],[20,231,24,22],[20,232,24,22,"apply"],[20,237,24,22],[20,238,24,22,"t"],[20,239,24,22],[20,241,24,22,"e"],[20,242,24,22],[21,2,24,22],[21,11,24,22,"_isNativeReflectConstruct"],[21,37,24,22],[21,51,24,22,"t"],[21,52,24,22],[21,56,24,22,"Boolean"],[21,63,24,22],[21,64,24,22,"prototype"],[21,73,24,22],[21,74,24,22,"valueOf"],[21,81,24,22],[21,82,24,22,"call"],[21,86,24,22],[21,87,24,22,"Reflect"],[21,94,24,22],[21,95,24,22,"construct"],[21,104,24,22],[21,105,24,22,"Boolean"],[21,112,24,22],[21,145,24,22,"t"],[21,146,24,22],[21,159,24,22,"_isNativeReflectConstruct"],[21,184,24,22],[21,196,24,22,"_isNativeReflectConstruct"],[21,222,24,22],[21,235,24,22,"t"],[21,236,24,22],[21,246,1,0],[22,2,2,0],[23,2,3,0],[24,2,4,0],[25,2,5,0],[26,2,6,0],[27,2,7,0],[28,2,41,0],[28,6,41,6,"DRAG_TOSS"],[28,15,41,15],[28,18,41,18],[28,22,41,22],[29,2,43,0],[29,6,43,6,"IDLE"],[29,10,43,23],[29,13,43,26],[29,19,43,32],[30,2,44,0],[30,6,44,6,"DRAGGING"],[30,14,44,27],[30,17,44,30],[30,27,44,40],[31,2,45,0],[31,6,45,6,"SETTLING"],[31,14,45,27],[31,17,45,30],[31,27,45,40],[33,2,57,0],[34,2,58,0],[35,2,59,0],[36,2,59,0],[36,6,202,21,"DrawerLayout"],[36,18,202,33],[36,21,202,33,"exports"],[36,28,202,33],[36,29,202,33,"default"],[36,36,202,33],[36,62,202,33,"_Component"],[36,72,202,33],[37,4,218,2],[37,13,218,2,"DrawerLayout"],[37,26,218,14,"props"],[37,32,218,38],[37,34,218,40],[38,6,218,40],[38,10,218,40,"_this"],[38,15,218,40],[39,6,218,40],[39,10,218,40,"_classCallCheck2"],[39,26,218,40],[39,27,218,40,"default"],[39,34,218,40],[39,42,218,40,"DrawerLayout"],[39,54,218,40],[40,6,219,4,"_this"],[40,11,219,4],[40,14,219,4,"_callSuper"],[40,24,219,4],[40,31,219,4,"DrawerLayout"],[40,43,219,4],[40,46,219,10,"props"],[40,52,219,15],[41,6,219,17,"_this"],[41,11,219,17],[41,12,254,10,"accessibilityIsModalView"],[41,36,254,34],[41,39,254,37,"React"],[41,44,254,42],[41,45,254,43,"createRef"],[41,54,254,52],[41,55,254,59],[41,56,254,60],[42,6,254,60,"_this"],[42,11,254,60],[42,12,255,10,"pointerEventsView"],[42,29,255,27],[42,32,255,30,"React"],[42,37,255,35],[42,38,255,36,"createRef"],[42,47,255,45],[42,48,255,52],[42,49,255,53],[43,6,255,53,"_this"],[43,11,255,53],[43,12,256,10,"panGestureHandler"],[43,29,256,27],[43,32,256,30,"React"],[43,37,256,35],[43,38,256,36,"createRef"],[43,47,256,45],[43,48,256,72],[43,49,256,73],[44,6,256,73,"_this"],[44,11,256,73],[44,12,257,10,"drawerShown"],[44,23,257,21],[44,26,257,24],[44,31,257,29],[45,6,257,29,"_this"],[45,11,257,29],[45,12,264,10,"updateAnimatedEvent"],[45,31,264,29],[45,34,264,32],[45,44,265,4,"props"],[45,49,265,28],[45,51,266,4,"state"],[45,56,266,28],[45,58,267,7],[46,8,268,4],[47,8,269,4],[47,12,269,12,"drawerPosition"],[47,26,269,26],[47,29,269,56,"props"],[47,34,269,61],[47,35,269,12,"drawerPosition"],[47,49,269,26],[48,10,269,28,"drawerWidth"],[48,21,269,39],[48,24,269,56,"props"],[48,29,269,61],[48,30,269,28,"drawerWidth"],[48,41,269,39],[49,10,269,41,"drawerType"],[49,20,269,51],[49,23,269,56,"props"],[49,28,269,61],[49,29,269,41,"drawerType"],[49,39,269,51],[50,8,270,4],[50,12,271,13,"dragXValue"],[50,22,271,23],[50,25,275,8,"state"],[50,30,275,13],[50,31,271,6,"dragX"],[50,36,271,11],[51,10,272,14,"touchXValue"],[51,21,272,25],[51,24,275,8,"state"],[51,29,275,13],[51,30,272,6,"touchX"],[51,36,272,12],[52,10,273,6,"drawerTranslation"],[52,27,273,23],[52,30,275,8,"state"],[52,35,275,13],[52,36,273,6,"drawerTranslation"],[52,53,273,23],[53,10,274,6,"containerWidth"],[53,24,274,20],[53,27,275,8,"state"],[53,32,275,13],[53,33,274,6,"containerWidth"],[53,47,274,20],[54,8,277,4],[54,12,277,8,"dragX"],[54,17,277,13],[54,20,277,16,"dragXValue"],[54,30,277,26],[55,8,278,4],[55,12,278,8,"touchX"],[55,18,278,14],[55,21,278,17,"touchXValue"],[55,32,278,28],[56,8,280,4],[56,12,280,8,"drawerPosition"],[56,26,280,22],[56,31,280,27],[56,37,280,33],[56,39,280,35],[57,10,281,6],[58,10,282,6],[59,10,283,6],[60,10,284,6],[61,10,285,6],[62,10,286,6],[63,10,287,6,"dragX"],[63,15,287,11],[63,18,287,14,"Animated"],[63,39,287,22],[63,40,287,23,"multiply"],[63,48,287,31],[63,49,288,8],[63,53,288,12,"Animated"],[63,74,288,20],[63,75,288,21,"Value"],[63,80,288,26],[63,81,288,27],[63,82,288,28],[63,83,288,29],[63,84,288,30],[63,86,289,8,"dragXValue"],[63,96,290,6],[63,97,290,25],[63,98,290,26],[63,99,290,27],[64,10,291,6,"touchX"],[64,16,291,12],[64,19,291,15,"Animated"],[64,40,291,23],[64,41,291,24,"add"],[64,44,291,27],[64,45,292,8],[64,49,292,12,"Animated"],[64,70,292,20],[64,71,292,21,"Value"],[64,76,292,26],[64,77,292,27,"containerWidth"],[64,91,292,41],[64,92,292,42],[64,94,293,8,"Animated"],[64,115,293,16],[64,116,293,17,"multiply"],[64,124,293,25],[64,125,293,26],[64,129,293,30,"Animated"],[64,150,293,38],[64,151,293,39,"Value"],[64,156,293,44],[64,157,293,45],[64,158,293,46],[64,159,293,47],[64,160,293,48],[64,162,293,50,"touchXValue"],[64,173,293,61],[64,174,294,6],[64,175,294,25],[64,176,294,26],[64,177,294,27],[65,10,295,6,"touchXValue"],[65,21,295,17],[65,22,295,18,"setValue"],[65,30,295,26],[65,31,295,27,"containerWidth"],[65,45,295,41],[65,46,295,42],[66,8,296,4],[66,9,296,5],[66,15,296,11],[67,10,297,6,"touchXValue"],[67,21,297,17],[67,22,297,18,"setValue"],[67,30,297,26],[67,31,297,27],[67,32,297,28],[67,33,297,29],[68,8,298,4],[70,8,300,4],[71,8,301,4],[72,8,302,4],[73,8,303,4],[74,8,304,4],[75,8,305,4],[76,8,306,4],[77,8,307,4],[78,8,308,4],[79,8,309,4],[80,8,310,4],[81,8,311,4],[82,8,312,4],[83,8,313,4],[84,8,314,4],[85,8,315,4],[86,8,316,4],[87,8,317,4],[88,8,318,4],[89,8,319,4],[90,8,320,4],[91,8,321,4],[92,8,322,4],[93,8,323,4],[94,8,324,4],[95,8,325,4],[95,12,325,8,"translationX"],[95,24,325,20],[95,27,325,23,"dragX"],[95,32,325,28],[96,8,326,4],[96,12,326,8,"drawerType"],[96,22,326,18],[96,27,326,23],[96,34,326,30],[96,36,326,32],[97,10,327,6],[97,14,327,12,"startPositionX"],[97,28,327,26],[97,31,327,29,"Animated"],[97,52,327,37],[97,53,327,38,"add"],[97,56,327,41],[97,57,328,8,"touchX"],[97,63,328,14],[97,65,329,8,"Animated"],[97,86,329,16],[97,87,329,17,"multiply"],[97,95,329,25],[97,96,329,26],[97,100,329,30,"Animated"],[97,121,329,38],[97,122,329,39,"Value"],[97,127,329,44],[97,128,329,45],[97,129,329,46],[97,130,329,47],[97,131,329,48],[97,133,329,50,"dragX"],[97,138,329,55],[97,139,330,6],[97,140,330,7],[98,10,332,6],[98,14,332,12,"dragOffsetFromOnStartPosition"],[98,43,332,41],[98,46,332,44,"startPositionX"],[98,60,332,58],[98,61,332,59,"interpolate"],[98,72,332,70],[98,73,332,71],[99,12,333,8,"inputRange"],[99,22,333,18],[99,24,333,20],[99,25,333,21,"drawerWidth"],[99,36,333,32],[99,39,333,36],[99,40,333,37],[99,42,333,39,"drawerWidth"],[99,53,333,50],[99,55,333,53,"drawerWidth"],[99,66,333,64],[99,69,333,68],[99,70,333,69],[99,71,333,70],[100,12,334,8,"outputRange"],[100,23,334,19],[100,25,334,21],[100,26,334,22],[100,27,334,23],[100,29,334,25],[100,30,334,26],[100,32,334,28],[100,33,334,29],[101,10,335,6],[101,11,335,7],[101,12,335,8],[102,10,336,6,"translationX"],[102,22,336,18],[102,25,336,21,"Animated"],[102,46,336,29],[102,47,336,30,"add"],[102,50,336,33],[102,51,337,8,"dragX"],[102,56,337,13],[102,58,338,8,"dragOffsetFromOnStartPosition"],[102,87,339,6],[102,88,339,25],[102,89,339,26],[102,90,339,27],[103,8,340,4],[104,8,342,4,"_this"],[104,13,342,4],[104,14,342,9,"openValue"],[104,23,342,18],[104,26,342,21,"Animated"],[104,47,342,29],[104,48,342,30,"add"],[104,51,342,33],[104,52,342,34,"translationX"],[104,64,342,46],[104,66,342,48,"drawerTranslation"],[104,83,342,65],[104,84,342,66],[104,85,342,67,"interpolate"],[104,96,342,78],[104,97,342,79],[105,10,343,6,"inputRange"],[105,20,343,16],[105,22,343,18],[105,23,343,19],[105,24,343,20],[105,26,343,22,"drawerWidth"],[105,37,343,33],[105,38,343,35],[106,10,344,6,"outputRange"],[106,21,344,17],[106,23,344,19],[106,24,344,20],[106,25,344,21],[106,27,344,23],[106,28,344,24],[106,29,344,25],[107,10,345,6,"extrapolate"],[107,21,345,17],[107,23,345,19],[108,8,346,4],[108,9,346,5],[108,10,346,6],[109,8,348,4],[109,12,348,10,"gestureOptions"],[109,26,354,5],[109,29,354,8],[110,10,355,6,"useNativeDriver"],[110,25,355,21],[110,27,355,23,"props"],[110,32,355,28],[110,33,355,29,"useNativeAnimations"],[111,8,356,4],[111,9,356,5],[112,8,358,4],[112,12,358,8,"_this"],[112,17,358,8],[112,18,358,13,"props"],[112,23,358,18],[112,24,358,19,"onDrawerSlide"],[112,37,358,32],[112,39,358,34],[113,10,359,6,"gestureOptions"],[113,24,359,20],[113,25,359,21,"listener"],[113,33,359,29],[113,36,359,32],[113,46,359,33,"ev"],[113,48,359,35],[113,50,359,40],[114,12,360,8],[114,16,360,14,"translationX"],[114,28,360,26],[114,31,360,29,"Math"],[114,35,360,33],[114,36,360,34,"floor"],[114,41,360,39],[114,42,360,40,"Math"],[114,46,360,44],[114,47,360,45,"abs"],[114,50,360,48],[114,51,360,49,"ev"],[114,53,360,51],[114,54,360,52,"nativeEvent"],[114,65,360,63],[114,66,360,64,"translationX"],[114,78,360,76],[114,79,360,77],[114,80,360,78],[115,12,361,8],[115,16,361,14,"position"],[115,24,361,22],[115,27,361,25,"translationX"],[115,39,361,37],[115,42,361,40,"_this"],[115,47,361,40],[115,48,361,45,"state"],[115,53,361,50],[115,54,361,51,"containerWidth"],[115,68,361,65],[116,12,363,8,"_this"],[116,17,363,8],[116,18,363,13,"props"],[116,23,363,18],[116,24,363,19,"onDrawerSlide"],[116,37,363,32],[116,49,363,8,"_this"],[116,54,363,8],[116,55,363,13,"props"],[116,60,363,18],[116,61,363,19,"onDrawerSlide"],[116,74,363,32],[116,75,363,35,"position"],[116,83,363,43],[116,84,363,44],[117,10,364,6],[117,11,364,7],[118,8,365,4],[119,8,367,4,"_this"],[119,13,367,4],[119,14,367,9,"onGestureEvent"],[119,28,367,23],[119,31,367,26,"Animated"],[119,52,367,34],[119,53,367,35,"event"],[119,58,367,40],[119,59,368,6],[119,60,368,7],[120,10,368,9,"nativeEvent"],[120,21,368,20],[120,23,368,22],[121,12,368,24,"translationX"],[121,24,368,36],[121,26,368,38,"dragXValue"],[121,36,368,48],[122,12,368,50,"x"],[122,13,368,51],[122,15,368,53,"touchXValue"],[123,10,368,65],[124,8,368,67],[124,9,368,68],[124,10,368,69],[124,12,369,6,"gestureOptions"],[124,26,370,4],[124,27,370,5],[125,6,371,2],[125,7,371,3],[126,6,371,3,"_this"],[126,11,371,3],[126,12,373,10,"handleContainerLayout"],[126,33,373,31],[126,36,373,34],[126,46,373,34,"_ref"],[126,50,373,34],[126,52,373,74],[127,8,373,74],[127,12,373,37,"nativeEvent"],[127,23,373,48],[127,26,373,48,"_ref"],[127,30,373,48],[127,31,373,37,"nativeEvent"],[127,42,373,48],[128,8,374,4,"_this"],[128,13,374,4],[128,14,374,9,"setState"],[128,22,374,17],[128,23,374,18],[129,10,374,20,"containerWidth"],[129,24,374,34],[129,26,374,36,"nativeEvent"],[129,37,374,47],[129,38,374,48,"layout"],[129,44,374,54],[129,45,374,55,"width"],[130,8,374,61],[130,9,374,62],[130,10,374,63],[131,6,375,2],[131,7,375,3],[132,6,375,3,"_this"],[132,11,375,3],[132,12,377,10,"emitStateChanged"],[132,28,377,26],[132,31,377,29],[132,41,378,4,"newState"],[132,49,378,25],[132,51,379,4,"drawerWillShow"],[132,65,379,27],[132,67,380,7],[133,8,381,4,"_this"],[133,13,381,4],[133,14,381,9,"props"],[133,19,381,14],[133,20,381,15,"onDrawerStateChanged"],[133,40,381,35],[133,52,381,4,"_this"],[133,57,381,4],[133,58,381,9,"props"],[133,63,381,14],[133,64,381,15,"onDrawerStateChanged"],[133,84,381,35],[133,85,381,38,"newState"],[133,93,381,46],[133,95,381,48,"drawerWillShow"],[133,109,381,62],[133,110,381,63],[134,6,382,2],[134,7,382,3],[135,6,382,3,"_this"],[135,11,382,3],[135,12,384,10,"openingHandlerStateChange"],[135,37,384,35],[135,40,384,38],[135,50,384,38,"_ref2"],[135,55,384,38],[135,57,386,64],[136,8,386,64],[136,12,385,4,"nativeEvent"],[136,23,385,15],[136,26,385,15,"_ref2"],[136,31,385,15],[136,32,385,4,"nativeEvent"],[136,43,385,15],[137,8,387,4],[137,12,387,8,"nativeEvent"],[137,23,387,19],[137,24,387,20,"oldState"],[137,32,387,28],[137,37,387,33,"State"],[137,68,387,33],[137,69,387,33,"State"],[137,86,387,38],[137,87,387,39,"ACTIVE"],[137,93,387,45],[137,95,387,47],[138,10,388,6,"_this"],[138,15,388,6],[138,16,388,11,"handleRelease"],[138,29,388,24],[138,30,388,25],[139,12,388,27,"nativeEvent"],[139,23,388,38],[139,25,388,27,"nativeEvent"],[140,10,388,39],[140,11,388,40],[140,12,388,41],[141,8,389,4],[141,9,389,5],[141,15,389,11],[141,19,389,15,"nativeEvent"],[141,30,389,26],[141,31,389,27,"state"],[141,36,389,32],[141,41,389,37,"State"],[141,72,389,37],[141,73,389,37,"State"],[141,90,389,42],[141,91,389,43,"ACTIVE"],[141,97,389,49],[141,99,389,51],[142,10,390,6,"_this"],[142,15,390,6],[142,16,390,11,"emitStateChanged"],[142,32,390,27],[142,33,390,28,"DRAGGING"],[142,41,390,36],[142,43,390,38],[142,48,390,43],[142,49,390,44],[143,10,391,6,"_this"],[143,15,391,6],[143,16,391,11,"setState"],[143,24,391,19],[143,25,391,20],[144,12,391,22,"drawerState"],[144,23,391,33],[144,25,391,35,"DRAGGING"],[145,10,391,44],[145,11,391,45],[145,12,391,46],[146,10,392,6],[146,14,392,10,"_this"],[146,19,392,10],[146,20,392,15,"props"],[146,25,392,20],[146,26,392,21,"keyboardDismissMode"],[146,45,392,40],[146,50,392,45],[146,59,392,54],[146,61,392,56],[147,12,393,8,"Keyboard"],[147,33,393,16],[147,34,393,17,"dismiss"],[147,41,393,24],[147,42,393,25],[147,43,393,26],[148,10,394,6],[149,10,395,6],[149,14,395,10,"_this"],[149,19,395,10],[149,20,395,15,"props"],[149,25,395,20],[149,26,395,21,"hideStatusBar"],[149,39,395,34],[149,41,395,36],[150,12,396,8,"StatusBar"],[150,34,396,17],[150,35,396,18,"setHidden"],[150,44,396,27],[150,45,396,28],[150,49,396,32],[150,51,396,34,"_this"],[150,56,396,34],[150,57,396,39,"props"],[150,62,396,44],[150,63,396,45,"statusBarAnimation"],[150,81,396,63],[150,85,396,67],[150,92,396,74],[150,93,396,75],[151,10,397,6],[152,8,398,4],[153,6,399,2],[153,7,399,3],[154,6,399,3,"_this"],[154,11,399,3],[154,12,401,10,"onTapHandlerStateChange"],[154,35,401,33],[154,38,401,36],[154,48,401,36,"_ref3"],[154,53,401,36],[154,55,403,64],[155,8,403,64],[155,12,402,4,"nativeEvent"],[155,23,402,15],[155,26,402,15,"_ref3"],[155,31,402,15],[155,32,402,4,"nativeEvent"],[155,43,402,15],[156,8,404,4],[156,12,405,6,"_this"],[156,17,405,6],[156,18,405,11,"drawerShown"],[156,29,405,22],[156,33,406,6,"nativeEvent"],[156,44,406,17],[156,45,406,18,"oldState"],[156,53,406,26],[156,58,406,31,"State"],[156,89,406,31],[156,90,406,31,"State"],[156,107,406,36],[156,108,406,37,"ACTIVE"],[156,114,406,43],[156,118,407,6,"_this"],[156,123,407,6],[156,124,407,11,"props"],[156,129,407,16],[156,130,407,17,"drawerLockMode"],[156,144,407,31],[156,149,407,36],[156,162,407,49],[156,164,408,6],[157,10,409,6,"_this"],[157,15,409,6],[157,16,409,11,"closeDrawer"],[157,27,409,22],[157,28,409,23],[157,29,409,24],[158,8,410,4],[159,6,411,2],[159,7,411,3],[160,6,411,3,"_this"],[160,11,411,3],[160,12,413,10,"handleRelease"],[160,25,413,23],[160,28,413,26],[160,38,413,26,"_ref4"],[160,43,413,26],[160,45,415,64],[161,8,415,64],[161,12,414,4,"nativeEvent"],[161,23,414,15],[161,26,414,15,"_ref4"],[161,31,414,15],[161,32,414,4,"nativeEvent"],[161,43,414,15],[162,8,416,4],[162,12,416,4,"_this$props"],[162,23,416,4],[162,26,416,56,"_this"],[162,31,416,56],[162,32,416,61,"props"],[162,37,416,66],[163,10,416,12,"drawerWidth"],[163,21,416,23],[163,24,416,23,"_this$props"],[163,35,416,23],[163,36,416,12,"drawerWidth"],[163,47,416,23],[164,10,416,25,"drawerPosition"],[164,24,416,39],[164,27,416,39,"_this$props"],[164,38,416,39],[164,39,416,25,"drawerPosition"],[164,53,416,39],[165,10,416,41,"drawerType"],[165,20,416,51],[165,23,416,51,"_this$props"],[165,34,416,51],[165,35,416,41,"drawerType"],[165,45,416,51],[166,8,417,4],[166,12,417,12,"containerWidth"],[166,26,417,26],[166,29,417,31,"_this"],[166,34,417,31],[166,35,417,36,"state"],[166,40,417,41],[166,41,417,12,"containerWidth"],[166,55,417,26],[167,8,418,4],[167,12,418,24,"dragX"],[167,17,418,29],[167,20,418,56,"nativeEvent"],[167,31,418,67],[167,32,418,10,"translationX"],[167,44,418,22],[168,10,418,31,"velocityX"],[168,19,418,40],[168,22,418,56,"nativeEvent"],[168,33,418,67],[168,34,418,31,"velocityX"],[168,43,418,40],[169,10,418,45,"touchX"],[169,16,418,51],[169,19,418,56,"nativeEvent"],[169,30,418,67],[169,31,418,42,"x"],[169,32,418,43],[170,8,420,4],[170,12,420,8,"drawerPosition"],[170,26,420,22],[170,31,420,27],[170,37,420,33],[170,39,420,35],[171,10,421,6],[172,10,422,6],[173,10,423,6,"dragX"],[173,15,423,11],[173,18,423,14],[173,19,423,15,"dragX"],[173,24,423,20],[174,10,424,6,"touchX"],[174,16,424,12],[174,19,424,15,"containerWidth"],[174,33,424,29],[174,36,424,32,"touchX"],[174,42,424,38],[175,10,425,6,"velocityX"],[175,19,425,15],[175,22,425,18],[175,23,425,19,"velocityX"],[175,32,425,28],[176,8,426,4],[177,8,428,4],[177,12,428,10,"gestureStartX"],[177,25,428,23],[177,28,428,26,"touchX"],[177,34,428,32],[177,37,428,35,"dragX"],[177,42,428,40],[178,8,429,4],[178,12,429,8,"dragOffsetBasedOnStart"],[178,34,429,30],[178,37,429,33],[178,38,429,34],[179,8,431,4],[179,12,431,8,"drawerType"],[179,22,431,18],[179,27,431,23],[179,34,431,30],[179,36,431,32],[180,10,432,6,"dragOffsetBasedOnStart"],[180,32,432,28],[180,35,433,8,"gestureStartX"],[180,48,433,21],[180,51,433,24,"drawerWidth"],[180,62,433,36],[180,65,433,39,"gestureStartX"],[180,78,433,52],[180,81,433,55,"drawerWidth"],[180,92,433,67],[180,95,433,70],[180,96,433,71],[181,8,434,4],[182,8,436,4],[182,12,436,10,"startOffsetX"],[182,24,436,22],[182,27,437,6,"dragX"],[182,32,437,11],[182,35,437,14,"dragOffsetBasedOnStart"],[182,57,437,36],[182,61,437,40,"_this"],[182,66,437,40],[182,67,437,45,"drawerShown"],[182,78,437,56],[182,81,437,59,"drawerWidth"],[182,92,437,70],[182,95,437,74],[182,96,437,75],[182,97,437,76],[183,8,438,4],[183,12,438,10,"projOffsetX"],[183,23,438,21],[183,26,438,24,"startOffsetX"],[183,38,438,36],[183,41,438,39,"DRAG_TOSS"],[183,50,438,48],[183,53,438,51,"velocityX"],[183,62,438,60],[184,8,440,4],[184,12,440,10,"shouldOpen"],[184,22,440,20],[184,25,440,23,"projOffsetX"],[184,36,440,34],[184,39,440,37,"drawerWidth"],[184,50,440,48],[184,53,440,52],[184,54,440,53],[185,8,442,4],[185,12,442,8,"shouldOpen"],[185,22,442,18],[185,24,442,20],[186,10,443,6,"_this"],[186,15,443,6],[186,16,443,11,"animateDrawer"],[186,29,443,24],[186,30,443,25,"startOffsetX"],[186,42,443,37],[186,44,443,39,"drawerWidth"],[186,55,443,50],[186,57,443,53,"velocityX"],[186,66,443,62],[186,67,443,63],[187,8,444,4],[187,9,444,5],[187,15,444,11],[188,10,445,6,"_this"],[188,15,445,6],[188,16,445,11,"animateDrawer"],[188,29,445,24],[188,30,445,25,"startOffsetX"],[188,42,445,37],[188,44,445,39],[188,45,445,40],[188,47,445,42,"velocityX"],[188,56,445,51],[188,57,445,52],[189,8,446,4],[190,6,447,2],[190,7,447,3],[191,6,447,3,"_this"],[191,11,447,3],[191,12,449,10,"updateShowing"],[191,25,449,23],[191,28,449,26],[191,38,449,27,"showing"],[191,45,449,43],[191,47,449,48],[192,8,449,48],[192,12,449,48,"_this$accessibilityIs"],[192,33,449,48],[192,35,449,48,"_this$pointerEventsVi"],[192,56,449,48],[192,58,449,48,"_this$panGestureHandl"],[192,79,449,48],[193,8,450,4,"_this"],[193,13,450,4],[193,14,450,9,"drawerShown"],[193,25,450,20],[193,28,450,23,"showing"],[193,35,450,30],[194,8,451,4],[194,9,451,4,"_this$accessibilityIs"],[194,30,451,4],[194,33,451,4,"_this"],[194,38,451,4],[194,39,451,9,"accessibilityIsModalView"],[194,63,451,33],[194,64,451,34,"current"],[194,71,451,41],[194,84,451,4,"_this$accessibilityIs"],[194,105,451,4],[194,106,451,43,"setNativeProps"],[194,120,451,57],[194,121,451,58],[195,10,452,6,"accessibilityViewIsModal"],[195,34,452,30],[195,36,452,32,"showing"],[196,8,453,4],[196,9,453,5],[196,10,453,6],[197,8,454,4],[197,9,454,4,"_this$pointerEventsVi"],[197,30,454,4],[197,33,454,4,"_this"],[197,38,454,4],[197,39,454,9,"pointerEventsView"],[197,56,454,26],[197,57,454,27,"current"],[197,64,454,34],[197,77,454,4,"_this$pointerEventsVi"],[197,98,454,4],[197,99,454,36,"setNativeProps"],[197,113,454,50],[197,114,454,51],[198,10,455,6,"pointerEvents"],[198,23,455,19],[198,25,455,21,"showing"],[198,32,455,28],[198,35,455,31],[198,41,455,37],[198,44,455,40],[199,8,456,4],[199,9,456,5],[199,10,456,6],[200,8,457,4],[200,12,457,4,"_this$props2"],[200,24,457,4],[200,27,457,60,"_this"],[200,32,457,60],[200,33,457,65,"props"],[200,38,457,70],[201,10,457,12,"drawerPosition"],[201,24,457,26],[201,27,457,26,"_this$props2"],[201,39,457,26],[201,40,457,12,"drawerPosition"],[201,54,457,26],[202,10,457,28,"minSwipeDistance"],[202,26,457,44],[202,29,457,44,"_this$props2"],[202,41,457,44],[202,42,457,28,"minSwipeDistance"],[202,58,457,44],[203,10,457,46,"edgeWidth"],[203,19,457,55],[203,22,457,55,"_this$props2"],[203,34,457,55],[203,35,457,46,"edgeWidth"],[203,44,457,55],[204,8,458,4],[204,12,458,10,"fromLeft"],[204,20,458,18],[204,23,458,21,"drawerPosition"],[204,37,458,35],[204,42,458,40],[204,48,458,46],[205,8,459,4],[206,8,460,4],[207,8,461,4],[208,8,462,4],[208,12,462,10,"gestureOrientation"],[208,30,462,28],[208,33,463,6],[208,34,463,7,"fromLeft"],[208,42,463,15],[208,45,463,18],[208,46,463,19],[208,49,463,22],[208,50,463,23],[208,51,463,24],[208,56,463,29,"_this"],[208,61,463,29],[208,62,463,34,"drawerShown"],[208,73,463,45],[208,76,463,48],[208,77,463,49],[208,78,463,50],[208,81,463,53],[208,82,463,54],[208,83,463,55],[209,8,464,4],[210,8,465,4],[211,8,466,4],[212,8,467,4],[212,12,467,10,"hitSlop"],[212,19,467,17],[212,22,467,20,"fromLeft"],[212,30,467,28],[212,33,468,8],[213,10,468,10,"left"],[213,14,468,14],[213,16,468,16],[213,17,468,17],[214,10,468,19,"width"],[214,15,468,24],[214,17,468,26,"showing"],[214,24,468,33],[214,27,468,36,"undefined"],[214,36,468,45],[214,39,468,48,"edgeWidth"],[215,8,468,58],[215,9,468,59],[215,12,469,8],[216,10,469,10,"right"],[216,15,469,15],[216,17,469,17],[216,18,469,18],[217,10,469,20,"width"],[217,15,469,25],[217,17,469,27,"showing"],[217,24,469,34],[217,27,469,37,"undefined"],[217,36,469,46],[217,39,469,49,"edgeWidth"],[218,8,469,59],[218,9,469,60],[219,8,470,4],[220,8,471,4],[220,9,471,4,"_this$panGestureHandl"],[220,30,471,4],[220,33,471,4,"_this"],[220,38,471,4],[220,39,471,9,"panGestureHandler"],[220,56,471,26],[220,57,471,27,"current"],[220,64,471,34],[220,77,471,4,"_this$panGestureHandl"],[220,98,471,4],[220,99,471,36,"setNativeProps"],[220,113,471,50],[220,114,471,51],[221,10,472,6,"hitSlop"],[221,17,472,13],[221,19,472,6,"hitSlop"],[221,26,472,13],[222,10,473,6,"activeOffsetX"],[222,23,473,19],[222,25,473,21,"gestureOrientation"],[222,43,473,39],[222,46,473,42,"minSwipeDistance"],[223,8,474,4],[223,9,474,5],[223,10,474,6],[224,6,475,2],[224,7,475,3],[225,6,475,3,"_this"],[225,11,475,3],[225,12,477,10,"animateDrawer"],[225,25,477,23],[225,28,477,26],[225,38,478,4,"fromValue"],[225,47,478,40],[225,49,479,4,"toValue"],[225,56,479,19],[225,58,480,4,"velocity"],[225,66,480,20],[225,68,481,4,"speed"],[225,73,481,18],[225,75,482,7],[226,8,483,4,"_this"],[226,13,483,4],[226,14,483,9,"state"],[226,19,483,14],[226,20,483,15,"dragX"],[226,25,483,20],[226,26,483,21,"setValue"],[226,34,483,29],[226,35,483,30],[226,36,483,31],[226,37,483,32],[227,8,484,4,"_this"],[227,13,484,4],[227,14,484,9,"state"],[227,19,484,14],[227,20,484,15,"touchX"],[227,26,484,21],[227,27,484,22,"setValue"],[227,35,484,30],[227,36,485,6,"_this"],[227,41,485,6],[227,42,485,11,"props"],[227,47,485,16],[227,48,485,17,"drawerPosition"],[227,62,485,31],[227,67,485,36],[227,73,485,42],[227,76,485,45],[227,77,485,46],[227,80,485,49,"_this"],[227,85,485,49],[227,86,485,54,"state"],[227,91,485,59],[227,92,485,60,"containerWidth"],[227,106,486,4],[227,107,486,5],[228,8,488,4],[228,12,488,8,"fromValue"],[228,21,488,17],[228,25,488,21],[228,29,488,25],[228,31,488,27],[229,10,489,6],[229,14,489,10,"nextFramePosition"],[229,31,489,27],[229,34,489,30,"fromValue"],[229,43,489,39],[230,10,490,6],[230,14,490,10,"_this"],[230,19,490,10],[230,20,490,15,"props"],[230,25,490,20],[230,26,490,21,"useNativeAnimations"],[230,45,490,40],[230,47,490,42],[231,12,491,8],[232,12,492,8],[233,12,493,8],[234,12,494,8],[235,12,495,8],[235,16,495,12,"fromValue"],[235,25,495,21],[235,28,495,24,"toValue"],[235,35,495,31],[235,39,495,35,"velocity"],[235,47,495,43],[235,50,495,46],[235,51,495,47],[235,53,495,49],[236,14,496,10,"nextFramePosition"],[236,31,496,27],[236,34,496,30,"Math"],[236,38,496,34],[236,39,496,35,"min"],[236,42,496,38],[236,43,496,39,"fromValue"],[236,52,496,48],[236,55,496,51,"velocity"],[236,63,496,59],[236,66,496,62],[236,70,496,66],[236,72,496,68,"toValue"],[236,79,496,75],[236,80,496,76],[237,12,497,8],[237,13,497,9],[237,19,497,15],[237,23,497,19,"fromValue"],[237,32,497,28],[237,35,497,31,"toValue"],[237,42,497,38],[237,46,497,42,"velocity"],[237,54,497,50],[237,57,497,53],[237,58,497,54],[237,60,497,56],[238,14,498,10,"nextFramePosition"],[238,31,498,27],[238,34,498,30,"Math"],[238,38,498,34],[238,39,498,35,"max"],[238,42,498,38],[238,43,498,39,"fromValue"],[238,52,498,48],[238,55,498,51,"velocity"],[238,63,498,59],[238,66,498,62],[238,70,498,66],[238,72,498,68,"toValue"],[238,79,498,75],[238,80,498,76],[239,12,499,8],[240,10,500,6],[241,10,501,6,"_this"],[241,15,501,6],[241,16,501,11,"state"],[241,21,501,16],[241,22,501,17,"drawerTranslation"],[241,39,501,34],[241,40,501,35,"setValue"],[241,48,501,43],[241,49,501,44,"nextFramePosition"],[241,66,501,61],[241,67,501,62],[242,8,502,4],[243,8,504,4],[243,12,504,10,"willShow"],[243,20,504,18],[243,23,504,21,"toValue"],[243,30,504,28],[243,35,504,33],[243,36,504,34],[244,8,505,4,"_this"],[244,13,505,4],[244,14,505,9,"updateShowing"],[244,27,505,22],[244,28,505,23,"willShow"],[244,36,505,31],[244,37,505,32],[245,8,506,4,"_this"],[245,13,506,4],[245,14,506,9,"emitStateChanged"],[245,30,506,25],[245,31,506,26,"SETTLING"],[245,39,506,34],[245,41,506,36,"willShow"],[245,49,506,44],[245,50,506,45],[246,8,507,4,"_this"],[246,13,507,4],[246,14,507,9,"setState"],[246,22,507,17],[246,23,507,18],[247,10,507,20,"drawerState"],[247,21,507,31],[247,23,507,33,"SETTLING"],[248,8,507,42],[248,9,507,43],[248,10,507,44],[249,8,508,4],[249,12,508,8,"_this"],[249,17,508,8],[249,18,508,13,"props"],[249,23,508,18],[249,24,508,19,"hideStatusBar"],[249,37,508,32],[249,39,508,34],[250,10,509,6,"StatusBar"],[250,32,509,15],[250,33,509,16,"setHidden"],[250,42,509,25],[250,43,509,26,"willShow"],[250,51,509,34],[250,53,509,36,"_this"],[250,58,509,36],[250,59,509,41,"props"],[250,64,509,46],[250,65,509,47,"statusBarAnimation"],[250,83,509,65],[250,87,509,69],[250,94,509,76],[250,95,509,77],[251,8,510,4],[252,8,511,4,"Animated"],[252,29,511,12],[252,30,511,13,"spring"],[252,36,511,19],[252,37,511,20,"_this"],[252,42,511,20],[252,43,511,25,"state"],[252,48,511,30],[252,49,511,31,"drawerTranslation"],[252,66,511,48],[252,68,511,50],[253,10,512,6,"velocity"],[253,18,512,14],[253,20,512,6,"velocity"],[253,28,512,14],[254,10,513,6,"bounciness"],[254,20,513,16],[254,22,513,18],[254,23,513,19],[255,10,514,6,"toValue"],[255,17,514,13],[255,19,514,6,"toValue"],[255,26,514,13],[256,10,515,6,"useNativeDriver"],[256,25,515,21],[256,27,515,23,"_this"],[256,32,515,23],[256,33,515,28,"props"],[256,38,515,33],[256,39,515,34,"useNativeAnimations"],[256,58,515,54],[257,10,516,6,"speed"],[257,15,516,11],[257,17,516,13,"speed"],[257,22,516,18],[257,33,516,13,"speed"],[257,38,516,18],[257,41,516,22,"undefined"],[258,8,517,4],[258,9,517,5],[258,10,517,6],[258,11,517,7,"start"],[258,16,517,12],[258,17,517,13],[258,27,517,13,"_ref5"],[258,32,517,13],[258,34,517,31],[259,10,517,31],[259,14,517,16,"finished"],[259,22,517,24],[259,25,517,24,"_ref5"],[259,30,517,24],[259,31,517,16,"finished"],[259,39,517,24],[260,10,518,6],[260,14,518,10,"finished"],[260,22,518,18],[260,24,518,20],[261,12,519,8,"_this"],[261,17,519,8],[261,18,519,13,"emitStateChanged"],[261,34,519,29],[261,35,519,30,"IDLE"],[261,39,519,34],[261,41,519,36,"willShow"],[261,49,519,44],[261,50,519,45],[262,12,520,8,"_this"],[262,17,520,8],[262,18,520,13,"setState"],[262,26,520,21],[262,27,520,22],[263,14,520,24,"drawerOpened"],[263,26,520,36],[263,28,520,38,"willShow"],[264,12,520,47],[264,13,520,48],[264,14,520,49],[265,12,521,8],[265,16,521,12,"_this"],[265,21,521,12],[265,22,521,17,"state"],[265,27,521,22],[265,28,521,23,"drawerState"],[265,39,521,34],[265,44,521,39,"DRAGGING"],[265,52,521,47],[265,54,521,49],[266,14,522,10],[267,14,523,10],[268,14,524,10,"_this"],[268,19,524,10],[268,20,524,15,"setState"],[268,28,524,23],[268,29,524,24],[269,16,524,26,"drawerState"],[269,27,524,37],[269,29,524,39,"IDLE"],[270,14,524,44],[270,15,524,45],[270,16,524,46],[271,12,525,8],[272,12,526,8],[272,16,526,12,"willShow"],[272,24,526,20],[272,26,526,22],[273,14,527,10,"_this"],[273,19,527,10],[273,20,527,15,"props"],[273,25,527,20],[273,26,527,21,"onDrawerOpen"],[273,38,527,33],[273,50,527,10,"_this"],[273,55,527,10],[273,56,527,15,"props"],[273,61,527,20],[273,62,527,21,"onDrawerOpen"],[273,74,527,33],[273,75,527,36],[273,76,527,37],[274,12,528,8],[274,13,528,9],[274,19,528,15],[275,14,529,10,"_this"],[275,19,529,10],[275,20,529,15,"props"],[275,25,529,20],[275,26,529,21,"onDrawerClose"],[275,39,529,34],[275,51,529,10,"_this"],[275,56,529,10],[275,57,529,15,"props"],[275,62,529,20],[275,63,529,21,"onDrawerClose"],[275,76,529,34],[275,77,529,37],[275,78,529,38],[276,12,530,8],[277,10,531,6],[278,8,532,4],[278,9,532,5],[278,10,532,6],[279,6,533,2],[279,7,533,3],[280,6,533,3,"_this"],[280,11,533,3],[280,12,535,2,"openDrawer"],[280,22,535,12],[280,25,535,15],[280,37,535,55],[281,8,535,55],[281,12,535,16,"options"],[281,19,535,45],[281,22,535,45,"arguments"],[281,31,535,45],[281,32,535,45,"length"],[281,38,535,45],[281,46,535,45,"arguments"],[281,55,535,45],[281,63,535,45,"undefined"],[281,72,535,45],[281,75,535,45,"arguments"],[281,84,535,45],[281,90,535,48],[281,91,535,49],[281,92,535,50],[282,8,536,4,"_this"],[282,13,536,4],[282,14,536,9,"animateDrawer"],[282,27,536,22],[283,8,537,6],[284,8,538,6,"undefined"],[284,17,538,15],[284,19,539,6,"_this"],[284,24,539,6],[284,25,539,11,"props"],[284,30,539,16],[284,31,539,17,"drawerWidth"],[284,42,539,28],[284,44,540,6,"options"],[284,51,540,13],[284,52,540,14,"velocity"],[284,60,540,22],[284,63,540,25,"options"],[284,70,540,32],[284,71,540,33,"velocity"],[284,79,540,41],[284,82,540,44],[284,83,540,45],[284,85,541,6,"options"],[284,92,541,13],[284,93,541,14,"speed"],[284,98,542,4],[284,99,542,5],[286,8,544,4],[287,8,545,4],[288,8,546,4,"_this"],[288,13,546,4],[288,14,546,9,"forceUpdate"],[288,25,546,20],[288,26,546,21],[288,27,546,22],[289,6,547,2],[289,7,547,3],[290,6,547,3,"_this"],[290,11,547,3],[290,12,549,2,"closeDrawer"],[290,23,549,13],[290,26,549,16],[290,38,549,56],[291,8,549,56],[291,12,549,17,"options"],[291,19,549,46],[291,22,549,46,"arguments"],[291,31,549,46],[291,32,549,46,"length"],[291,38,549,46],[291,46,549,46,"arguments"],[291,55,549,46],[291,63,549,46,"undefined"],[291,72,549,46],[291,75,549,46,"arguments"],[291,84,549,46],[291,90,549,49],[291,91,549,50],[291,92,549,51],[292,8,550,4],[293,8,551,4,"_this"],[293,13,551,4],[293,14,551,9,"animateDrawer"],[293,27,551,22],[293,28,552,6,"undefined"],[293,37,552,15],[293,39,553,6],[293,40,553,7],[293,42,554,6,"options"],[293,49,554,13],[293,50,554,14,"velocity"],[293,58,554,22],[293,61,554,25,"options"],[293,68,554,32],[293,69,554,33,"velocity"],[293,77,554,41],[293,80,554,44],[293,81,554,45],[293,83,555,6,"options"],[293,90,555,13],[293,91,555,14,"speed"],[293,96,556,4],[293,97,556,5],[295,8,558,4],[296,8,559,4],[297,8,560,4,"_this"],[297,13,560,4],[297,14,560,9,"forceUpdate"],[297,25,560,20],[297,26,560,21],[297,27,560,22],[298,6,561,2],[298,7,561,3],[299,6,561,3,"_this"],[299,11,561,3],[299,12,563,10,"renderOverlay"],[299,25,563,23],[299,28,563,26],[299,40,563,32],[300,8,564,4],[301,8,565,4],[301,12,565,4,"invariant"],[301,30,565,13],[301,32,565,14,"_this"],[301,37,565,14],[301,38,565,19,"openValue"],[301,47,565,28],[301,49,565,30],[301,64,565,45],[301,65,565,46],[302,8,566,4],[302,12,566,8,"overlayOpacity"],[302,26,566,22],[303,8,568,4],[303,12,568,8,"_this"],[303,17,568,8],[303,18,568,13,"state"],[303,23,568,18],[303,24,568,19,"drawerState"],[303,35,568,30],[303,40,568,35,"IDLE"],[303,44,568,39],[303,46,568,41],[304,10,569,6,"overlayOpacity"],[304,24,569,20],[304,27,569,23,"_this"],[304,32,569,23],[304,33,569,28,"openValue"],[304,42,569,37],[305,8,570,4],[305,9,570,5],[305,15,570,11],[306,10,571,6,"overlayOpacity"],[306,24,571,20],[306,27,571,23,"_this"],[306,32,571,23],[306,33,571,28,"state"],[306,38,571,33],[306,39,571,34,"drawerOpened"],[306,51,571,46],[306,54,571,49],[306,55,571,50],[306,58,571,53],[306,59,571,54],[307,8,572,4],[308,8,574,4],[308,12,574,10,"dynamicOverlayStyles"],[308,32,574,30],[308,35,574,33],[309,10,575,6,"opacity"],[309,17,575,13],[309,19,575,15,"overlayOpacity"],[309,33,575,29],[310,10,576,6,"backgroundColor"],[310,25,576,21],[310,27,576,23,"_this"],[310,32,576,23],[310,33,576,28,"props"],[310,38,576,33],[310,39,576,34,"overlayColor"],[311,8,577,4],[311,9,577,5],[312,8,579,4],[312,28,580,6],[312,32,580,6,"_jsxRuntime"],[312,43,580,6],[312,44,580,6,"jsx"],[312,47,580,6],[312,49,580,7,"_$$_REQUIRE"],[312,60,580,7],[312,61,580,7,"_dependencyMap"],[312,75,580,7],[312,114,580,7,"TapGestureHandler"],[312,131,580,24],[313,10,580,25,"onHandlerStateChange"],[313,30,580,45],[313,32,580,47,"_this"],[313,37,580,47],[313,38,580,52,"onTapHandlerStateChange"],[313,61,580,76],[314,10,580,76,"children"],[314,18,580,76],[314,33,581,8],[314,37,581,8,"_jsxRuntime"],[314,48,581,8],[314,49,581,8,"jsx"],[314,52,581,8],[314,54,581,9,"_reactNative"],[314,66,581,9],[314,67,581,9,"Animated"],[314,75,581,17],[314,76,581,18,"View"],[314,80,581,22],[315,12,582,10,"pointerEvents"],[315,25,582,23],[315,27,582,25,"_this"],[315,32,582,25],[315,33,582,30,"drawerShown"],[315,44,582,41],[315,47,582,44],[315,53,582,50],[315,56,582,53],[315,62,582,60],[316,12,583,10,"ref"],[316,15,583,13],[316,17,583,15,"_this"],[316,22,583,15],[316,23,583,20,"pointerEventsView"],[316,40,583,38],[317,12,584,10,"style"],[317,17,584,15],[317,19,584,17],[317,20,584,18,"styles"],[317,26,584,24],[317,27,584,25,"overlay"],[317,34,584,32],[317,36,584,34,"dynamicOverlayStyles"],[317,56,584,54],[318,10,584,56],[318,11,585,9],[319,8,585,10],[319,9,586,25],[319,10,586,26],[320,6,588,2],[320,7,588,3],[321,6,588,3,"_this"],[321,11,588,3],[321,12,590,10,"renderDrawer"],[321,24,590,22],[321,27,590,25],[321,39,590,31],[322,8,591,4],[322,12,591,4,"_this$props3"],[322,24,591,4],[322,27,598,8,"_this"],[322,32,598,8],[322,33,598,13,"props"],[322,38,598,18],[323,10,592,6,"drawerBackgroundColor"],[323,31,592,27],[323,34,592,27,"_this$props3"],[323,46,592,27],[323,47,592,6,"drawerBackgroundColor"],[323,68,592,27],[324,10,593,6,"drawerWidth"],[324,21,593,17],[324,24,593,17,"_this$props3"],[324,36,593,17],[324,37,593,6,"drawerWidth"],[324,48,593,17],[325,10,594,6,"drawerPosition"],[325,24,594,20],[325,27,594,20,"_this$props3"],[325,39,594,20],[325,40,594,6,"drawerPosition"],[325,54,594,20],[326,10,595,6,"drawerType"],[326,20,595,16],[326,23,595,16,"_this$props3"],[326,35,595,16],[326,36,595,6,"drawerType"],[326,46,595,16],[327,10,596,6,"drawerContainerStyle"],[327,30,596,26],[327,33,596,26,"_this$props3"],[327,45,596,26],[327,46,596,6,"drawerContainerStyle"],[327,66,596,26],[328,10,597,6,"contentContainerStyle"],[328,31,597,27],[328,34,597,27,"_this$props3"],[328,46,597,27],[328,47,597,6,"contentContainerStyle"],[328,68,597,27],[329,8,600,4],[329,12,600,10,"fromLeft"],[329,20,600,18],[329,23,600,21,"drawerPosition"],[329,37,600,35],[329,42,600,40],[329,48,600,46],[330,8,601,4],[330,12,601,10,"drawerSlide"],[330,23,601,21],[330,26,601,24,"drawerType"],[330,36,601,34],[330,41,601,39],[330,47,601,45],[331,8,602,4],[331,12,602,10,"containerSlide"],[331,26,602,24],[331,29,602,27,"drawerType"],[331,39,602,37],[331,44,602,42],[331,51,602,49],[333,8,604,4],[334,8,605,4],[335,8,606,4],[336,8,607,4],[337,8,608,4],[337,12,608,10,"reverseContentDirection"],[337,35,608,33],[337,38,608,36,"I18nManager"],[337,62,608,47],[337,63,608,48,"isRTL"],[337,68,608,53],[337,71,608,56,"fromLeft"],[337,79,608,64],[337,82,608,67],[337,83,608,68,"fromLeft"],[337,91,608,76],[338,8,610,4],[338,12,610,10,"dynamicDrawerStyles"],[338,31,610,29],[338,34,610,32],[339,10,611,6,"backgroundColor"],[339,25,611,21],[339,27,611,23,"drawerBackgroundColor"],[339,48,611,44],[340,10,612,6,"width"],[340,15,612,11],[340,17,612,13,"drawerWidth"],[341,8,613,4],[341,9,613,5],[342,8,614,4],[342,12,614,10,"openValue"],[342,21,614,19],[342,24,614,22,"_this"],[342,29,614,22],[342,30,614,27,"openValue"],[342,39,614,36],[343,8,615,4],[343,12,615,4,"invariant"],[343,30,615,13],[343,32,615,14,"openValue"],[343,41,615,23],[343,43,615,25],[343,58,615,40],[343,59,615,41],[344,8,617,4],[344,12,617,8,"containerStyles"],[344,27,617,23],[345,8,618,4],[345,12,618,8,"containerSlide"],[345,26,618,22],[345,28,618,24],[346,10,619,6],[346,14,619,12,"containerTranslateX"],[346,33,619,31],[346,36,619,34,"openValue"],[346,45,619,43],[346,46,619,44,"interpolate"],[346,57,619,55],[346,58,619,56],[347,12,620,8,"inputRange"],[347,22,620,18],[347,24,620,20],[347,25,620,21],[347,26,620,22],[347,28,620,24],[347,29,620,25],[347,30,620,26],[348,12,621,8,"outputRange"],[348,23,621,19],[348,25,621,21,"fromLeft"],[348,33,621,29],[348,36,621,32],[348,37,621,33],[348,38,621,34],[348,40,621,36,"drawerWidth"],[348,51,621,47],[348,52,621,49],[348,55,621,52],[348,56,621,53],[348,57,621,54],[348,59,621,56],[348,60,621,57,"drawerWidth"],[348,71,621,69],[348,72,621,70],[349,12,622,8,"extrapolate"],[349,23,622,19],[349,25,622,21],[350,10,623,6],[350,11,623,7],[350,12,623,8],[351,10,624,6,"containerStyles"],[351,25,624,21],[351,28,624,24],[352,12,625,8,"transform"],[352,21,625,17],[352,23,625,19],[352,24,625,20],[353,14,625,22,"translateX"],[353,24,625,32],[353,26,625,34,"containerTranslateX"],[354,12,625,54],[354,13,625,55],[355,10,626,6],[355,11,626,7],[356,8,627,4],[357,8,629,4],[357,12,629,8,"drawerTranslateX"],[357,28,629,56],[357,31,629,59],[357,32,629,60],[358,8,630,4],[358,12,630,8,"drawerSlide"],[358,23,630,19],[358,25,630,21],[359,10,631,6],[359,14,631,12,"closedDrawerOffset"],[359,32,631,30],[359,35,631,33,"fromLeft"],[359,43,631,41],[359,46,631,44],[359,47,631,45,"drawerWidth"],[359,58,631,57],[359,61,631,60,"drawerWidth"],[359,72,631,72],[360,10,632,6],[360,14,632,10,"_this"],[360,19,632,10],[360,20,632,15,"state"],[360,25,632,20],[360,26,632,21,"drawerState"],[360,37,632,32],[360,42,632,37,"IDLE"],[360,46,632,41],[360,48,632,43],[361,12,633,8,"drawerTranslateX"],[361,28,633,24],[361,31,633,27,"openValue"],[361,40,633,36],[361,41,633,37,"interpolate"],[361,52,633,48],[361,53,633,49],[362,14,634,10,"inputRange"],[362,24,634,20],[362,26,634,22],[362,27,634,23],[362,28,634,24],[362,30,634,26],[362,31,634,27],[362,32,634,28],[363,14,635,10,"outputRange"],[363,25,635,21],[363,27,635,23],[363,28,635,24,"closedDrawerOffset"],[363,46,635,42],[363,48,635,44],[363,49,635,45],[363,50,635,46],[364,14,636,10,"extrapolate"],[364,25,636,21],[364,27,636,23],[365,12,637,8],[365,13,637,9],[365,14,637,10],[366,10,638,6],[366,11,638,7],[366,17,638,13],[367,12,639,8,"drawerTranslateX"],[367,28,639,24],[367,31,639,27,"_this"],[367,36,639,27],[367,37,639,32,"state"],[367,42,639,37],[367,43,639,38,"drawerOpened"],[367,55,639,50],[367,58,639,53],[367,59,639,54],[367,62,639,57,"closedDrawerOffset"],[367,80,639,75],[368,10,640,6],[369,8,641,4],[370,8,642,4],[370,12,642,10,"drawerStyles"],[370,24,645,5],[370,27,645,8],[371,10,646,6,"transform"],[371,19,646,15],[371,21,646,17],[371,22,646,18],[372,12,646,20,"translateX"],[372,22,646,30],[372,24,646,32,"drawerTranslateX"],[373,10,646,49],[373,11,646,50],[373,12,646,51],[374,10,647,6,"flexDirection"],[374,23,647,19],[374,25,647,21,"reverseContentDirection"],[374,48,647,44],[374,51,647,47],[374,64,647,60],[374,67,647,63],[375,8,648,4],[375,9,648,5],[376,8,650,4],[376,28,651,6],[376,32,651,6,"_jsxRuntime"],[376,43,651,6],[376,44,651,6,"jsxs"],[376,48,651,6],[376,50,651,7,"_reactNative"],[376,62,651,7],[376,63,651,7,"Animated"],[376,71,651,15],[376,72,651,16,"View"],[376,76,651,20],[377,10,651,21,"style"],[377,15,651,26],[377,17,651,28,"styles"],[377,23,651,34],[377,24,651,35,"main"],[377,28,651,40],[378,10,651,41,"onLayout"],[378,18,651,49],[378,20,651,51,"_this"],[378,25,651,51],[378,26,651,56,"handleContainerLayout"],[378,47,651,78],[379,10,651,78,"children"],[379,18,651,78],[379,34,652,8],[379,38,652,8,"_jsxRuntime"],[379,49,652,8],[379,50,652,8,"jsxs"],[379,54,652,8],[379,56,652,9,"_reactNative"],[379,68,652,9],[379,69,652,9,"Animated"],[379,77,652,17],[379,78,652,18,"View"],[379,82,652,22],[380,12,653,10,"style"],[380,17,653,15],[380,19,653,17],[380,20,654,12,"drawerType"],[380,30,654,22],[380,35,654,27],[380,42,654,34],[380,45,655,16,"styles"],[380,51,655,22],[380,52,655,23,"containerOnBack"],[380,67,655,38],[380,70,656,16,"styles"],[380,76,656,22],[380,77,656,23,"containerInFront"],[380,93,656,39],[380,95,657,12,"containerStyles"],[380,110,657,27],[380,112,658,12,"contentContainerStyle"],[380,133,658,33],[380,134,659,12],[381,12,660,10,"importantForAccessibility"],[381,37,660,35],[381,39,661,12,"_this"],[381,44,661,12],[381,45,661,17,"drawerShown"],[381,56,661,28],[381,59,661,31],[381,80,661,52],[381,83,661,55],[381,88,662,11],[382,12,662,11,"children"],[382,20,662,11],[382,23,663,11],[382,30,663,18,"_this"],[382,35,663,18],[382,36,663,23,"props"],[382,41,663,28],[382,42,663,29,"children"],[382,50,663,37],[382,55,663,42],[382,65,663,52],[382,68,664,14,"_this"],[382,73,664,14],[382,74,664,19,"props"],[382,79,664,24],[382,80,664,25,"children"],[382,88,664,33],[382,89,664,34,"_this"],[382,94,664,34],[382,95,664,39,"openValue"],[382,104,664,48],[382,105,664,49],[382,108,665,14,"_this"],[382,113,665,14],[382,114,665,19,"props"],[382,119,665,24],[382,120,665,25,"children"],[382,128,665,33],[382,130,666,11,"_this"],[382,135,666,11],[382,136,666,16,"renderOverlay"],[382,149,666,29],[382,150,666,30],[382,151,666,31],[383,10,666,31],[383,11,667,23],[383,12,667,24],[383,27,668,8],[383,31,668,8,"_jsxRuntime"],[383,42,668,8],[383,43,668,8,"jsx"],[383,46,668,8],[383,48,668,9,"_reactNative"],[383,60,668,9],[383,61,668,9,"Animated"],[383,69,668,17],[383,70,668,18,"View"],[383,74,668,22],[384,12,669,10,"pointerEvents"],[384,25,669,23],[384,27,669,24],[384,37,669,34],[385,12,670,10,"ref"],[385,15,670,13],[385,17,670,15,"_this"],[385,22,670,15],[385,23,670,20,"accessibilityIsModalView"],[385,47,670,45],[386,12,671,10,"accessibilityViewIsModal"],[386,36,671,34],[386,38,671,36,"_this"],[386,43,671,36],[386,44,671,41,"drawerShown"],[386,55,671,53],[387,12,672,10,"style"],[387,17,672,15],[387,19,672,17],[387,20,672,18,"styles"],[387,26,672,24],[387,27,672,25,"drawerContainer"],[387,42,672,40],[387,44,672,42,"drawerStyles"],[387,56,672,54],[387,58,672,56,"drawerContainerStyle"],[387,78,672,76],[387,79,672,78],[388,12,672,78,"children"],[388,20,672,78],[388,35,673,10],[388,39,673,10,"_jsxRuntime"],[388,50,673,10],[388,51,673,10,"jsx"],[388,54,673,10],[388,56,673,11,"_reactNative"],[388,68,673,11],[388,69,673,11,"View"],[388,73,673,15],[389,14,673,16,"style"],[389,19,673,21],[389,21,673,23,"dynamicDrawerStyles"],[389,40,673,43],[390,14,673,43,"children"],[390,22,673,43],[390,24,674,13,"_this"],[390,29,674,13],[390,30,674,18,"props"],[390,35,674,23],[390,36,674,24,"renderNavigationView"],[390,56,674,44],[390,57,674,45,"_this"],[390,62,674,45],[390,63,674,50,"openValue"],[390,72,674,77],[391,12,674,78],[391,13,675,16],[392,10,675,17],[392,11,676,23],[392,12,676,24],[393,8,676,24],[393,9,677,21],[393,10,677,22],[394,6,679,2],[394,7,679,3],[395,6,679,3,"_this"],[395,11,679,3],[395,12,681,10,"setPanGestureRef"],[395,28,681,26],[395,31,681,29],[395,41,681,30,"ref"],[395,44,681,52],[395,46,681,57],[396,8,682,4],[397,8,683,4],[398,8,685,6,"_this"],[398,13,685,6],[398,14,685,11,"panGestureHandler"],[398,31,685,28],[398,32,686,6,"current"],[398,39,686,13],[398,42,686,16,"ref"],[398,45,686,19],[399,8,687,4,"_this"],[399,13,687,4],[399,14,687,9,"props"],[399,19,687,14],[399,20,687,15,"onGestureRef"],[399,32,687,27],[399,44,687,4,"_this"],[399,49,687,4],[399,50,687,9,"props"],[399,55,687,14],[399,56,687,15,"onGestureRef"],[399,68,687,27],[399,69,687,30,"ref"],[399,72,687,33],[399,73,687,34],[400,6,688,2],[400,7,688,3],[401,6,221,4],[401,10,221,10,"dragX"],[401,16,221,15],[401,19,221,18],[401,23,221,22,"Animated"],[401,44,221,30],[401,45,221,31,"Value"],[401,50,221,36],[401,51,221,37],[401,52,221,38],[401,53,221,39],[402,6,222,4],[402,10,222,10,"touchX"],[402,17,222,16],[402,20,222,19],[402,24,222,23,"Animated"],[402,45,222,31],[402,46,222,32,"Value"],[402,51,222,37],[402,52,222,38],[402,53,222,39],[402,54,222,40],[403,6,223,4],[403,10,223,10,"drawerTranslation"],[403,28,223,27],[403,31,223,30],[403,35,223,34,"Animated"],[403,56,223,42],[403,57,223,43,"Value"],[403,62,223,48],[403,63,223,49],[403,64,223,50],[403,65,223,51],[404,6,225,4,"_this"],[404,11,225,4],[404,12,225,9,"state"],[404,17,225,14],[404,20,225,17],[405,8,226,6,"dragX"],[405,13,226,11],[405,15,226,6,"dragX"],[405,21,226,11],[406,8,227,6,"touchX"],[406,14,227,12],[406,16,227,6,"touchX"],[406,23,227,12],[407,8,228,6,"drawerTranslation"],[407,25,228,23],[407,27,228,6,"drawerTranslation"],[407,45,228,23],[408,8,229,6,"containerWidth"],[408,22,229,20],[408,24,229,22],[408,25,229,23],[409,8,230,6,"drawerState"],[409,19,230,17],[409,21,230,19,"IDLE"],[409,25,230,23],[410,8,231,6,"drawerOpened"],[410,20,231,18],[410,22,231,20],[411,6,232,4],[411,7,232,5],[412,6,234,4,"_this"],[412,11,234,4],[412,12,234,9,"updateAnimatedEvent"],[412,31,234,28],[412,32,234,29,"props"],[412,38,234,34],[412,40,234,36,"_this"],[412,45,234,36],[412,46,234,41,"state"],[412,51,234,46],[412,52,234,47],[413,6,234,48],[413,13,234,48,"_this"],[413,18,234,48],[414,4,235,2],[415,4,235,3],[415,8,235,3,"_inherits2"],[415,18,235,3],[415,19,235,3,"default"],[415,26,235,3],[415,28,235,3,"DrawerLayout"],[415,40,235,3],[415,42,235,3,"_Component"],[415,52,235,3],[416,4,235,3],[416,15,235,3,"_createClass2"],[416,28,235,3],[416,29,235,3,"default"],[416,36,235,3],[416,38,235,3,"DrawerLayout"],[416,50,235,3],[417,6,235,3,"key"],[417,9,235,3],[418,6,235,3,"value"],[418,11,235,3],[418,13,237,2],[418,22,237,2,"shouldComponentUpdate"],[418,43,237,23,"shouldComponentUpdate"],[418,44,237,24,"props"],[418,49,237,48],[418,51,237,50,"state"],[418,56,237,74],[418,58,237,76],[419,8,238,4],[419,12,239,6],[419,16,239,10],[419,17,239,11,"props"],[419,22,239,16],[419,23,239,17,"drawerPosition"],[419,37,239,31],[419,42,239,36,"props"],[419,47,239,41],[419,48,239,42,"drawerPosition"],[419,62,239,56],[419,66,240,6],[419,70,240,10],[419,71,240,11,"props"],[419,76,240,16],[419,77,240,17,"drawerWidth"],[419,88,240,28],[419,93,240,33,"props"],[419,98,240,38],[419,99,240,39,"drawerWidth"],[419,110,240,50],[419,114,241,6],[419,118,241,10],[419,119,241,11,"props"],[419,124,241,16],[419,125,241,17,"drawerType"],[419,135,241,27],[419,140,241,32,"props"],[419,145,241,37],[419,146,241,38,"drawerType"],[419,156,241,48],[419,160,242,6],[419,164,242,10],[419,165,242,11,"state"],[419,170,242,16],[419,171,242,17,"containerWidth"],[419,185,242,31],[419,190,242,36,"state"],[419,195,242,41],[419,196,242,42,"containerWidth"],[419,210,242,56],[419,212,243,6],[420,10,244,6],[420,14,244,10],[420,15,244,11,"updateAnimatedEvent"],[420,34,244,30],[420,35,244,31,"props"],[420,40,244,36],[420,42,244,38,"state"],[420,47,244,43],[420,48,244,44],[421,8,245,4],[422,8,247,4],[422,15,247,11],[422,19,247,15],[423,6,248,2],[424,4,248,3],[425,6,248,3,"key"],[425,9,248,3],[426,6,248,3,"value"],[426,11,248,3],[426,13,690,2],[426,22,690,2,"render"],[426,28,690,8,"render"],[426,29,690,8],[426,31,690,11],[427,8,691,4],[427,12,691,4,"_this$props4"],[427,24,691,4],[427,27,692,6],[427,31,692,10],[427,32,692,11,"props"],[427,37,692,16],[428,10,691,12,"drawerPosition"],[428,24,691,26],[428,27,691,26,"_this$props4"],[428,39,691,26],[428,40,691,12,"drawerPosition"],[428,54,691,26],[429,10,691,28,"drawerLockMode"],[429,24,691,42],[429,27,691,42,"_this$props4"],[429,39,691,42],[429,40,691,28,"drawerLockMode"],[429,54,691,42],[430,10,691,44,"edgeWidth"],[430,19,691,53],[430,22,691,53,"_this$props4"],[430,34,691,53],[430,35,691,44,"edgeWidth"],[430,44,691,53],[431,10,691,55,"minSwipeDistance"],[431,26,691,71],[431,29,691,71,"_this$props4"],[431,41,691,71],[431,42,691,55,"minSwipeDistance"],[431,58,691,71],[432,8,694,4],[432,12,694,10,"fromLeft"],[432,20,694,18],[432,23,694,21,"drawerPosition"],[432,37,694,35],[432,42,694,40],[432,48,694,46],[434,8,696,4],[435,8,697,4],[436,8,698,4],[437,8,699,4],[437,12,699,10,"gestureOrientation"],[437,30,699,28],[437,33,700,6],[437,34,700,7,"fromLeft"],[437,42,700,15],[437,45,700,18],[437,46,700,19],[437,49,700,22],[437,50,700,23],[437,51,700,24],[437,56,700,29],[437,60,700,33],[437,61,700,34,"drawerShown"],[437,72,700,45],[437,75,700,48],[437,76,700,49],[437,77,700,50],[437,80,700,53],[437,81,700,54],[437,82,700,55],[439,8,702,4],[440,8,703,4],[441,8,704,4],[442,8,705,4],[442,12,705,10,"hitSlop"],[442,19,705,17],[442,22,705,20,"fromLeft"],[442,30,705,28],[442,33,706,8],[443,10,706,10,"left"],[443,14,706,14],[443,16,706,16],[443,17,706,17],[444,10,706,19,"width"],[444,15,706,24],[444,17,706,26],[444,21,706,30],[444,22,706,31,"drawerShown"],[444,33,706,42],[444,36,706,45,"undefined"],[444,45,706,54],[444,48,706,57,"edgeWidth"],[445,8,706,67],[445,9,706,68],[445,12,707,8],[446,10,707,10,"right"],[446,15,707,15],[446,17,707,17],[446,18,707,18],[447,10,707,20,"width"],[447,15,707,25],[447,17,707,27],[447,21,707,31],[447,22,707,32,"drawerShown"],[447,33,707,43],[447,36,707,46,"undefined"],[447,45,707,55],[447,48,707,58,"edgeWidth"],[448,8,707,68],[448,9,707,69],[449,8,709,4],[449,28,710,6],[449,32,710,6,"_jsxRuntime"],[449,43,710,6],[449,44,710,6,"jsx"],[449,47,710,6],[449,49,710,7,"_$$_REQUIRE"],[449,60,710,7],[449,61,710,7,"_dependencyMap"],[449,75,710,7],[449,114,710,7,"PanGestureHandler"],[450,8,711,8],[451,8,711,8],[452,10,712,8,"userSelect"],[452,20,712,18],[452,22,712,20],[452,26,712,24],[452,27,712,25,"props"],[452,32,712,30],[452,33,712,31,"userSelect"],[452,43,712,42],[453,10,713,8,"activeCursor"],[453,22,713,20],[453,24,713,22],[453,28,713,26],[453,29,713,27,"props"],[453,34,713,32],[453,35,713,33,"activeCursor"],[453,47,713,46],[454,10,714,8,"mouseButton"],[454,21,714,19],[454,23,714,21],[454,27,714,25],[454,28,714,26,"props"],[454,33,714,31],[454,34,714,32,"mouseButton"],[454,45,714,44],[455,10,715,8,"enableContextMenu"],[455,27,715,25],[455,29,715,27],[455,33,715,31],[455,34,715,32,"props"],[455,39,715,37],[455,40,715,38,"enableContextMenu"],[455,57,715,56],[456,10,716,8,"ref"],[456,13,716,11],[456,15,716,13],[456,19,716,17],[456,20,716,18,"setPanGestureRef"],[456,36,716,35],[457,10,717,8,"hitSlop"],[457,17,717,15],[457,19,717,17,"hitSlop"],[457,26,717,25],[458,10,718,8,"activeOffsetX"],[458,23,718,21],[458,25,718,23,"gestureOrientation"],[458,43,718,41],[458,46,718,44,"minSwipeDistance"],[458,62,718,62],[459,10,719,8,"failOffsetY"],[459,21,719,19],[459,23,719,21],[459,24,719,22],[459,25,719,23],[459,27,719,25],[459,29,719,27],[459,31,719,29],[459,32,719,31],[460,10,720,8,"onGestureEvent"],[460,24,720,22],[460,26,720,24],[460,30,720,28],[460,31,720,29,"onGestureEvent"],[460,45,720,44],[461,10,721,8,"onHandlerStateChange"],[461,30,721,28],[461,32,721,30],[461,36,721,34],[461,37,721,35,"openingHandlerStateChange"],[461,62,721,61],[462,10,722,8,"enableTrackpadTwoFingerGesture"],[462,40,722,38],[462,42,723,10],[462,46,723,14],[462,47,723,15,"props"],[462,52,723,20],[462,53,723,21,"enableTrackpadTwoFingerGesture"],[462,83,724,9],[463,10,725,8,"enabled"],[463,17,725,15],[463,19,726,10,"drawerLockMode"],[463,33,726,24],[463,38,726,29],[463,53,726,44],[463,57,726,48,"drawerLockMode"],[463,71,726,62],[463,76,726,67],[463,89,727,9],[464,10,727,9,"children"],[464,18,727,9],[464,20,728,9],[464,24,728,13],[464,25,728,14,"renderDrawer"],[464,37,728,26],[464,38,728,27],[465,8,728,28],[465,9,729,25],[465,10,729,26],[466,6,731,2],[467,4,731,3],[468,2,731,3],[468,4,202,42,"Component"],[468,20,202,51],[469,2,202,21,"DrawerLayout"],[469,14,202,33],[469,15,206,9,"defaultProps"],[469,27,206,21],[469,30,206,24],[470,4,207,4,"drawerWidth"],[470,15,207,15],[470,17,207,17],[470,20,207,20],[471,4,208,4,"drawerPosition"],[471,18,208,18],[471,20,208,20],[471,26,208,26],[472,4,209,4,"useNativeAnimations"],[472,23,209,23],[472,25,209,25],[472,29,209,29],[473,4,210,4,"drawerType"],[473,14,210,14],[473,16,210,16],[473,23,210,23],[474,4,211,4,"edgeWidth"],[474,13,211,13],[474,15,211,15],[474,17,211,17],[475,4,212,4,"minSwipeDistance"],[475,20,212,20],[475,22,212,22],[475,23,212,23],[476,4,213,4,"overlayColor"],[476,16,213,16],[476,18,213,18],[476,38,213,38],[477,4,214,4,"drawerLockMode"],[477,18,214,18],[477,20,214,20],[477,30,214,30],[478,4,215,4,"enableTrackpadTwoFingerGesture"],[478,34,215,34],[478,36,215,36],[479,2,216,2],[479,3,216,3],[480,2,202,21,"DrawerLayout"],[480,14,202,33],[480,15,259,9,"positions"],[480,24,259,18],[480,27,259,21],[481,4,260,4,"Left"],[481,8,260,8],[481,10,260,10],[481,16,260,16],[482,4,261,4,"Right"],[482,9,261,9],[482,11,261,11],[483,2,262,2],[483,3,262,3],[484,2,734,0],[484,6,734,6,"styles"],[484,12,734,12],[484,15,734,15,"StyleSheet"],[484,38,734,25],[484,39,734,26,"create"],[484,45,734,32],[484,46,734,33],[485,4,735,2,"drawerContainer"],[485,19,735,17],[485,21,735,17,"Object"],[485,27,735,17],[485,28,735,17,"assign"],[485,34,735,17],[485,39,736,7,"StyleSheet"],[485,62,736,17],[485,63,736,18,"absoluteFillObject"],[485,81,736,36],[486,6,737,4,"zIndex"],[486,12,737,10],[486,14,737,12],[486,18,737,16],[487,6,738,4,"flexDirection"],[487,19,738,17],[487,21,738,19],[488,4,738,24],[488,6,739,3],[489,4,740,2,"containerInFront"],[489,20,740,18],[489,22,740,18,"Object"],[489,28,740,18],[489,29,740,18,"assign"],[489,35,740,18],[489,40,741,7,"StyleSheet"],[489,63,741,17],[489,64,741,18,"absoluteFillObject"],[489,82,741,36],[490,6,742,4,"zIndex"],[490,12,742,10],[490,14,742,12],[491,4,742,16],[491,6,743,3],[492,4,744,2,"containerOnBack"],[492,19,744,17],[492,21,744,17,"Object"],[492,27,744,17],[492,28,744,17,"assign"],[492,34,744,17],[492,39,745,7,"StyleSheet"],[492,62,745,17],[492,63,745,18,"absoluteFillObject"],[492,81,745,36],[492,82,746,3],[493,4,747,2,"main"],[493,8,747,6],[493,10,747,8],[494,6,748,4,"flex"],[494,10,748,8],[494,12,748,10],[494,13,748,11],[495,6,749,4,"zIndex"],[495,12,749,10],[495,14,749,12],[495,15,749,13],[496,6,750,4,"overflow"],[496,14,750,12],[496,16,750,14],[497,4,751,2],[497,5,751,3],[498,4,752,2,"overlay"],[498,11,752,9],[498,13,752,9,"Object"],[498,19,752,9],[498,20,752,9,"assign"],[498,26,752,9],[498,31,753,7,"StyleSheet"],[498,54,753,17],[498,55,753,18,"absoluteFillObject"],[498,73,753,36],[499,6,754,4,"zIndex"],[499,12,754,10],[499,14,754,12],[500,4,754,16],[501,2,756,0],[501,3,756,1],[501,4,756,2],[502,0,756,3],[502,3]],"functionMap":{"names":["<global>","DrawerLayout","constructor","shouldComponentUpdate","updateAnimatedEvent","gestureOptions.listener","handleContainerLayout","emitStateChanged","openingHandlerStateChange","onTapHandlerStateChange","handleRelease","updateShowing","animateDrawer","Animated.spring.start$argument_0","openDrawer","closeDrawer","renderOverlay","renderDrawer","setPanGestureRef","render"],"mappings":"AAA;eCyM;ECgB;GDiB;EEE;GFW;gCGgB;gCC+F;ODK;GHO;kCKE;GLE;6BME;GNK;sCOE;GPe;oCQE;GRU;0BSE;GTkC;0BUE;GV0B;0BWE;aCwC;KDe;GXC;eaE;GbY;gBcE;GdY;0BeE;GfyB;yBgBE;GhByF;6BiBE;GjBO;EkBE;GlByC;CDC"}},"type":"js/module"}]}