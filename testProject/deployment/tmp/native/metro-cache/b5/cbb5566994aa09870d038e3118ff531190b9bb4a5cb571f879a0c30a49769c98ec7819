{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":73,"column":0,"index":1902}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":73,"column":0,"index":1902}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":73,"column":0,"index":1902}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":11,"column":0,"index":222},"end":{"line":11,"column":34,"index":256}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _invariant = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"invariant\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n  var ChildListCollection = exports.default = /*#__PURE__*/function () {\n    function ChildListCollection() {\n      (0, _classCallCheck2.default)(this, ChildListCollection);\n      this._cellKeyToChildren = new Map();\n      this._childrenToCellKey = new Map();\n    }\n    return (0, _createClass2.default)(ChildListCollection, [{\n      key: \"add\",\n      value: function add(list, cellKey) {\n        var _this$_cellKeyToChild;\n        (0, _invariant.default)(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n        var cellLists = (_this$_cellKeyToChild = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild : new Set();\n        cellLists.add(list);\n        this._cellKeyToChildren.set(cellKey, cellLists);\n        this._childrenToCellKey.set(list, cellKey);\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(list) {\n        var cellKey = this._childrenToCellKey.get(list);\n        (0, _invariant.default)(cellKey != null, 'Trying to remove non-present child list');\n        this._childrenToCellKey.delete(list);\n        var cellLists = this._cellKeyToChildren.get(cellKey);\n        (0, _invariant.default)(cellLists, '_cellKeyToChildren should contain cellKey');\n        cellLists.delete(list);\n        if (cellLists.size === 0) {\n          this._cellKeyToChildren.delete(cellKey);\n        }\n      }\n    }, {\n      key: \"forEach\",\n      value: function forEach(fn) {\n        for (var listSet of this._cellKeyToChildren.values()) {\n          for (var list of listSet) {\n            fn(list);\n          }\n        }\n      }\n    }, {\n      key: \"forEachInCell\",\n      value: function forEachInCell(cellKey, fn) {\n        var _this$_cellKeyToChild2;\n        var listSet = (_this$_cellKeyToChild2 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild2 : [];\n        for (var list of listSet) {\n          fn(list);\n        }\n      }\n    }, {\n      key: \"anyInCell\",\n      value: function anyInCell(cellKey, fn) {\n        var _this$_cellKeyToChild3;\n        var listSet = (_this$_cellKeyToChild3 = this._cellKeyToChildren.get(cellKey)) != null ? _this$_cellKeyToChild3 : [];\n        for (var list of listSet) {\n          if (fn(list)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }, {\n      key: \"size\",\n      value: function size() {\n        return this._childrenToCellKey.size;\n      }\n    }]);\n  }();\n});","lineCount":85,"map":[[9,2,11,0],[9,6,11,0,"_invariant"],[9,16,11,0],[9,19,11,0,"_interopRequireDefault"],[9,41,11,0],[9,42,11,0,"_$$_REQUIRE"],[9,53,11,0],[9,54,11,0,"_dependencyMap"],[9,68,11,0],[10,2,1,0],[11,0,2,0],[12,0,3,0],[13,0,4,0],[14,0,5,0],[15,0,6,0],[16,0,7,0],[17,0,8,0],[18,0,9,0],[19,2,1,0],[19,6,13,21,"ChildListCollection"],[19,25,13,40],[19,28,13,40,"exports"],[19,35,13,40],[19,36,13,40,"default"],[19,43,13,40],[20,4,13,40],[20,13,13,40,"ChildListCollection"],[20,33,13,40],[21,6,13,40],[21,10,13,40,"_classCallCheck2"],[21,26,13,40],[21,27,13,40,"default"],[21,34,13,40],[21,42,13,40,"ChildListCollection"],[21,61,13,40],[22,6,13,40],[22,11,14,2,"_cellKeyToChildren"],[22,29,14,20],[22,32,14,48],[22,36,14,52,"Map"],[22,39,14,55],[22,40,14,56],[22,41,14,57],[23,6,14,57],[23,11,15,2,"_childrenToCellKey"],[23,29,15,20],[23,32,15,43],[23,36,15,47,"Map"],[23,39,15,50],[23,40,15,51],[23,41,15,52],[24,4,15,52],[25,4,15,52],[25,15,15,52,"_createClass2"],[25,28,15,52],[25,29,15,52,"default"],[25,36,15,52],[25,38,15,52,"ChildListCollection"],[25,57,15,52],[26,6,15,52,"key"],[26,9,15,52],[27,6,15,52,"value"],[27,11,15,52],[27,13,17,2],[27,22,17,2,"add"],[27,25,17,5,"add"],[27,26,17,6,"list"],[27,30,17,17],[27,32,17,19,"cellKey"],[27,39,17,34],[27,41,17,42],[28,8,17,42],[28,12,17,42,"_this$_cellKeyToChild"],[28,33,17,42],[29,8,18,4],[29,12,18,4,"invariant"],[29,30,18,13],[29,32,19,6],[29,33,19,7],[29,37,19,11],[29,38,19,12,"_childrenToCellKey"],[29,56,19,30],[29,57,19,31,"has"],[29,60,19,34],[29,61,19,35,"list"],[29,65,19,39],[29,66,19,40],[29,68,20,6],[29,110,21,4],[29,111,21,5],[30,8,23,4],[30,12,23,10,"cellLists"],[30,21,23,19],[30,25,23,19,"_this$_cellKeyToChild"],[30,46,23,19],[30,49,23,22],[30,53,23,26],[30,54,23,27,"_cellKeyToChildren"],[30,72,23,45],[30,73,23,46,"get"],[30,76,23,49],[30,77,23,50,"cellKey"],[30,84,23,57],[30,85,23,58],[30,97,23,58,"_this$_cellKeyToChild"],[30,118,23,58],[30,121,23,62],[30,125,23,66,"Set"],[30,128,23,69],[30,129,23,70],[30,130,23,71],[31,8,24,4,"cellLists"],[31,17,24,13],[31,18,24,14,"add"],[31,21,24,17],[31,22,24,18,"list"],[31,26,24,22],[31,27,24,23],[32,8,25,4],[32,12,25,8],[32,13,25,9,"_cellKeyToChildren"],[32,31,25,27],[32,32,25,28,"set"],[32,35,25,31],[32,36,25,32,"cellKey"],[32,43,25,39],[32,45,25,41,"cellLists"],[32,54,25,50],[32,55,25,51],[33,8,27,4],[33,12,27,8],[33,13,27,9,"_childrenToCellKey"],[33,31,27,27],[33,32,27,28,"set"],[33,35,27,31],[33,36,27,32,"list"],[33,40,27,36],[33,42,27,38,"cellKey"],[33,49,27,45],[33,50,27,46],[34,6,28,2],[35,4,28,3],[36,6,28,3,"key"],[36,9,28,3],[37,6,28,3,"value"],[37,11,28,3],[37,13,30,2],[37,22,30,2,"remove"],[37,28,30,8,"remove"],[37,29,30,9,"list"],[37,33,30,20],[37,35,30,28],[38,8,31,4],[38,12,31,10,"cellKey"],[38,19,31,17],[38,22,31,20],[38,26,31,24],[38,27,31,25,"_childrenToCellKey"],[38,45,31,43],[38,46,31,44,"get"],[38,49,31,47],[38,50,31,48,"list"],[38,54,31,52],[38,55,31,53],[39,8,32,4],[39,12,32,4,"invariant"],[39,30,32,13],[39,32,32,14,"cellKey"],[39,39,32,21],[39,43,32,25],[39,47,32,29],[39,49,32,31],[39,90,32,72],[39,91,32,73],[40,8,33,4],[40,12,33,8],[40,13,33,9,"_childrenToCellKey"],[40,31,33,27],[40,32,33,28,"delete"],[40,38,33,34],[40,39,33,35,"list"],[40,43,33,39],[40,44,33,40],[41,8,35,4],[41,12,35,10,"cellLists"],[41,21,35,19],[41,24,35,22],[41,28,35,26],[41,29,35,27,"_cellKeyToChildren"],[41,47,35,45],[41,48,35,46,"get"],[41,51,35,49],[41,52,35,50,"cellKey"],[41,59,35,57],[41,60,35,58],[42,8,36,4],[42,12,36,4,"invariant"],[42,30,36,13],[42,32,36,14,"cellLists"],[42,41,36,23],[42,43,36,25],[42,86,36,68],[42,87,36,69],[43,8,37,4,"cellLists"],[43,17,37,13],[43,18,37,14,"delete"],[43,24,37,20],[43,25,37,21,"list"],[43,29,37,25],[43,30,37,26],[44,8,39,4],[44,12,39,8,"cellLists"],[44,21,39,17],[44,22,39,18,"size"],[44,26,39,22],[44,31,39,27],[44,32,39,28],[44,34,39,30],[45,10,40,6],[45,14,40,10],[45,15,40,11,"_cellKeyToChildren"],[45,33,40,29],[45,34,40,30,"delete"],[45,40,40,36],[45,41,40,37,"cellKey"],[45,48,40,44],[45,49,40,45],[46,8,41,4],[47,6,42,2],[48,4,42,3],[49,6,42,3,"key"],[49,9,42,3],[50,6,42,3,"value"],[50,11,42,3],[50,13,44,2],[50,22,44,2,"forEach"],[50,29,44,9,"forEach"],[50,30,44,10,"fn"],[50,32,44,27],[50,34,44,35],[51,8,45,4],[51,13,45,9],[51,17,45,15,"listSet"],[51,24,45,22],[51,28,45,26],[51,32,45,30],[51,33,45,31,"_cellKeyToChildren"],[51,51,45,49],[51,52,45,50,"values"],[51,58,45,56],[51,59,45,57],[51,60,45,58],[51,62,45,60],[52,10,46,6],[52,15,46,11],[52,19,46,17,"list"],[52,23,46,21],[52,27,46,25,"listSet"],[52,34,46,32],[52,36,46,34],[53,12,47,8,"fn"],[53,14,47,10],[53,15,47,11,"list"],[53,19,47,15],[53,20,47,16],[54,10,48,6],[55,8,49,4],[56,6,50,2],[57,4,50,3],[58,6,50,3,"key"],[58,9,50,3],[59,6,50,3,"value"],[59,11,50,3],[59,13,52,2],[59,22,52,2,"forEachInCell"],[59,35,52,15,"forEachInCell"],[59,36,52,16,"cellKey"],[59,43,52,31],[59,45,52,33,"fn"],[59,47,52,50],[59,49,52,58],[60,8,52,58],[60,12,52,58,"_this$_cellKeyToChild2"],[60,34,52,58],[61,8,53,4],[61,12,53,10,"listSet"],[61,19,53,17],[61,23,53,17,"_this$_cellKeyToChild2"],[61,45,53,17],[61,48,53,20],[61,52,53,24],[61,53,53,25,"_cellKeyToChildren"],[61,71,53,43],[61,72,53,44,"get"],[61,75,53,47],[61,76,53,48,"cellKey"],[61,83,53,55],[61,84,53,56],[61,96,53,56,"_this$_cellKeyToChild2"],[61,118,53,56],[61,121,53,60],[61,123,53,62],[62,8,54,4],[62,13,54,9],[62,17,54,15,"list"],[62,21,54,19],[62,25,54,23,"listSet"],[62,32,54,30],[62,34,54,32],[63,10,55,6,"fn"],[63,12,55,8],[63,13,55,9,"list"],[63,17,55,13],[63,18,55,14],[64,8,56,4],[65,6,57,2],[66,4,57,3],[67,6,57,3,"key"],[67,9,57,3],[68,6,57,3,"value"],[68,11,57,3],[68,13,59,2],[68,22,59,2,"anyInCell"],[68,31,59,11,"anyInCell"],[68,32,59,12,"cellKey"],[68,39,59,27],[68,41,59,29,"fn"],[68,43,59,49],[68,45,59,60],[69,8,59,60],[69,12,59,60,"_this$_cellKeyToChild3"],[69,34,59,60],[70,8,60,4],[70,12,60,10,"listSet"],[70,19,60,17],[70,23,60,17,"_this$_cellKeyToChild3"],[70,45,60,17],[70,48,60,20],[70,52,60,24],[70,53,60,25,"_cellKeyToChildren"],[70,71,60,43],[70,72,60,44,"get"],[70,75,60,47],[70,76,60,48,"cellKey"],[70,83,60,55],[70,84,60,56],[70,96,60,56,"_this$_cellKeyToChild3"],[70,118,60,56],[70,121,60,60],[70,123,60,62],[71,8,61,4],[71,13,61,9],[71,17,61,15,"list"],[71,21,61,19],[71,25,61,23,"listSet"],[71,32,61,30],[71,34,61,32],[72,10,62,6],[72,14,62,10,"fn"],[72,16,62,12],[72,17,62,13,"list"],[72,21,62,17],[72,22,62,18],[72,24,62,20],[73,12,63,8],[73,19,63,15],[73,23,63,19],[74,10,64,6],[75,8,65,4],[76,8,66,4],[76,15,66,11],[76,20,66,16],[77,6,67,2],[78,4,67,3],[79,6,67,3,"key"],[79,9,67,3],[80,6,67,3,"value"],[80,11,67,3],[80,13,69,2],[80,22,69,2,"size"],[80,26,69,6,"size"],[80,27,69,6],[80,29,69,17],[81,8,70,4],[81,15,70,11],[81,19,70,15],[81,20,70,16,"_childrenToCellKey"],[81,38,70,34],[81,39,70,35,"size"],[81,43,70,39],[82,6,71,2],[83,4,71,3],[84,2,71,3],[85,0,71,3],[85,3]],"functionMap":{"names":["<global>","ChildListCollection","add","remove","forEach","forEachInCell","anyInCell","size"],"mappings":"AAA;eCY;ECI;GDW;EEE;GFY;EGE;GHM;EIE;GJK;EKE;GLQ;EME;GNE;CDC"}},"type":"js/module"}]}