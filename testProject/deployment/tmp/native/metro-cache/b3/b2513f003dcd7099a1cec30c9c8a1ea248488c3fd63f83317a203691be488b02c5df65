{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":128,"column":0,"index":4306}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":128,"column":0,"index":4306}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":128,"column":0,"index":4306}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./Dimensions","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":19,"index":262},"end":{"line":13,"column":50,"index":293}},{"start":{"line":13,"column":19,"index":262},"end":{"line":13,"column":50,"index":293}}],"key":"lQ2wcLysVFmj5hAZBxPIXpBUcgg="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  /**\n   * PixelRatio class gives access to the device pixel density.\n   *\n   * ## Fetching a correctly sized image\n   *\n   * You should get a higher resolution image if you are on a high pixel density\n   * device. A good rule of thumb is to multiply the size of the image you display\n   * by the pixel ratio.\n   *\n   * ```\n   * var image = getImage({\n   *   width: PixelRatio.getPixelSizeForLayoutSize(200),\n   *   height: PixelRatio.getPixelSizeForLayoutSize(100),\n   * });\n   * <Image source={image} style={{width: 200, height: 100}} />\n   * ```\n   *\n   * ## Pixel grid snapping\n   *\n   * In iOS, you can specify positions and dimensions for elements with arbitrary\n   * precision, for example 29.674825. But, ultimately the physical display only\n   * have a fixed number of pixels, for example 640×960 for iPhone 4 or 750×1334\n   * for iPhone 6. iOS tries to be as faithful as possible to the user value by\n   * spreading one original pixel into multiple ones to trick the eye. The\n   * downside of this technique is that it makes the resulting element look\n   * blurry.\n   *\n   * In practice, we found out that developers do not want this feature and they\n   * have to work around it by doing manual rounding in order to avoid having\n   * blurry elements. In React Native, we are rounding all the pixels\n   * automatically.\n   *\n   * We have to be careful when to do this rounding. You never want to work with\n   * rounded and unrounded values at the same time as you're going to accumulate\n   * rounding errors. Having even one rounding error is deadly because a one\n   * pixel border may vanish or be twice as big.\n   *\n   * In React Native, everything in JavaScript and within the layout engine works\n   * with arbitrary precision numbers. It's only when we set the position and\n   * dimensions of the native element on the main thread that we round. Also,\n   * rounding is done relative to the root rather than the parent, again to avoid\n   * accumulating rounding errors.\n   *\n   */\n  var PixelRatio = /*#__PURE__*/function () {\n    function PixelRatio() {\n      (0, _classCallCheck2.default)(this, PixelRatio);\n    }\n    return (0, _createClass2.default)(PixelRatio, null, [{\n      key: \"get\",\n      value:\n      /**\n       * Returns the device pixel density. Some examples:\n       *\n       *   - PixelRatio.get() === 1\n       *     - mdpi Android devices (160 dpi)\n       *   - PixelRatio.get() === 1.5\n       *     - hdpi Android devices (240 dpi)\n       *   - PixelRatio.get() === 2\n       *     - iPhone 4, 4S\n       *     - iPhone 5, 5c, 5s\n       *     - iPhone 6\n       *     - iPhone 7\n       *     - iPhone 8\n       *     - iPhone SE\n       *     - xhdpi Android devices (320 dpi)\n       *   - PixelRatio.get() === 3\n       *     - iPhone 6 Plus\n       *     - iPhone 7 Plus\n       *     - iPhone 8 Plus\n       *     - iPhone X\n       *     - xxhdpi Android devices (480 dpi)\n       *   - PixelRatio.get() === 3.5\n       *     - Nexus 6\n       */\n      function get() {\n        return _$$_REQUIRE(_dependencyMap[3], \"./Dimensions\").default.get('window').scale;\n      }\n\n      /**\n       * Returns the scaling factor for font sizes. This is the ratio that is used to calculate the\n       * absolute font size, so any elements that heavily depend on that should use this to do\n       * calculations.\n       *\n       * If a font scale is not set, this returns the device pixel ratio.\n       *\n       * This reflects the user preference set in:\n       *  - Settings > Display > Font size on Android,\n       *  - Settings > Display & Brightness > Text Size on iOS.\n       */\n    }, {\n      key: \"getFontScale\",\n      value: function getFontScale() {\n        return _$$_REQUIRE(_dependencyMap[3], \"./Dimensions\").default.get('window').fontScale || PixelRatio.get();\n      }\n\n      /**\n       * Converts a layout size (dp) to pixel size (px).\n       *\n       * Guaranteed to return an integer number.\n       */\n    }, {\n      key: \"getPixelSizeForLayoutSize\",\n      value: function getPixelSizeForLayoutSize(layoutSize) {\n        return Math.round(layoutSize * PixelRatio.get());\n      }\n\n      /**\n       * Rounds a layout size (dp) to the nearest layout size that corresponds to\n       * an integer number of pixels. For example, on a device with a PixelRatio\n       * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n       * exactly (8.33 * 3) = 25 pixels.\n       */\n    }, {\n      key: \"roundToNearestPixel\",\n      value: function roundToNearestPixel(layoutSize) {\n        var ratio = PixelRatio.get();\n        return Math.round(layoutSize * ratio) / ratio;\n      }\n\n      // No-op for iOS, but used on the web. Should not be documented.\n    }, {\n      key: \"startDetecting\",\n      value: function startDetecting() {}\n    }]);\n  }();\n  var _default = exports.default = PixelRatio;\n});","lineCount":148,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_interopRequireDefault"],[14,28,11,13],[14,31,11,13,"_$$_REQUIRE"],[14,42,11,13],[14,43,11,13,"_dependencyMap"],[14,57,11,13],[15,2,11,13,"Object"],[15,8,11,13],[15,9,11,13,"defineProperty"],[15,23,11,13],[15,24,11,13,"exports"],[15,31,11,13],[16,4,11,13,"value"],[16,9,11,13],[17,2,11,13],[18,2,11,13,"exports"],[18,9,11,13],[18,10,11,13,"default"],[18,17,11,13],[19,2,11,13],[19,6,11,13,"_classCallCheck2"],[19,22,11,13],[19,25,11,13,"_interopRequireDefault"],[19,47,11,13],[19,48,11,13,"_$$_REQUIRE"],[19,59,11,13],[19,60,11,13,"_dependencyMap"],[19,74,11,13],[20,2,11,13],[20,6,11,13,"_createClass2"],[20,19,11,13],[20,22,11,13,"_interopRequireDefault"],[20,44,11,13],[20,45,11,13,"_$$_REQUIRE"],[20,56,11,13],[20,57,11,13,"_dependencyMap"],[20,71,11,13],[21,2,15,0],[22,0,16,0],[23,0,17,0],[24,0,18,0],[25,0,19,0],[26,0,20,0],[27,0,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,0,28,0],[35,0,29,0],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,0,39,0],[46,0,40,0],[47,0,41,0],[48,0,42,0],[49,0,43,0],[50,0,44,0],[51,0,45,0],[52,0,46,0],[53,0,47,0],[54,0,48,0],[55,0,49,0],[56,0,50,0],[57,0,51,0],[58,0,52,0],[59,0,53,0],[60,0,54,0],[61,0,55,0],[62,0,56,0],[63,0,57,0],[64,0,58,0],[65,2,15,0],[65,6,59,6,"PixelRatio"],[65,16,59,16],[66,4,59,16],[66,13,59,16,"PixelRatio"],[66,24,59,16],[67,6,59,16],[67,10,59,16,"_classCallCheck2"],[67,26,59,16],[67,27,59,16,"default"],[67,34,59,16],[67,42,59,16,"PixelRatio"],[67,52,59,16],[68,4,59,16],[69,4,59,16],[69,15,59,16,"_createClass2"],[69,28,59,16],[69,29,59,16,"default"],[69,36,59,16],[69,38,59,16,"PixelRatio"],[69,48,59,16],[70,6,59,16,"key"],[70,9,59,16],[71,6,59,16,"value"],[71,11,59,16],[72,6,60,2],[73,0,61,0],[74,0,62,0],[75,0,63,0],[76,0,64,0],[77,0,65,0],[78,0,66,0],[79,0,67,0],[80,0,68,0],[81,0,69,0],[82,0,70,0],[83,0,71,0],[84,0,72,0],[85,0,73,0],[86,0,74,0],[87,0,75,0],[88,0,76,0],[89,0,77,0],[90,0,78,0],[91,0,79,0],[92,0,80,0],[93,0,81,0],[94,0,82,0],[95,0,83,0],[96,6,84,2],[96,15,84,9,"get"],[96,18,84,12,"get"],[96,19,84,12],[96,21,84,23],[97,8,85,4],[97,15,85,11,"_$$_REQUIRE"],[97,26,85,11],[97,27,85,11,"_dependencyMap"],[97,41,85,11],[97,62,85,11,"default"],[97,69,85,11],[97,70,85,22,"get"],[97,73,85,25],[97,74,85,26],[97,82,85,34],[97,83,85,35],[97,84,85,36,"scale"],[97,89,85,41],[98,6,86,2],[100,6,88,2],[101,0,89,0],[102,0,90,0],[103,0,91,0],[104,0,92,0],[105,0,93,0],[106,0,94,0],[107,0,95,0],[108,0,96,0],[109,0,97,0],[110,0,98,0],[111,4,88,2],[112,6,88,2,"key"],[112,9,88,2],[113,6,88,2,"value"],[113,11,88,2],[113,13,99,2],[113,22,99,9,"getFontScale"],[113,34,99,21,"getFontScale"],[113,35,99,21],[113,37,99,32],[114,8,100,4],[114,15,100,11,"_$$_REQUIRE"],[114,26,100,11],[114,27,100,11,"_dependencyMap"],[114,41,100,11],[114,62,100,11,"default"],[114,69,100,11],[114,70,100,22,"get"],[114,73,100,25],[114,74,100,26],[114,82,100,34],[114,83,100,35],[114,84,100,36,"fontScale"],[114,93,100,45],[114,97,100,49,"PixelRatio"],[114,107,100,59],[114,108,100,60,"get"],[114,111,100,63],[114,112,100,64],[114,113,100,65],[115,6,101,2],[117,6,103,2],[118,0,104,0],[119,0,105,0],[120,0,106,0],[121,0,107,0],[122,4,103,2],[123,6,103,2,"key"],[123,9,103,2],[124,6,103,2,"value"],[124,11,103,2],[124,13,108,2],[124,22,108,9,"getPixelSizeForLayoutSize"],[124,47,108,34,"getPixelSizeForLayoutSize"],[124,48,108,35,"layoutSize"],[124,58,108,53],[124,60,108,63],[125,8,109,4],[125,15,109,11,"Math"],[125,19,109,15],[125,20,109,16,"round"],[125,25,109,21],[125,26,109,22,"layoutSize"],[125,36,109,32],[125,39,109,35,"PixelRatio"],[125,49,109,45],[125,50,109,46,"get"],[125,53,109,49],[125,54,109,50],[125,55,109,51],[125,56,109,52],[126,6,110,2],[128,6,112,2],[129,0,113,0],[130,0,114,0],[131,0,115,0],[132,0,116,0],[133,0,117,0],[134,4,112,2],[135,6,112,2,"key"],[135,9,112,2],[136,6,112,2,"value"],[136,11,112,2],[136,13,118,2],[136,22,118,9,"roundToNearestPixel"],[136,41,118,28,"roundToNearestPixel"],[136,42,118,29,"layoutSize"],[136,52,118,47],[136,54,118,57],[137,8,119,4],[137,12,119,10,"ratio"],[137,17,119,15],[137,20,119,18,"PixelRatio"],[137,30,119,28],[137,31,119,29,"get"],[137,34,119,32],[137,35,119,33],[137,36,119,34],[138,8,120,4],[138,15,120,11,"Math"],[138,19,120,15],[138,20,120,16,"round"],[138,25,120,21],[138,26,120,22,"layoutSize"],[138,36,120,32],[138,39,120,35,"ratio"],[138,44,120,40],[138,45,120,41],[138,48,120,44,"ratio"],[138,53,120,49],[139,6,121,2],[141,6,123,2],[142,4,123,2],[143,6,123,2,"key"],[143,9,123,2],[144,6,123,2,"value"],[144,11,123,2],[144,13,124,2],[144,22,124,9,"startDetecting"],[144,36,124,23,"startDetecting"],[144,37,124,23],[144,39,124,26],[144,40,124,27],[145,4,124,28],[146,2,124,28],[147,2,124,28],[147,6,124,28,"_default"],[147,14,124,28],[147,17,124,28,"exports"],[147,24,124,28],[147,25,124,28,"default"],[147,32,124,28],[147,35,127,15,"PixelRatio"],[147,45,127,25],[148,0,127,25],[148,3]],"functionMap":{"names":["<global>","PixelRatio","get","getFontScale","getPixelSizeForLayoutSize","roundToNearestPixel","startDetecting"],"mappings":"AAA;AC0D;ECyB;GDE;EEa;GFE;EGO;GHE;EIQ;GJG;EKG,0BL;CDC"}},"type":"js/module"}]}