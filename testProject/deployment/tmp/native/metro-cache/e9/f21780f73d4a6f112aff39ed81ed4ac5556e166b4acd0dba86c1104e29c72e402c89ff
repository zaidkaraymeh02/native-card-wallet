{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":2,"column":0,"index":3543}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/defineProperty","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":2,"column":0,"index":3543}}],"key":"RY2z4+Bdq4bpTD/1b+1jGPWZdgA="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":2,"column":0,"index":3543}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":2,"column":0,"index":3543}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":2,"column":0,"index":3543}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.d = exports.a = exports.L = void 0;\n  exports.l = logUnhandledErrors;\n  exports.r = registerConsoleLogsListener;\n  var _defineProperty2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/defineProperty\"));\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var logLevels = [\"trace\", \"debug\", \"info\", \"warn\", \"error\", \"critical\"],\n    LogNode = exports.a = {\n      Auth: \"Auth\",\n      AppCenter: \"AppCenter\",\n      Client: \"Client\",\n      OTA: \"OTA\",\n      SelectiveSync: \"SelectiveSync\",\n      Nanoflow: \"Nanoflow\",\n      NanoflowDebugger: \"NanoflowDebugger\",\n      Database: \"Database\",\n      FileSystem: \"FileSystem\",\n      Navigation: \"Navigation\",\n      Network: \"Network\",\n      Startup: \"Startup\",\n      Synchronization: \"Synchronization\"\n    };\n  var LogManager = exports.L = /*#__PURE__*/function () {\n    function LogManager() {\n      var _this = this;\n      (0, _classCallCheck2.default)(this, LogManager);\n      this.logHandlers = [], this.loggers = new Map(), this.delayedLogs = [], this.processLog = function (level, node) {\n        for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n          args[_key - 2] = arguments[_key];\n        }\n        _this.shouldProcessLog.apply(_this, [level, node].concat(args)) && _this.logHandlers.forEach(function (handler) {\n          return handler.apply(void 0, [level, node].concat(args));\n        });\n      }, this.processLogDebounced = function (level, node) {\n        for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];\n        }\n        _this.shouldProcessLog.apply(_this, [level, node].concat(args)) && (_this.delayTimer && clearTimeout(_this.delayTimer), _this.delayedLogs.push({\n          level: level,\n          node: node,\n          args: args\n        }), _this.delayTimer = setTimeout(function () {\n          _this.delayedLogs.forEach(function (delayedLog) {\n            _this.logHandlers.forEach(function (handler) {\n              return handler.apply(void 0, [delayedLog.level, delayedLog.node].concat((0, _toConsumableArray2.default)(delayedLog.args)));\n            });\n          }), _this.delayedLogs = [];\n        }, 500));\n      };\n    }\n    return (0, _createClass2.default)(LogManager, [{\n      key: \"addHandler\",\n      value: function addHandler(handler) {\n        this.logHandlers.push(handler);\n      }\n    }, {\n      key: \"removeHandler\",\n      value: function removeHandler(handler) {\n        var indexToDelete = this.logHandlers.indexOf(handler);\n        -1 !== indexToDelete && this.logHandlers.splice(indexToDelete, 1);\n      }\n    }, {\n      key: \"getLogFilter\",\n      value: function getLogFilter() {\n        return this.filter;\n      }\n    }, {\n      key: \"setLogFilter\",\n      value: function setLogFilter(logFilter) {\n        this.filter = logFilter;\n      }\n    }, {\n      key: \"getLogger\",\n      value: function getLogger() {\n        var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : LogNode.Client;\n        if (!this.loggers.has(node)) {\n          if (!Object.prototype.hasOwnProperty.call(LogNode, node)) {\n            var defaultLogger = this.getLogger();\n            return defaultLogger.warn(`Invalid log node requested: \"${node}\". Returning a logger with default node instead.`), defaultLogger;\n          }\n          var createLogger = function createLogger(logsProcessor) {\n              return Object.assign.apply(Object, [{}].concat((0, _toConsumableArray2.default)(logLevels.map(function (level) {\n                return (0, _defineProperty2.default)({}, level, function () {\n                  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                    args[_key3] = arguments[_key3];\n                  }\n                  logsProcessor.apply(void 0, [\"warn\" === level ? \"warning\" : level, node].concat(args));\n                });\n              })), [{\n                log: function log(level) {\n                  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                    args[_key4 - 1] = arguments[_key4];\n                  }\n                  logsProcessor.apply(void 0, [level, node].concat(args));\n                }\n              }]));\n            },\n            logger = Object.assign({}, createLogger(this.processLog), {\n              debounced: createLogger(this.processLogDebounced)\n            });\n          this.loggers.set(node, logger);\n        }\n        return this.loggers.get(node);\n      }\n    }, {\n      key: \"shouldProcessLog\",\n      value: function shouldProcessLog(level, node) {\n        for (var _len5 = arguments.length, args = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {\n          args[_key5 - 2] = arguments[_key5];\n        }\n        return void 0 === this.filter || this.filter.apply(this, [level, node].concat(args));\n      }\n    }], [{\n      key: \"get\",\n      value: function get() {\n        return LogManager.instance || (LogManager.instance = new LogManager()), LogManager.instance;\n      }\n    }]);\n  }();\n  function logUnhandledErrors() {\n    if (\"function\" == typeof window.addEventListener) {\n      var defaultLogger = LogManager.get().getLogger();\n      window.addEventListener(\"error\", function (event) {\n        var _event$error;\n        return defaultLogger.error((_event$error = event.error) != null ? _event$error : event.message);\n      }), window.addEventListener(\"unhandledrejection\", function (event) {\n        return defaultLogger.error(event.reason);\n      });\n    }\n  }\n  function registerConsoleLogsListener() {\n    LogManager.get().addHandler(function () {\n      var originalLog = {};\n      return [\"debug\", \"info\", \"log\", \"warn\", \"error\"].forEach(function (clientLevel) {\n        originalLog[clientLevel] = console[clientLevel];\n        var runtimeLevel = function (clientLevel) {\n          switch (clientLevel) {\n            case \"warn\":\n              return \"warning\";\n            case \"log\":\n              return \"debug\";\n            default:\n              return clientLevel;\n          }\n        }(clientLevel);\n        console[clientLevel] = function () {\n          var _LogManager$get$getLo;\n          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n            args[_key6] = arguments[_key6];\n          }\n          return (_LogManager$get$getLo = LogManager.get().getLogger()).log.apply(_LogManager$get$getLo, [runtimeLevel].concat(args));\n        };\n      }), function (runtimeLevel, node) {\n        var _originalLog$clientLe;\n        var clientLevel = function (runtimeLevel) {\n          switch (runtimeLevel) {\n            case \"trace\":\n              return \"debug\";\n            case \"critical\":\n              return \"error\";\n            case \"warning\":\n              return \"warn\";\n            default:\n              return runtimeLevel;\n          }\n        }(runtimeLevel);\n        if (void 0 === clientLevel) return;\n        for (var _len7 = arguments.length, args = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n          args[_key7 - 2] = arguments[_key7];\n        }\n        var firstArg = args[0],\n          rest = args.slice(1),\n          argsToPass = \"string\" == typeof firstArg ? [`[${node}] ${firstArg}`].concat((0, _toConsumableArray2.default)(rest)) : [`[${node}]`].concat(args);\n        (_originalLog$clientLe = originalLog[clientLevel]).call.apply(_originalLog$clientLe, [console].concat((0, _toConsumableArray2.default)(argsToPass)));\n      };\n    }());\n  }\n  var defaultLogFilter = exports.d = function defaultLogFilter(_level, _node) {\n    for (var _len8 = arguments.length, args = new Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {\n      args[_key8 - 2] = arguments[_key8];\n    }\n    return !args.some(function (a) {\n      return \"string\" == typeof a && a.includes(\"setstate-in-render\");\n    });\n  };\n});","lineCount":192,"map":[[13,2,1,0],[13,6,1,6,"logLevels"],[13,15,1,15],[13,18,1,16],[13,19,1,17],[13,26,1,24],[13,28,1,25],[13,35,1,32],[13,37,1,33],[13,43,1,39],[13,45,1,40],[13,51,1,46],[13,53,1,47],[13,60,1,54],[13,62,1,55],[13,72,1,65],[13,73,1,66],[14,4,1,67,"LogNode"],[14,11,1,74],[14,14,1,74,"exports"],[14,21,1,74],[14,22,1,74,"a"],[14,23,1,74],[14,26,1,75],[15,6,1,76,"Auth"],[15,10,1,80],[15,12,1,81],[15,18,1,87],[16,6,1,88,"AppCenter"],[16,15,1,97],[16,17,1,98],[16,28,1,109],[17,6,1,110,"Client"],[17,12,1,116],[17,14,1,117],[17,22,1,125],[18,6,1,126,"OTA"],[18,9,1,129],[18,11,1,130],[18,16,1,135],[19,6,1,136,"SelectiveSync"],[19,19,1,149],[19,21,1,150],[19,36,1,165],[20,6,1,166,"Nanoflow"],[20,14,1,174],[20,16,1,175],[20,26,1,185],[21,6,1,186,"NanoflowDebugger"],[21,22,1,202],[21,24,1,203],[21,42,1,221],[22,6,1,222,"Database"],[22,14,1,230],[22,16,1,231],[22,26,1,241],[23,6,1,242,"FileSystem"],[23,16,1,252],[23,18,1,253],[23,30,1,265],[24,6,1,266,"Navigation"],[24,16,1,276],[24,18,1,277],[24,30,1,289],[25,6,1,290,"Network"],[25,13,1,297],[25,15,1,298],[25,24,1,307],[26,6,1,308,"Startup"],[26,13,1,315],[26,15,1,316],[26,24,1,325],[27,6,1,326,"Synchronization"],[27,21,1,341],[27,23,1,342],[28,4,1,359],[28,5,1,360],[29,2,1,361],[29,6,1,367,"LogManager"],[29,16,1,377],[29,19,1,377,"exports"],[29,26,1,377],[29,27,1,377,"L"],[29,28,1,377],[30,4,1,378],[30,13,1,378,"LogManager"],[30,24,1,378],[30,26,1,391],[31,6,1,391],[31,10,1,391,"_this"],[31,15,1,391],[32,6,1,391],[32,10,1,391,"_classCallCheck2"],[32,26,1,391],[32,27,1,391,"default"],[32,34,1,391],[32,42,1,391,"LogManager"],[32,52,1,391],[33,6,1,392],[33,10,1,396],[33,11,1,397,"logHandlers"],[33,22,1,408],[33,25,1,409],[33,27,1,411],[33,29,1,412],[33,33,1,416],[33,34,1,417,"loggers"],[33,41,1,424],[33,44,1,425],[33,48,1,429,"Map"],[33,51,1,432],[33,52,1,431],[33,53,1,432],[33,55,1,433],[33,59,1,437],[33,60,1,438,"delayedLogs"],[33,71,1,449],[33,74,1,450],[33,76,1,452],[33,78,1,453],[33,82,1,457],[33,83,1,458,"processLog"],[33,93,1,468],[33,96,1,469],[33,106,1,470,"level"],[33,111,1,475],[33,113,1,476,"node"],[33,117,1,480],[33,119,1,491],[34,8,1,491],[34,17,1,491,"_len"],[34,21,1,491],[34,24,1,491,"arguments"],[34,33,1,491],[34,34,1,491,"length"],[34,40,1,491],[34,42,1,484,"args"],[34,46,1,488],[34,53,1,488,"Array"],[34,58,1,488],[34,59,1,488,"_len"],[34,63,1,488],[34,70,1,488,"_len"],[34,74,1,488],[34,85,1,488,"_key"],[34,89,1,488],[34,95,1,488,"_key"],[34,99,1,488],[34,102,1,488,"_len"],[34,106,1,488],[34,108,1,488,"_key"],[34,112,1,488],[35,10,1,484,"args"],[35,14,1,488],[35,15,1,488,"_key"],[35,19,1,488],[35,27,1,488,"arguments"],[35,36,1,488],[35,37,1,488,"_key"],[35,41,1,488],[36,8,1,488],[37,8,1,492,"_this"],[37,13,1,496],[37,14,1,497,"shouldProcessLog"],[37,30,1,513],[37,31,1,513,"apply"],[37,36,1,513],[37,37,1,492,"_this"],[37,42,1,496],[37,45,1,514,"level"],[37,50,1,519],[37,52,1,520,"node"],[37,56,1,524],[37,58,1,524,"concat"],[37,64,1,524],[37,65,1,528,"args"],[37,69,1,532],[37,71,1,533],[37,75,1,535,"_this"],[37,80,1,539],[37,81,1,540,"logHandlers"],[37,92,1,551],[37,93,1,552,"forEach"],[37,100,1,559],[37,101,1,561],[37,111,1,561,"handler"],[37,118,1,568],[38,10,1,568],[38,17,1,570,"handler"],[38,24,1,577],[38,25,1,577,"apply"],[38,30,1,577],[38,40,1,578,"level"],[38,45,1,583],[38,47,1,584,"node"],[38,51,1,588],[38,53,1,588,"concat"],[38,59,1,588],[38,60,1,592,"args"],[38,64,1,596],[38,66,1,597],[39,8,1,597],[39,9,1,598],[39,10,1,599],[40,6,1,599],[40,7,1,600],[40,9,1,601],[40,13,1,605],[40,14,1,606,"processLogDebounced"],[40,33,1,625],[40,36,1,626],[40,46,1,627,"level"],[40,51,1,632],[40,53,1,633,"node"],[40,57,1,637],[40,59,1,648],[41,8,1,648],[41,17,1,648,"_len2"],[41,22,1,648],[41,25,1,648,"arguments"],[41,34,1,648],[41,35,1,648,"length"],[41,41,1,648],[41,43,1,641,"args"],[41,47,1,645],[41,54,1,645,"Array"],[41,59,1,645],[41,60,1,645,"_len2"],[41,65,1,645],[41,72,1,645,"_len2"],[41,77,1,645],[41,88,1,645,"_key2"],[41,93,1,645],[41,99,1,645,"_key2"],[41,104,1,645],[41,107,1,645,"_len2"],[41,112,1,645],[41,114,1,645,"_key2"],[41,119,1,645],[42,10,1,641,"args"],[42,14,1,645],[42,15,1,645,"_key2"],[42,20,1,645],[42,28,1,645,"arguments"],[42,37,1,645],[42,38,1,645,"_key2"],[42,43,1,645],[43,8,1,645],[44,8,1,649,"_this"],[44,13,1,653],[44,14,1,654,"shouldProcessLog"],[44,30,1,670],[44,31,1,670,"apply"],[44,36,1,670],[44,37,1,649,"_this"],[44,42,1,653],[44,45,1,671,"level"],[44,50,1,676],[44,52,1,677,"node"],[44,56,1,681],[44,58,1,681,"concat"],[44,64,1,681],[44,65,1,685,"args"],[44,69,1,689],[44,71,1,690],[44,76,1,693,"_this"],[44,81,1,697],[44,82,1,698,"delayTimer"],[44,92,1,708],[44,96,1,710,"clearTimeout"],[44,108,1,722],[44,109,1,723,"_this"],[44,114,1,727],[44,115,1,728,"delayTimer"],[44,125,1,738],[44,126,1,739],[44,128,1,740,"_this"],[44,133,1,744],[44,134,1,745,"delayedLogs"],[44,145,1,756],[44,146,1,757,"push"],[44,150,1,761],[44,151,1,762],[45,10,1,763,"level"],[45,15,1,768],[45,17,1,769,"level"],[45,22,1,774],[46,10,1,775,"node"],[46,14,1,779],[46,16,1,780,"node"],[46,20,1,784],[47,10,1,785,"args"],[47,14,1,789],[47,16,1,790,"args"],[48,8,1,794],[48,9,1,795],[48,10,1,796],[48,12,1,797,"_this"],[48,17,1,801],[48,18,1,802,"delayTimer"],[48,28,1,812],[48,31,1,813,"setTimeout"],[48,41,1,823],[48,42,1,825],[48,54,1,829],[49,10,1,830,"_this"],[49,15,1,834],[49,16,1,835,"delayedLogs"],[49,27,1,846],[49,28,1,847,"forEach"],[49,35,1,854],[49,36,1,856],[49,46,1,856,"delayedLog"],[49,56,1,866],[49,58,1,868],[50,12,1,869,"_this"],[50,17,1,873],[50,18,1,874,"logHandlers"],[50,29,1,885],[50,30,1,886,"forEach"],[50,37,1,893],[50,38,1,895],[50,48,1,895,"handler"],[50,55,1,902],[51,14,1,902],[51,21,1,904,"handler"],[51,28,1,911],[51,29,1,911,"apply"],[51,34,1,911],[51,44,1,912,"delayedLog"],[51,54,1,922],[51,55,1,923,"level"],[51,60,1,928],[51,62,1,929,"delayedLog"],[51,72,1,939],[51,73,1,940,"node"],[51,77,1,944],[51,79,1,944,"concat"],[51,85,1,944],[51,90,1,944,"_toConsumableArray2"],[51,109,1,944],[51,110,1,944,"default"],[51,117,1,944],[51,119,1,948,"delayedLog"],[51,129,1,958],[51,130,1,959,"args"],[51,134,1,963],[51,137,1,964],[52,12,1,964],[52,13,1,965],[52,14,1,966],[53,10,1,966],[53,11,1,968],[53,12,1,969],[53,14,1,970,"_this"],[53,19,1,974],[53,20,1,975,"delayedLogs"],[53,31,1,986],[53,34,1,987],[53,36,1,989],[54,8,1,989],[54,9,1,990],[54,11,1,992],[54,14,1,995],[54,15,1,996],[54,16,1,997],[55,6,1,997],[55,7,1,998],[56,4,1,998],[57,4,1,999],[57,15,1,999,"_createClass2"],[57,28,1,999],[57,29,1,999,"default"],[57,36,1,999],[57,38,1,999,"LogManager"],[57,48,1,999],[58,6,1,999,"key"],[58,9,1,999],[59,6,1,999,"value"],[59,11,1,999],[59,22,1,999,"addHandler"],[59,32,1,1009,"addHandler"],[59,33,1,1010,"handler"],[59,40,1,1017],[59,42,1,1018],[60,8,1,1019],[60,12,1,1023],[60,13,1,1024,"logHandlers"],[60,24,1,1035],[60,25,1,1036,"push"],[60,29,1,1040],[60,30,1,1041,"handler"],[60,37,1,1048],[60,38,1,1049],[61,6,1,1049],[62,4,1,1050],[63,6,1,1050,"key"],[63,9,1,1050],[64,6,1,1050,"value"],[64,11,1,1050],[64,22,1,1050,"removeHandler"],[64,35,1,1063,"removeHandler"],[64,36,1,1064,"handler"],[64,43,1,1071],[64,45,1,1072],[65,8,1,1073],[65,12,1,1079,"indexToDelete"],[65,25,1,1092],[65,28,1,1093],[65,32,1,1097],[65,33,1,1098,"logHandlers"],[65,44,1,1109],[65,45,1,1110,"indexOf"],[65,52,1,1117],[65,53,1,1118,"handler"],[65,60,1,1125],[65,61,1,1126],[66,8,1,1127],[66,9,1,1128],[66,10,1,1129],[66,15,1,1132,"indexToDelete"],[66,28,1,1145],[66,32,1,1147],[66,36,1,1151],[66,37,1,1152,"logHandlers"],[66,48,1,1163],[66,49,1,1164,"splice"],[66,55,1,1170],[66,56,1,1171,"indexToDelete"],[66,69,1,1184],[66,71,1,1185],[66,72,1,1186],[66,73,1,1187],[67,6,1,1187],[68,4,1,1188],[69,6,1,1188,"key"],[69,9,1,1188],[70,6,1,1188,"value"],[70,11,1,1188],[70,22,1,1188,"getLogFilter"],[70,34,1,1200,"getLogFilter"],[70,35,1,1200],[70,37,1,1202],[71,8,1,1203],[71,15,1,1210],[71,19,1,1214],[71,20,1,1215,"filter"],[71,26,1,1221],[72,6,1,1221],[73,4,1,1222],[74,6,1,1222,"key"],[74,9,1,1222],[75,6,1,1222,"value"],[75,11,1,1222],[75,22,1,1222,"setLogFilter"],[75,34,1,1234,"setLogFilter"],[75,35,1,1235,"logFilter"],[75,44,1,1244],[75,46,1,1245],[76,8,1,1246],[76,12,1,1250],[76,13,1,1251,"filter"],[76,19,1,1257],[76,22,1,1258,"logFilter"],[76,31,1,1267],[77,6,1,1267],[78,4,1,1268],[79,6,1,1268,"key"],[79,9,1,1268],[80,6,1,1268,"value"],[80,11,1,1268],[80,22,1,1268,"getLogger"],[80,31,1,1277,"getLogger"],[80,32,1,1277],[80,34,1,1298],[81,8,1,1298],[81,12,1,1278,"node"],[81,16,1,1282],[81,19,1,1282,"arguments"],[81,28,1,1282],[81,29,1,1282,"length"],[81,35,1,1282],[81,43,1,1282,"arguments"],[81,52,1,1282],[81,60,1,1282,"undefined"],[81,69,1,1282],[81,72,1,1282,"arguments"],[81,81,1,1282],[81,87,1,1283,"LogNode"],[81,94,1,1290],[81,95,1,1291,"Client"],[81,101,1,1297],[82,8,1,1299],[82,12,1,1302],[82,13,1,1303],[82,17,1,1307],[82,18,1,1308,"loggers"],[82,25,1,1315],[82,26,1,1316,"has"],[82,29,1,1319],[82,30,1,1320,"node"],[82,34,1,1324],[82,35,1,1325],[82,37,1,1326],[83,10,1,1327],[83,14,1,1330],[83,15,1,1331,"Object"],[83,21,1,1337],[83,22,1,1338,"prototype"],[83,31,1,1347],[83,32,1,1348,"hasOwnProperty"],[83,46,1,1362],[83,47,1,1363,"call"],[83,51,1,1367],[83,52,1,1368,"LogNode"],[83,59,1,1375],[83,61,1,1376,"node"],[83,65,1,1380],[83,66,1,1381],[83,68,1,1382],[84,12,1,1383],[84,16,1,1389,"defaultLogger"],[84,29,1,1402],[84,32,1,1403],[84,36,1,1407],[84,37,1,1408,"getLogger"],[84,46,1,1417],[84,47,1,1418],[84,48,1,1419],[85,12,1,1420],[85,19,1,1427,"defaultLogger"],[85,32,1,1440],[85,33,1,1441,"warn"],[85,37,1,1445],[85,38,1,1446],[85,70,1,1478,"node"],[85,74,1,1482],[85,124,1,1532],[85,125,1,1533],[85,127,1,1534,"defaultLogger"],[85,140,1,1547],[86,10,1,1547],[87,10,1,1548],[87,14,1,1554,"createLogger"],[87,26,1,1566],[87,29,1,1567],[87,38,1,1554,"createLogger"],[87,50,1,1566,"createLogger"],[87,51,1,1567,"logsProcessor"],[87,64,1,1580],[88,14,1,1580],[88,21,1,1582,"Object"],[88,27,1,1588],[88,28,1,1589,"assign"],[88,34,1,1595],[88,35,1,1595,"apply"],[88,40,1,1595],[88,41,1,1582,"Object"],[88,47,1,1588],[88,50,1,1596],[88,51,1,1597],[88,52,1,1598],[88,54,1,1598,"concat"],[88,60,1,1598],[88,65,1,1598,"_toConsumableArray2"],[88,84,1,1598],[88,85,1,1598,"default"],[88,92,1,1598],[88,94,1,1602,"logLevels"],[88,103,1,1611],[88,104,1,1612,"map"],[88,107,1,1615],[88,108,1,1617],[88,118,1,1617,"level"],[88,123,1,1622],[89,16,1,1622],[89,27,1,1622,"_defineProperty2"],[89,43,1,1622],[89,44,1,1622,"default"],[89,51,1,1622],[89,57,1,1627,"level"],[89,62,1,1632],[89,64,1,1634],[89,76,1,1645],[90,18,1,1645],[90,27,1,1645,"_len3"],[90,32,1,1645],[90,35,1,1645,"arguments"],[90,44,1,1645],[90,45,1,1645,"length"],[90,51,1,1645],[90,53,1,1638,"args"],[90,57,1,1642],[90,64,1,1642,"Array"],[90,69,1,1642],[90,70,1,1642,"_len3"],[90,75,1,1642],[90,78,1,1642,"_key3"],[90,83,1,1642],[90,89,1,1642,"_key3"],[90,94,1,1642],[90,97,1,1642,"_len3"],[90,102,1,1642],[90,104,1,1642,"_key3"],[90,109,1,1642],[91,20,1,1638,"args"],[91,24,1,1642],[91,25,1,1642,"_key3"],[91,30,1,1642],[91,34,1,1642,"arguments"],[91,43,1,1642],[91,44,1,1642,"_key3"],[91,49,1,1642],[92,18,1,1642],[93,18,1,1646,"logsProcessor"],[93,31,1,1659],[93,32,1,1659,"apply"],[93,37,1,1659],[93,47,1,1660],[93,53,1,1666],[93,58,1,1669,"level"],[93,63,1,1674],[93,66,1,1675],[93,75,1,1684],[93,78,1,1685,"level"],[93,83,1,1690],[93,85,1,1691,"node"],[93,89,1,1695],[93,91,1,1695,"concat"],[93,97,1,1695],[93,98,1,1699,"args"],[93,102,1,1703],[93,104,1,1704],[94,16,1,1704],[94,17,1,1705],[95,14,1,1705],[95,15,1,1708],[95,16,1,1709],[95,20,1,1710],[96,16,1,1711,"log"],[96,19,1,1714],[96,21,1,1715],[96,30,1,1711,"log"],[96,33,1,1714,"log"],[96,34,1,1716,"level"],[96,39,1,1721],[96,41,1,1732],[97,18,1,1732],[97,27,1,1732,"_len4"],[97,32,1,1732],[97,35,1,1732,"arguments"],[97,44,1,1732],[97,45,1,1732,"length"],[97,51,1,1732],[97,53,1,1725,"args"],[97,57,1,1729],[97,64,1,1729,"Array"],[97,69,1,1729],[97,70,1,1729,"_len4"],[97,75,1,1729],[97,82,1,1729,"_len4"],[97,87,1,1729],[97,98,1,1729,"_key4"],[97,103,1,1729],[97,109,1,1729,"_key4"],[97,114,1,1729],[97,117,1,1729,"_len4"],[97,122,1,1729],[97,124,1,1729,"_key4"],[97,129,1,1729],[98,20,1,1725,"args"],[98,24,1,1729],[98,25,1,1729,"_key4"],[98,30,1,1729],[98,38,1,1729,"arguments"],[98,47,1,1729],[98,48,1,1729,"_key4"],[98,53,1,1729],[99,18,1,1729],[100,18,1,1733,"logsProcessor"],[100,31,1,1746],[100,32,1,1746,"apply"],[100,37,1,1746],[100,47,1,1747,"level"],[100,52,1,1752],[100,54,1,1753,"node"],[100,58,1,1757],[100,60,1,1757,"concat"],[100,66,1,1757],[100,67,1,1761,"args"],[100,71,1,1765],[100,73,1,1766],[101,16,1,1766],[102,14,1,1767],[102,15,1,1768],[102,18,1,1769],[103,12,1,1769],[104,12,1,1770,"logger"],[104,18,1,1776],[104,21,1,1776,"Object"],[104,27,1,1776],[104,28,1,1776,"assign"],[104,34,1,1776],[104,39,1,1781,"createLogger"],[104,51,1,1793],[104,52,1,1794],[104,56,1,1798],[104,57,1,1799,"processLog"],[104,67,1,1809],[104,68,1,1810],[105,14,1,1811,"debounced"],[105,23,1,1820],[105,25,1,1821,"createLogger"],[105,37,1,1833],[105,38,1,1834],[105,42,1,1838],[105,43,1,1839,"processLogDebounced"],[105,62,1,1858],[106,12,1,1859],[106,14,1,1860],[107,10,1,1861],[107,14,1,1865],[107,15,1,1866,"loggers"],[107,22,1,1873],[107,23,1,1874,"set"],[107,26,1,1877],[107,27,1,1878,"node"],[107,31,1,1882],[107,33,1,1883,"logger"],[107,39,1,1889],[107,40,1,1890],[108,8,1,1890],[109,8,1,1891],[109,15,1,1898],[109,19,1,1902],[109,20,1,1903,"loggers"],[109,27,1,1910],[109,28,1,1911,"get"],[109,31,1,1914],[109,32,1,1915,"node"],[109,36,1,1919],[109,37,1,1920],[110,6,1,1920],[111,4,1,1921],[112,6,1,1921,"key"],[112,9,1,1921],[113,6,1,1921,"value"],[113,11,1,1921],[113,22,1,1921,"shouldProcessLog"],[113,38,1,1937,"shouldProcessLog"],[113,39,1,1938,"level"],[113,44,1,1943],[113,46,1,1944,"node"],[113,50,1,1948],[113,52,1,1957],[114,8,1,1957],[114,17,1,1957,"_len5"],[114,22,1,1957],[114,25,1,1957,"arguments"],[114,34,1,1957],[114,35,1,1957,"length"],[114,41,1,1957],[114,43,1,1952,"args"],[114,47,1,1956],[114,54,1,1956,"Array"],[114,59,1,1956],[114,60,1,1956,"_len5"],[114,65,1,1956],[114,72,1,1956,"_len5"],[114,77,1,1956],[114,88,1,1956,"_key5"],[114,93,1,1956],[114,99,1,1956,"_key5"],[114,104,1,1956],[114,107,1,1956,"_len5"],[114,112,1,1956],[114,114,1,1956,"_key5"],[114,119,1,1956],[115,10,1,1952,"args"],[115,14,1,1956],[115,15,1,1956,"_key5"],[115,20,1,1956],[115,28,1,1956,"arguments"],[115,37,1,1956],[115,38,1,1956,"_key5"],[115,43,1,1956],[116,8,1,1956],[117,8,1,1958],[117,15,1,1965],[117,20,1,1970],[117,21,1,1971],[117,26,1,1974],[117,30,1,1978],[117,31,1,1979,"filter"],[117,37,1,1985],[117,41,1,1987],[117,45,1,1991],[117,46,1,1992,"filter"],[117,52,1,1998],[117,53,1,1998,"apply"],[117,58,1,1998],[117,59,1,1987],[117,63,1,1991],[117,66,1,1999,"level"],[117,71,1,2004],[117,73,1,2005,"node"],[117,77,1,2009],[117,79,1,2009,"concat"],[117,85,1,2009],[117,86,1,2013,"args"],[117,90,1,2017],[117,92,1,2018],[118,6,1,2018],[119,4,1,2019],[120,6,1,2019,"key"],[120,9,1,2019],[121,6,1,2019,"value"],[121,11,1,2019],[121,22,1,2026,"get"],[121,25,1,2029,"get"],[121,26,1,2029],[121,28,1,2031],[122,8,1,2032],[122,15,1,2039,"LogManager"],[122,25,1,2049],[122,26,1,2050,"instance"],[122,34,1,2058],[122,39,1,2061,"LogManager"],[122,49,1,2071],[122,50,1,2072,"instance"],[122,58,1,2080],[122,61,1,2081],[122,65,1,2085,"LogManager"],[122,75,1,2095],[122,76,1,2094],[122,77,1,2095],[122,78,1,2096],[122,80,1,2097,"LogManager"],[122,90,1,2107],[122,91,1,2108,"instance"],[122,99,1,2116],[123,6,1,2116],[124,4,1,2117],[125,2,1,2117],[126,2,1,2118],[126,11,1,2127,"logUnhandledErrors"],[126,29,1,2145,"logUnhandledErrors"],[126,30,1,2145],[126,32,1,2147],[127,4,1,2148],[127,8,1,2151],[127,18,1,2161],[127,22,1,2163],[127,29,1,2170,"window"],[127,35,1,2176],[127,36,1,2177,"addEventListener"],[127,52,1,2193],[127,54,1,2194],[128,6,1,2195],[128,10,1,2201,"defaultLogger"],[128,23,1,2214],[128,26,1,2215,"LogManager"],[128,36,1,2225],[128,37,1,2226,"get"],[128,40,1,2229],[128,41,1,2230],[128,42,1,2231],[128,43,1,2232,"getLogger"],[128,52,1,2241],[128,53,1,2242],[128,54,1,2243],[129,6,1,2244,"window"],[129,12,1,2250],[129,13,1,2251,"addEventListener"],[129,29,1,2267],[129,30,1,2268],[129,37,1,2275],[129,39,1,2277],[129,49,1,2277,"event"],[129,54,1,2282],[130,8,1,2282],[130,12,1,2282,"_event$error"],[130,24,1,2282],[131,8,1,2282],[131,15,1,2284,"defaultLogger"],[131,28,1,2297],[131,29,1,2298,"error"],[131,34,1,2303],[131,36,1,2303,"_event$error"],[131,48,1,2303],[131,51,1,2304,"event"],[131,56,1,2309],[131,57,1,2310,"error"],[131,62,1,2315],[131,74,1,2315,"_event$error"],[131,86,1,2315],[131,89,1,2317,"event"],[131,94,1,2322],[131,95,1,2323,"message"],[131,102,1,2330],[131,103,1,2331],[132,6,1,2331],[132,7,1,2332],[132,8,1,2333],[132,10,1,2334,"window"],[132,16,1,2340],[132,17,1,2341,"addEventListener"],[132,33,1,2357],[132,34,1,2358],[132,54,1,2378],[132,56,1,2380],[132,66,1,2380,"event"],[132,71,1,2385],[133,8,1,2385],[133,15,1,2387,"defaultLogger"],[133,28,1,2400],[133,29,1,2401,"error"],[133,34,1,2406],[133,35,1,2407,"event"],[133,40,1,2412],[133,41,1,2413,"reason"],[133,47,1,2419],[133,48,1,2420],[134,6,1,2420],[134,7,1,2421],[134,8,1,2422],[135,4,1,2422],[136,2,1,2423],[137,2,1,2424],[137,11,1,2433,"registerConsoleLogsListener"],[137,38,1,2460,"registerConsoleLogsListener"],[137,39,1,2460],[137,41,1,2462],[138,4,1,2463,"LogManager"],[138,14,1,2473],[138,15,1,2474,"get"],[138,18,1,2477],[138,19,1,2478],[138,20,1,2479],[138,21,1,2480,"addHandler"],[138,31,1,2490],[138,32,1,2491],[138,44,1,2501],[139,6,1,2502],[139,10,1,2508,"originalLog"],[139,21,1,2519],[139,24,1,2520],[139,25,1,2521],[139,26,1,2522],[140,6,1,2523],[140,13,1,2529],[140,14,1,2530],[140,21,1,2537],[140,23,1,2538],[140,29,1,2544],[140,31,1,2545],[140,36,1,2550],[140,38,1,2551],[140,44,1,2557],[140,46,1,2558],[140,53,1,2565],[140,54,1,2566],[140,55,1,2567,"forEach"],[140,62,1,2574],[140,63,1,2576],[140,73,1,2576,"clientLevel"],[140,84,1,2587],[140,86,1,2589],[141,8,1,2590,"originalLog"],[141,19,1,2601],[141,20,1,2602,"clientLevel"],[141,31,1,2613],[141,32,1,2614],[141,35,1,2615,"console"],[141,42,1,2622],[141,43,1,2623,"clientLevel"],[141,54,1,2634],[141,55,1,2635],[142,8,1,2636],[142,12,1,2642,"runtimeLevel"],[142,24,1,2654],[142,27,1,2655],[142,37,1,2664,"clientLevel"],[142,48,1,2675],[142,50,1,2676],[143,10,1,2677],[143,18,1,2684,"clientLevel"],[143,29,1,2695],[144,12,1,2697],[144,17,1,2701],[144,23,1,2707],[145,14,1,2708],[145,21,1,2714],[145,30,1,2723],[146,12,1,2724],[146,17,1,2728],[146,22,1,2733],[147,14,1,2734],[147,21,1,2740],[147,28,1,2747],[148,12,1,2748],[149,14,1,2756],[149,21,1,2763,"clientLevel"],[149,32,1,2774],[150,10,1,2774],[151,8,1,2775],[151,9,1,2776],[151,10,1,2777,"clientLevel"],[151,21,1,2788],[151,22,1,2789],[152,8,1,2790,"console"],[152,15,1,2797],[152,16,1,2798,"clientLevel"],[152,27,1,2809],[152,28,1,2810],[152,31,1,2811],[153,10,1,2811],[153,14,1,2811,"_LogManager$get$getLo"],[153,35,1,2811],[154,10,1,2811],[154,19,1,2811,"_len6"],[154,24,1,2811],[154,27,1,2811,"arguments"],[154,36,1,2811],[154,37,1,2811,"length"],[154,43,1,2811],[154,45,1,2815,"args"],[154,49,1,2819],[154,56,1,2819,"Array"],[154,61,1,2819],[154,62,1,2819,"_len6"],[154,67,1,2819],[154,70,1,2819,"_key6"],[154,75,1,2819],[154,81,1,2819,"_key6"],[154,86,1,2819],[154,89,1,2819,"_len6"],[154,94,1,2819],[154,96,1,2819,"_key6"],[154,101,1,2819],[155,12,1,2815,"args"],[155,16,1,2819],[155,17,1,2819,"_key6"],[155,22,1,2819],[155,26,1,2819,"arguments"],[155,35,1,2819],[155,36,1,2819,"_key6"],[155,41,1,2819],[156,10,1,2819],[157,10,1,2819],[157,17,1,2822],[157,18,1,2822,"_LogManager$get$getLo"],[157,39,1,2822],[157,42,1,2822,"LogManager"],[157,52,1,2832],[157,53,1,2833,"get"],[157,56,1,2836],[157,57,1,2837],[157,58,1,2838],[157,59,1,2839,"getLogger"],[157,68,1,2848],[157,69,1,2849],[157,70,1,2850],[157,72,1,2851,"log"],[157,75,1,2854],[157,76,1,2854,"apply"],[157,81,1,2854],[157,82,1,2854,"_LogManager$get$getLo"],[157,103,1,2854],[157,106,1,2855,"runtimeLevel"],[157,118,1,2867],[157,120,1,2867,"concat"],[157,126,1,2867],[157,127,1,2871,"args"],[157,131,1,2875],[157,133,1,2876],[158,8,1,2876],[159,6,1,2876],[159,7,1,2878],[159,8,1,2879],[159,10,1,2880],[159,20,1,2881,"runtimeLevel"],[159,32,1,2893],[159,34,1,2894,"node"],[159,38,1,2898],[159,40,1,2909],[160,8,1,2909],[160,12,1,2909,"_originalLog$clientLe"],[160,33,1,2909],[161,8,1,2910],[161,12,1,2916,"clientLevel"],[161,23,1,2927],[161,26,1,2928],[161,36,1,2937,"runtimeLevel"],[161,48,1,2949],[161,50,1,2950],[162,10,1,2951],[162,18,1,2958,"runtimeLevel"],[162,30,1,2970],[163,12,1,2972],[163,17,1,2976],[163,24,1,2983],[164,14,1,2984],[164,21,1,2990],[164,28,1,2997],[165,12,1,2998],[165,17,1,3002],[165,27,1,3012],[166,14,1,3013],[166,21,1,3019],[166,28,1,3026],[167,12,1,3027],[167,17,1,3031],[167,26,1,3040],[168,14,1,3041],[168,21,1,3047],[168,27,1,3053],[169,12,1,3054],[170,14,1,3062],[170,21,1,3069,"runtimeLevel"],[170,33,1,3081],[171,10,1,3081],[172,8,1,3082],[172,9,1,3083],[172,10,1,3084,"runtimeLevel"],[172,22,1,3096],[172,23,1,3097],[173,8,1,3098],[173,12,1,3101],[173,17,1,3106],[173,18,1,3107],[173,23,1,3110,"clientLevel"],[173,34,1,3121],[173,36,1,3122],[174,8,1,3129],[174,17,1,3129,"_len7"],[174,22,1,3129],[174,25,1,3129,"arguments"],[174,34,1,3129],[174,35,1,3129,"length"],[174,41,1,3129],[174,43,1,2902,"args"],[174,47,1,2906],[174,54,1,2906,"Array"],[174,59,1,2906],[174,60,1,2906,"_len7"],[174,65,1,2906],[174,72,1,2906,"_len7"],[174,77,1,2906],[174,88,1,2906,"_key7"],[174,93,1,2906],[174,99,1,2906,"_key7"],[174,104,1,2906],[174,107,1,2906,"_len7"],[174,112,1,2906],[174,114,1,2906,"_key7"],[174,119,1,2906],[175,10,1,2902,"args"],[175,14,1,2906],[175,15,1,2906,"_key7"],[175,20,1,2906],[175,28,1,2906,"arguments"],[175,37,1,2906],[175,38,1,2906,"_key7"],[175,43,1,2906],[176,8,1,2906],[177,8,1,3129],[177,12,1,3135,"firstArg"],[177,20,1,3143],[177,23,1,3153,"args"],[177,27,1,3157],[178,10,1,3147,"rest"],[178,14,1,3151],[178,17,1,3153,"args"],[178,21,1,3157],[178,22,1,3157,"slice"],[178,27,1,3157],[179,10,1,3158,"argsToPass"],[179,20,1,3168],[179,23,1,3169],[179,31,1,3177],[179,35,1,3179],[179,42,1,3186,"firstArg"],[179,50,1,3194],[179,54,1,3196],[179,58,1,3200,"node"],[179,62,1,3204],[179,67,1,3209,"firstArg"],[179,75,1,3217],[179,77,1,3219],[179,79,1,3219,"concat"],[179,85,1,3219],[179,90,1,3219,"_toConsumableArray2"],[179,109,1,3219],[179,110,1,3219,"default"],[179,117,1,3219],[179,119,1,3223,"rest"],[179,123,1,3227],[179,129,1,3230],[179,133,1,3234,"node"],[179,137,1,3238],[179,140,1,3241],[179,142,1,3241,"concat"],[179,148,1,3241],[179,149,1,3245,"args"],[179,153,1,3249],[179,154,1,3250],[180,8,1,3251],[180,9,1,3251,"_originalLog$clientLe"],[180,30,1,3251],[180,33,1,3251,"originalLog"],[180,44,1,3262],[180,45,1,3263,"clientLevel"],[180,56,1,3274],[180,57,1,3275],[180,59,1,3276,"call"],[180,63,1,3280],[180,64,1,3280,"apply"],[180,69,1,3280],[180,70,1,3280,"_originalLog$clientLe"],[180,91,1,3280],[180,94,1,3281,"console"],[180,101,1,3288],[180,103,1,3288,"concat"],[180,109,1,3288],[180,114,1,3288,"_toConsumableArray2"],[180,133,1,3288],[180,134,1,3288,"default"],[180,141,1,3288],[180,143,1,3292,"argsToPass"],[180,153,1,3302],[180,156,1,3303],[181,6,1,3303],[181,7,1,3304],[182,4,1,3304],[182,5,1,3305],[182,6,1,3306],[182,7,1,3307],[182,8,1,3308],[183,2,1,3308],[184,2,1,3309],[184,6,1,3315,"defaultLogFilter"],[184,22,1,3331],[184,25,1,3331,"exports"],[184,32,1,3331],[184,33,1,3331,"d"],[184,34,1,3331],[184,37,1,3332],[184,46,1,3315,"defaultLogFilter"],[184,62,1,3331,"defaultLogFilter"],[184,63,1,3333,"_level"],[184,69,1,3339],[184,71,1,3340,"_node"],[184,76,1,3345],[185,4,1,3345],[185,13,1,3345,"_len8"],[185,18,1,3345],[185,21,1,3345,"arguments"],[185,30,1,3345],[185,31,1,3345,"length"],[185,37,1,3345],[185,39,1,3349,"args"],[185,43,1,3353],[185,50,1,3353,"Array"],[185,55,1,3353],[185,56,1,3353,"_len8"],[185,61,1,3353],[185,68,1,3353,"_len8"],[185,73,1,3353],[185,84,1,3353,"_key8"],[185,89,1,3353],[185,95,1,3353,"_key8"],[185,100,1,3353],[185,103,1,3353,"_len8"],[185,108,1,3353],[185,110,1,3353,"_key8"],[185,115,1,3353],[186,6,1,3349,"args"],[186,10,1,3353],[186,11,1,3353,"_key8"],[186,16,1,3353],[186,24,1,3353,"arguments"],[186,33,1,3353],[186,34,1,3353,"_key8"],[186,39,1,3353],[187,4,1,3353],[188,4,1,3353],[188,11,1,3356],[188,12,1,3357,"args"],[188,16,1,3361],[188,17,1,3362,"some"],[188,21,1,3366],[188,22,1,3368],[188,32,1,3368,"a"],[188,33,1,3369],[189,6,1,3369],[189,13,1,3371],[189,21,1,3379],[189,25,1,3381],[189,32,1,3388,"a"],[189,33,1,3389],[189,37,1,3391,"a"],[189,38,1,3392],[189,39,1,3393,"includes"],[189,47,1,3401],[189,48,1,3402],[189,68,1,3422],[189,69,1,3423],[190,4,1,3423],[190,5,1,3424],[190,6,1,3425],[191,2,1,3425],[192,0,1,3426],[192,3]],"functionMap":{"names":["<global>","LogManager","LogManager#constructor","processLog","logHandlers.forEach$argument_0","processLogDebounced","setTimeout$argument_0","delayedLogs.forEach$argument_0","LogManager#addHandler","LogManager#removeHandler","LogManager#getLogFilter","LogManager#setLogFilter","LogManager#getLogger","createLogger","logLevels.map$argument_0","level","Object.assign$argument_2.log","LogManager#shouldProcessLog","LogManager.get","logUnhandledErrors","window.addEventListener$argument_1","registerConsoleLogsListener","<anonymous>","forEach$argument_0","console.clientLevel","defaultLogFilter","args.some$argument_0"],"mappings":"AAA,yWC,iBC,2FC,4FC,oCD,GD,0BG,uMC,+BC,uCH,qEG,GD,uBD,QH,CM,mDC,0IC,kCC,8CC,2SC,kDC,iBC,uED,ED,QG,oDH,ED,wJK,kGC,kGjB,CkB,+JC,sDD,iDC,wCD,IE,mEC,qFC,+ED,yHC,mCC,iED,CD,4aD,IrB,uByB,oCC,uDD,EzB"}},"type":"js/module"}]}