{"dependencies":[{"name":"./lib/markup","data":{"asyncType":null,"locs":[{"start":{"line":8,"column":14,"index":156},"end":{"line":8,"column":37,"index":179}},{"start":{"line":8,"column":14,"index":156},"end":{"line":8,"column":37,"index":179}},{"start":{"line":8,"column":14,"index":156},"end":{"line":8,"column":37,"index":179}},{"start":{"line":8,"column":14,"index":156},"end":{"line":8,"column":37,"index":179}},{"start":{"line":8,"column":14,"index":156},"end":{"line":8,"column":37,"index":179}},{"start":{"line":8,"column":14,"index":156},"end":{"line":8,"column":37,"index":179}}],"key":"0OASQXKiBa31R599Q71JZrfBlUk="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n  exports.default = exports.serialize = exports.test = void 0;\n  /**\n   * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  var ELEMENT_NODE = 1;\n  var TEXT_NODE = 3;\n  var COMMENT_NODE = 8;\n  var FRAGMENT_NODE = 11;\n  var ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\n  var testNode = function testNode(val) {\n    var _val$hasAttribute;\n    var constructorName = val.constructor.name;\n    var nodeType = val.nodeType,\n      tagName = val.tagName;\n    var isCustomElement = typeof tagName === 'string' && tagName.includes('-') || ((_val$hasAttribute = val.hasAttribute) === null || _val$hasAttribute === void 0 ? void 0 : _val$hasAttribute.call(val, 'is'));\n    return nodeType === ELEMENT_NODE && (ELEMENT_REGEXP.test(constructorName) || isCustomElement) || nodeType === TEXT_NODE && constructorName === 'Text' || nodeType === COMMENT_NODE && constructorName === 'Comment' || nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment';\n  };\n  var test = function test(val) {\n    var _val$constructor;\n    return (val === null || val === void 0 ? void 0 : (_val$constructor = val.constructor) === null || _val$constructor === void 0 ? void 0 : _val$constructor.name) && testNode(val);\n  };\n  exports.test = test;\n  function nodeIsText(node) {\n    return node.nodeType === TEXT_NODE;\n  }\n  function nodeIsComment(node) {\n    return node.nodeType === COMMENT_NODE;\n  }\n  function nodeIsFragment(node) {\n    return node.nodeType === FRAGMENT_NODE;\n  }\n  var serialize = function serialize(node, config, indentation, depth, refs, printer) {\n    if (nodeIsText(node)) {\n      return (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printText)(node.data, config);\n    }\n    if (nodeIsComment(node)) {\n      return (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printComment)(node.data, config);\n    }\n    var type = nodeIsFragment(node) ? `DocumentFragment` : node.tagName.toLowerCase();\n    if (++depth > config.maxDepth) {\n      return (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printElementAsLeaf)(type, config);\n    }\n    return (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printElement)(type, (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printProps)(nodeIsFragment(node) ? [] : Array.from(node.attributes).map(function (attr) {\n      return attr.name;\n    }).sort(), nodeIsFragment(node) ? {} : Array.from(node.attributes).reduce(function (props, attribute) {\n      props[attribute.name] = attribute.value;\n      return props;\n    }, {}), config, indentation + config.indent, depth, refs, printer), (0, _$$_REQUIRE(_dependencyMap[0], \"./lib/markup\").printChildren)(Array.prototype.slice.call(node.childNodes || node.children), config, indentation + config.indent, depth, refs, printer), config, indentation);\n  };\n  exports.serialize = serialize;\n  var plugin = {\n    serialize: serialize,\n    test: test\n  };\n  var _default = plugin;\n  exports.default = _default;\n});","lineCount":66,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,4,2,"value"],[5,9,4,7],[5,11,4,9],[6,2,5,0],[6,3,5,1],[6,4,5,2],[7,2,6,0,"exports"],[7,9,6,7],[7,10,6,8,"default"],[7,17,6,15],[7,20,6,18,"exports"],[7,27,6,25],[7,28,6,26,"serialize"],[7,37,6,35],[7,40,6,38,"exports"],[7,47,6,45],[7,48,6,46,"test"],[7,52,6,50],[7,55,6,53],[7,60,6,58],[7,61,6,59],[8,2,10,0],[9,0,11,0],[10,0,12,0],[11,0,13,0],[12,0,14,0],[13,0,15,0],[14,2,16,0],[14,6,16,6,"ELEMENT_NODE"],[14,18,16,18],[14,21,16,21],[14,22,16,22],[15,2,17,0],[15,6,17,6,"TEXT_NODE"],[15,15,17,15],[15,18,17,18],[15,19,17,19],[16,2,18,0],[16,6,18,6,"COMMENT_NODE"],[16,18,18,18],[16,21,18,21],[16,22,18,22],[17,2,19,0],[17,6,19,6,"FRAGMENT_NODE"],[17,19,19,19],[17,22,19,22],[17,24,19,24],[18,2,20,0],[18,6,20,6,"ELEMENT_REGEXP"],[18,20,20,20],[18,23,20,23],[18,50,20,50],[19,2,22,0],[19,6,22,6,"testNode"],[19,14,22,14],[19,17,22,17],[19,26,22,6,"testNode"],[19,34,22,14,"testNode"],[19,35,22,17,"val"],[19,38,22,20],[19,40,22,24],[20,4,23,2],[20,8,23,6,"_val$hasAttribute"],[20,25,23,23],[21,4,25,2],[21,8,25,8,"constructorName"],[21,23,25,23],[21,26,25,26,"val"],[21,29,25,29],[21,30,25,30,"constructor"],[21,41,25,41],[21,42,25,42,"name"],[21,46,25,46],[22,4,26,2],[22,8,26,9,"nodeType"],[22,16,26,17],[22,19,26,30,"val"],[22,22,26,33],[22,23,26,9,"nodeType"],[22,31,26,17],[23,6,26,19,"tagName"],[23,13,26,26],[23,16,26,30,"val"],[23,19,26,33],[23,20,26,19,"tagName"],[23,27,26,26],[24,4,27,2],[24,8,27,8,"isCustomElement"],[24,23,27,23],[24,26,28,5],[24,33,28,12,"tagName"],[24,40,28,19],[24,45,28,24],[24,53,28,32],[24,57,28,36,"tagName"],[24,64,28,43],[24,65,28,44,"includes"],[24,73,28,52],[24,74,28,53],[24,77,28,56],[24,78,28,57],[24,83,29,5],[24,84,29,6,"_val$hasAttribute"],[24,101,29,23],[24,104,29,26,"val"],[24,107,29,29],[24,108,29,30,"hasAttribute"],[24,120,29,42],[24,126,29,48],[24,130,29,52],[24,134,30,4,"_val$hasAttribute"],[24,151,30,21],[24,156,30,26],[24,161,30,31],[24,162,30,32],[24,165,31,8],[24,170,31,13],[24,171,31,14],[24,174,32,8,"_val$hasAttribute"],[24,191,32,25],[24,192,32,26,"call"],[24,196,32,30],[24,197,32,31,"val"],[24,200,32,34],[24,202,32,36],[24,206,32,40],[24,207,32,41],[24,208,32,42],[25,4,33,2],[25,11,34,5,"nodeType"],[25,19,34,13],[25,24,34,18,"ELEMENT_NODE"],[25,36,34,30],[25,41,35,7,"ELEMENT_REGEXP"],[25,55,35,21],[25,56,35,22,"test"],[25,60,35,26],[25,61,35,27,"constructorName"],[25,76,35,42],[25,77,35,43],[25,81,35,47,"isCustomElement"],[25,96,35,62],[25,97,35,63],[25,101,36,5,"nodeType"],[25,109,36,13],[25,114,36,18,"TEXT_NODE"],[25,123,36,27],[25,127,36,31,"constructorName"],[25,142,36,46],[25,147,36,51],[25,153,36,58],[25,157,37,5,"nodeType"],[25,165,37,13],[25,170,37,18,"COMMENT_NODE"],[25,182,37,30],[25,186,37,34,"constructorName"],[25,201,37,49],[25,206,37,54],[25,215,37,64],[25,219,38,5,"nodeType"],[25,227,38,13],[25,232,38,18,"FRAGMENT_NODE"],[25,245,38,31],[25,249,38,35,"constructorName"],[25,264,38,50],[25,269,38,55],[25,287,38,74],[26,2,40,0],[26,3,40,1],[27,2,42,0],[27,6,42,6,"test"],[27,10,42,10],[27,13,42,13],[27,22,42,6,"test"],[27,26,42,10,"test"],[27,27,42,13,"val"],[27,30,42,16],[27,32,42,20],[28,4,43,2],[28,8,43,6,"_val$constructor"],[28,24,43,22],[29,4,45,2],[29,11,46,4],[29,12,46,5,"val"],[29,15,46,8],[29,20,46,13],[29,24,46,17],[29,28,46,21,"val"],[29,31,46,24],[29,36,46,29],[29,41,46,34],[29,42,46,35],[29,45,47,8],[29,50,47,13],[29,51,47,14],[29,54,48,8],[29,55,48,9,"_val$constructor"],[29,71,48,25],[29,74,48,28,"val"],[29,77,48,31],[29,78,48,32,"constructor"],[29,89,48,43],[29,95,48,49],[29,99,48,53],[29,103,49,8,"_val$constructor"],[29,119,49,24],[29,124,49,29],[29,129,49,34],[29,130,49,35],[29,133,50,8],[29,138,50,13],[29,139,50,14],[29,142,51,8,"_val$constructor"],[29,158,51,24],[29,159,51,25,"name"],[29,163,51,29],[29,168,51,34,"testNode"],[29,176,51,42],[29,177,51,43,"val"],[29,180,51,46],[29,181,51,47],[30,2,53,0],[30,3,53,1],[31,2,55,0,"exports"],[31,9,55,7],[31,10,55,8,"test"],[31,14,55,12],[31,17,55,15,"test"],[31,21,55,19],[32,2,57,0],[32,11,57,9,"nodeIsText"],[32,21,57,19,"nodeIsText"],[32,22,57,20,"node"],[32,26,57,24],[32,28,57,26],[33,4,58,2],[33,11,58,9,"node"],[33,15,58,13],[33,16,58,14,"nodeType"],[33,24,58,22],[33,29,58,27,"TEXT_NODE"],[33,38,58,36],[34,2,59,0],[35,2,61,0],[35,11,61,9,"nodeIsComment"],[35,24,61,22,"nodeIsComment"],[35,25,61,23,"node"],[35,29,61,27],[35,31,61,29],[36,4,62,2],[36,11,62,9,"node"],[36,15,62,13],[36,16,62,14,"nodeType"],[36,24,62,22],[36,29,62,27,"COMMENT_NODE"],[36,41,62,39],[37,2,63,0],[38,2,65,0],[38,11,65,9,"nodeIsFragment"],[38,25,65,23,"nodeIsFragment"],[38,26,65,24,"node"],[38,30,65,28],[38,32,65,30],[39,4,66,2],[39,11,66,9,"node"],[39,15,66,13],[39,16,66,14,"nodeType"],[39,24,66,22],[39,29,66,27,"FRAGMENT_NODE"],[39,42,66,40],[40,2,67,0],[41,2,69,0],[41,6,69,6,"serialize"],[41,15,69,15],[41,18,69,18],[41,27,69,6,"serialize"],[41,36,69,15,"serialize"],[41,37,69,19,"node"],[41,41,69,23],[41,43,69,25,"config"],[41,49,69,31],[41,51,69,33,"indentation"],[41,62,69,44],[41,64,69,46,"depth"],[41,69,69,51],[41,71,69,53,"refs"],[41,75,69,57],[41,77,69,59,"printer"],[41,84,69,66],[41,86,69,71],[42,4,70,2],[42,8,70,6,"nodeIsText"],[42,18,70,16],[42,19,70,17,"node"],[42,23,70,21],[42,24,70,22],[42,26,70,24],[43,6,71,4],[43,13,71,11],[43,14,71,12],[43,15,71,13],[43,17,71,15,"_$$_REQUIRE"],[43,28,71,15],[43,29,71,15,"_dependencyMap"],[43,43,71,15],[43,64,71,23,"printText"],[43,73,71,32],[43,75,71,34,"node"],[43,79,71,38],[43,80,71,39,"data"],[43,84,71,43],[43,86,71,45,"config"],[43,92,71,51],[43,93,71,52],[44,4,72,2],[45,4,74,2],[45,8,74,6,"nodeIsComment"],[45,21,74,19],[45,22,74,20,"node"],[45,26,74,24],[45,27,74,25],[45,29,74,27],[46,6,75,4],[46,13,75,11],[46,14,75,12],[46,15,75,13],[46,17,75,15,"_$$_REQUIRE"],[46,28,75,15],[46,29,75,15,"_dependencyMap"],[46,43,75,15],[46,64,75,23,"printComment"],[46,76,75,35],[46,78,75,37,"node"],[46,82,75,41],[46,83,75,42,"data"],[46,87,75,46],[46,89,75,48,"config"],[46,95,75,54],[46,96,75,55],[47,4,76,2],[48,4,78,2],[48,8,78,8,"type"],[48,12,78,12],[48,15,78,15,"nodeIsFragment"],[48,29,78,29],[48,30,78,30,"node"],[48,34,78,34],[48,35,78,35],[48,38,79,6],[48,56,79,24],[48,59,80,6,"node"],[48,63,80,10],[48,64,80,11,"tagName"],[48,71,80,18],[48,72,80,19,"toLowerCase"],[48,83,80,30],[48,84,80,31],[48,85,80,32],[49,4,82,2],[49,8,82,6],[49,10,82,8,"depth"],[49,15,82,13],[49,18,82,16,"config"],[49,24,82,22],[49,25,82,23,"maxDepth"],[49,33,82,31],[49,35,82,33],[50,6,83,4],[50,13,83,11],[50,14,83,12],[50,15,83,13],[50,17,83,15,"_$$_REQUIRE"],[50,28,83,15],[50,29,83,15,"_dependencyMap"],[50,43,83,15],[50,64,83,23,"printElementAsLeaf"],[50,82,83,41],[50,84,83,43,"type"],[50,88,83,47],[50,90,83,49,"config"],[50,96,83,55],[50,97,83,56],[51,4,84,2],[52,4,86,2],[52,11,86,9],[52,12,86,10],[52,13,86,11],[52,15,86,13,"_$$_REQUIRE"],[52,26,86,13],[52,27,86,13,"_dependencyMap"],[52,41,86,13],[52,62,86,21,"printElement"],[52,74,86,33],[52,76,87,4,"type"],[52,80,87,8],[52,82,88,4],[52,83,88,5],[52,84,88,6],[52,86,88,8,"_$$_REQUIRE"],[52,97,88,8],[52,98,88,8,"_dependencyMap"],[52,112,88,8],[52,133,88,16,"printProps"],[52,143,88,26],[52,145,89,6,"nodeIsFragment"],[52,159,89,20],[52,160,89,21,"node"],[52,164,89,25],[52,165,89,26],[52,168,90,10],[52,170,90,12],[52,173,91,10,"Array"],[52,178,91,15],[52,179,91,16,"from"],[52,183,91,20],[52,184,91,21,"node"],[52,188,91,25],[52,189,91,26,"attributes"],[52,199,91,36],[52,200,91,37],[52,201,92,13,"map"],[52,204,92,16],[52,205,92,17],[52,215,92,17,"attr"],[52,219,92,21],[53,6,92,21],[53,13,92,25,"attr"],[53,17,92,29],[53,18,92,30,"name"],[53,22,92,34],[54,4,92,34],[54,6,92,35],[54,7,93,13,"sort"],[54,11,93,17],[54,12,93,18],[54,13,93,19],[54,15,94,6,"nodeIsFragment"],[54,29,94,20],[54,30,94,21,"node"],[54,34,94,25],[54,35,94,26],[54,38,95,10],[54,39,95,11],[54,40,95,12],[54,43,96,10,"Array"],[54,48,96,15],[54,49,96,16,"from"],[54,53,96,20],[54,54,96,21,"node"],[54,58,96,25],[54,59,96,26,"attributes"],[54,69,96,36],[54,70,96,37],[54,71,96,38,"reduce"],[54,77,96,44],[54,78,96,45],[54,88,96,46,"props"],[54,93,96,51],[54,95,96,53,"attribute"],[54,104,96,62],[54,106,96,67],[55,6,97,12,"props"],[55,11,97,17],[55,12,97,18,"attribute"],[55,21,97,27],[55,22,97,28,"name"],[55,26,97,32],[55,27,97,33],[55,30,97,36,"attribute"],[55,39,97,45],[55,40,97,46,"value"],[55,45,97,51],[56,6,98,12],[56,13,98,19,"props"],[56,18,98,24],[57,4,99,10],[57,5,99,11],[57,7,99,13],[57,8,99,14],[57,9,99,15],[57,10,99,16],[57,12,100,6,"config"],[57,18,100,12],[57,20,101,6,"indentation"],[57,31,101,17],[57,34,101,20,"config"],[57,40,101,26],[57,41,101,27,"indent"],[57,47,101,33],[57,49,102,6,"depth"],[57,54,102,11],[57,56,103,6,"refs"],[57,60,103,10],[57,62,104,6,"printer"],[57,69,105,4],[57,70,105,5],[57,72,106,4],[57,73,106,5],[57,74,106,6],[57,76,106,8,"_$$_REQUIRE"],[57,87,106,8],[57,88,106,8,"_dependencyMap"],[57,102,106,8],[57,123,106,16,"printChildren"],[57,136,106,29],[57,138,107,6,"Array"],[57,143,107,11],[57,144,107,12,"prototype"],[57,153,107,21],[57,154,107,22,"slice"],[57,159,107,27],[57,160,107,28,"call"],[57,164,107,32],[57,165,107,33,"node"],[57,169,107,37],[57,170,107,38,"childNodes"],[57,180,107,48],[57,184,107,52,"node"],[57,188,107,56],[57,189,107,57,"children"],[57,197,107,65],[57,198,107,66],[57,200,108,6,"config"],[57,206,108,12],[57,208,109,6,"indentation"],[57,219,109,17],[57,222,109,20,"config"],[57,228,109,26],[57,229,109,27,"indent"],[57,235,109,33],[57,237,110,6,"depth"],[57,242,110,11],[57,244,111,6,"refs"],[57,248,111,10],[57,250,112,6,"printer"],[57,257,113,4],[57,258,113,5],[57,260,114,4,"config"],[57,266,114,10],[57,268,115,4,"indentation"],[57,279,116,2],[57,280,116,3],[58,2,117,0],[58,3,117,1],[59,2,119,0,"exports"],[59,9,119,7],[59,10,119,8,"serialize"],[59,19,119,17],[59,22,119,20,"serialize"],[59,31,119,29],[60,2,120,0],[60,6,120,6,"plugin"],[60,12,120,12],[60,15,120,15],[61,4,121,2,"serialize"],[61,13,121,11],[61,15,121,2,"serialize"],[61,24,121,11],[62,4,122,2,"test"],[62,8,122,6],[62,10,122,2,"test"],[63,2,123,0],[63,3,123,1],[64,2,124,0],[64,6,124,4,"_default"],[64,14,124,12],[64,17,124,15,"plugin"],[64,23,124,21],[65,2,125,0,"exports"],[65,9,125,7],[65,10,125,8,"default"],[65,17,125,15],[65,20,125,18,"_default"],[65,28,125,26],[66,0,125,27],[66,3]],"functionMap":{"names":["<global>","testNode","test","nodeIsText","nodeIsComment","nodeIsFragment","serialize","Array.from.map$argument_0","Array.from.reduce$argument_0"],"mappings":"AAA;iBCqB;CDkB;aEE;CFW;AGI;CHE;AIE;CJE;AKE;CLE;kBME;iBCuB,iBD;6CEI;WFG;CNkB"}},"type":"js/module"}]}