{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n  var aStackPool = [];\n  var bStackPool = [];\n  /**\n   * Checks if two values are equal. Values may be primitives, arrays, or objects.\n   * Returns true if both arguments have the same keys and values.\n   *\n   * @see http://underscorejs.org\n   * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.\n   * @license MIT\n   */\n\n  function areEqual(a, b) {\n    var aStack = aStackPool.length ? aStackPool.pop() : [];\n    var bStack = bStackPool.length ? bStackPool.pop() : [];\n    var result = eq(a, b, aStack, bStack);\n    aStack.length = 0;\n    bStack.length = 0;\n    aStackPool.push(aStack);\n    bStackPool.push(bStack);\n    return result;\n  }\n  function eq(a, b, aStack, bStack) {\n    if (a === b) {\n      // Identical objects are equal. `0 === -0`, but they aren't identical.\n      return a !== 0 || 1 / a == 1 / b;\n    }\n    if (a == null || b == null) {\n      // a or b can be `null` or `undefined`\n      return false;\n    }\n    if (typeof a != 'object' || typeof b != 'object') {\n      return false;\n    }\n    var objToStr = Object.prototype.toString;\n    var className = objToStr.call(a);\n    if (className != objToStr.call(b)) {\n      return false;\n    }\n    switch (className) {\n      case '[object String]':\n        return a == String(b);\n      case '[object Number]':\n        return isNaN(a) || isNaN(b) ? false : a == Number(b);\n      case '[object Date]':\n      case '[object Boolean]':\n        return +a == +b;\n      case '[object RegExp]':\n        return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;\n    } // Assume equality for cyclic structures.\n\n    var length = aStack.length;\n    while (length--) {\n      if (aStack[length] == a) {\n        return bStack[length] == b;\n      }\n    }\n    aStack.push(a);\n    bStack.push(b);\n    var size = 0; // Recursively compare objects and arrays.\n\n    if (className === '[object Array]') {\n      size = a.length;\n      if (size !== b.length) {\n        return false;\n      } // Deep compare the contents, ignoring non-numeric properties.\n\n      while (size--) {\n        if (!eq(a[size], b[size], aStack, bStack)) {\n          return false;\n        }\n      }\n    } else {\n      if (a.constructor !== b.constructor) {\n        return false;\n      }\n      if (a.hasOwnProperty('valueOf') && b.hasOwnProperty('valueOf')) {\n        return a.valueOf() == b.valueOf();\n      }\n      var keys = Object.keys(a);\n      if (keys.length != Object.keys(b).length) {\n        return false;\n      }\n      for (var i = 0; i < keys.length; i++) {\n        if (!eq(a[keys[i]], b[keys[i]], aStack, bStack)) {\n          return false;\n        }\n      }\n    }\n    aStack.pop();\n    bStack.pop();\n    return true;\n  }\n  module.exports = areEqual;\n});","lineCount":105,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,2,11,0],[12,6,11,4,"aStackPool"],[12,16,11,14],[12,19,11,17],[12,21,11,19],[13,2,12,0],[13,6,12,4,"bStackPool"],[13,16,12,14],[13,19,12,17],[13,21,12,19],[14,2,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[23,2,22,0],[23,11,22,9,"areEqual"],[23,19,22,17,"areEqual"],[23,20,22,18,"a"],[23,21,22,19],[23,23,22,21,"b"],[23,24,22,22],[23,26,22,24],[24,4,23,2],[24,8,23,6,"aStack"],[24,14,23,12],[24,17,23,15,"aStackPool"],[24,27,23,25],[24,28,23,26,"length"],[24,34,23,32],[24,37,23,35,"aStackPool"],[24,47,23,45],[24,48,23,46,"pop"],[24,51,23,49],[24,52,23,50],[24,53,23,51],[24,56,23,54],[24,58,23,56],[25,4,24,2],[25,8,24,6,"bStack"],[25,14,24,12],[25,17,24,15,"bStackPool"],[25,27,24,25],[25,28,24,26,"length"],[25,34,24,32],[25,37,24,35,"bStackPool"],[25,47,24,45],[25,48,24,46,"pop"],[25,51,24,49],[25,52,24,50],[25,53,24,51],[25,56,24,54],[25,58,24,56],[26,4,25,2],[26,8,25,6,"result"],[26,14,25,12],[26,17,25,15,"eq"],[26,19,25,17],[26,20,25,18,"a"],[26,21,25,19],[26,23,25,21,"b"],[26,24,25,22],[26,26,25,24,"aStack"],[26,32,25,30],[26,34,25,32,"bStack"],[26,40,25,38],[26,41,25,39],[27,4,26,2,"aStack"],[27,10,26,8],[27,11,26,9,"length"],[27,17,26,15],[27,20,26,18],[27,21,26,19],[28,4,27,2,"bStack"],[28,10,27,8],[28,11,27,9,"length"],[28,17,27,15],[28,20,27,18],[28,21,27,19],[29,4,28,2,"aStackPool"],[29,14,28,12],[29,15,28,13,"push"],[29,19,28,17],[29,20,28,18,"aStack"],[29,26,28,24],[29,27,28,25],[30,4,29,2,"bStackPool"],[30,14,29,12],[30,15,29,13,"push"],[30,19,29,17],[30,20,29,18,"bStack"],[30,26,29,24],[30,27,29,25],[31,4,30,2],[31,11,30,9,"result"],[31,17,30,15],[32,2,31,0],[33,2,33,0],[33,11,33,9,"eq"],[33,13,33,11,"eq"],[33,14,33,12,"a"],[33,15,33,13],[33,17,33,15,"b"],[33,18,33,16],[33,20,33,18,"aStack"],[33,26,33,24],[33,28,33,26,"bStack"],[33,34,33,32],[33,36,33,34],[34,4,34,2],[34,8,34,6,"a"],[34,9,34,7],[34,14,34,12,"b"],[34,15,34,13],[34,17,34,15],[35,6,35,4],[36,6,36,4],[36,13,36,11,"a"],[36,14,36,12],[36,19,36,17],[36,20,36,18],[36,24,36,22],[36,25,36,23],[36,28,36,26,"a"],[36,29,36,27],[36,33,36,31],[36,34,36,32],[36,37,36,35,"b"],[36,38,36,36],[37,4,37,2],[38,4,39,2],[38,8,39,6,"a"],[38,9,39,7],[38,13,39,11],[38,17,39,15],[38,21,39,19,"b"],[38,22,39,20],[38,26,39,24],[38,30,39,28],[38,32,39,30],[39,6,40,4],[40,6,41,4],[40,13,41,11],[40,18,41,16],[41,4,42,2],[42,4,44,2],[42,8,44,6],[42,15,44,13,"a"],[42,16,44,14],[42,20,44,18],[42,28,44,26],[42,32,44,30],[42,39,44,37,"b"],[42,40,44,38],[42,44,44,42],[42,52,44,50],[42,54,44,52],[43,6,45,4],[43,13,45,11],[43,18,45,16],[44,4,46,2],[45,4,48,2],[45,8,48,6,"objToStr"],[45,16,48,14],[45,19,48,17,"Object"],[45,25,48,23],[45,26,48,24,"prototype"],[45,35,48,33],[45,36,48,34,"toString"],[45,44,48,42],[46,4,49,2],[46,8,49,6,"className"],[46,17,49,15],[46,20,49,18,"objToStr"],[46,28,49,26],[46,29,49,27,"call"],[46,33,49,31],[46,34,49,32,"a"],[46,35,49,33],[46,36,49,34],[47,4,51,2],[47,8,51,6,"className"],[47,17,51,15],[47,21,51,19,"objToStr"],[47,29,51,27],[47,30,51,28,"call"],[47,34,51,32],[47,35,51,33,"b"],[47,36,51,34],[47,37,51,35],[47,39,51,37],[48,6,52,4],[48,13,52,11],[48,18,52,16],[49,4,53,2],[50,4,55,2],[50,12,55,10,"className"],[50,21,55,19],[51,6,56,4],[51,11,56,9],[51,28,56,26],[52,8,57,6],[52,15,57,13,"a"],[52,16,57,14],[52,20,57,18,"String"],[52,26,57,24],[52,27,57,25,"b"],[52,28,57,26],[52,29,57,27],[53,6,59,4],[53,11,59,9],[53,28,59,26],[54,8,60,6],[54,15,60,13,"isNaN"],[54,20,60,18],[54,21,60,19,"a"],[54,22,60,20],[54,23,60,21],[54,27,60,25,"isNaN"],[54,32,60,30],[54,33,60,31,"b"],[54,34,60,32],[54,35,60,33],[54,38,60,36],[54,43,60,41],[54,46,60,44,"a"],[54,47,60,45],[54,51,60,49,"Number"],[54,57,60,55],[54,58,60,56,"b"],[54,59,60,57],[54,60,60,58],[55,6,62,4],[55,11,62,9],[55,26,62,24],[56,6,63,4],[56,11,63,9],[56,29,63,27],[57,8,64,6],[57,15,64,13],[57,16,64,14,"a"],[57,17,64,15],[57,21,64,19],[57,22,64,20,"b"],[57,23,64,21],[58,6,66,4],[58,11,66,9],[58,28,66,26],[59,8,67,6],[59,15,67,13,"a"],[59,16,67,14],[59,17,67,15,"source"],[59,23,67,21],[59,27,67,25,"b"],[59,28,67,26],[59,29,67,27,"source"],[59,35,67,33],[59,39,67,37,"a"],[59,40,67,38],[59,41,67,39,"global"],[59,47,67,45],[59,51,67,49,"b"],[59,52,67,50],[59,53,67,51,"global"],[59,59,67,57],[59,63,67,61,"a"],[59,64,67,62],[59,65,67,63,"multiline"],[59,74,67,72],[59,78,67,76,"b"],[59,79,67,77],[59,80,67,78,"multiline"],[59,89,67,87],[59,93,67,91,"a"],[59,94,67,92],[59,95,67,93,"ignoreCase"],[59,105,67,103],[59,109,67,107,"b"],[59,110,67,108],[59,111,67,109,"ignoreCase"],[59,121,67,119],[60,4,68,2],[60,5,68,3],[60,6,68,4],[62,4,71,2],[62,8,71,6,"length"],[62,14,71,12],[62,17,71,15,"aStack"],[62,23,71,21],[62,24,71,22,"length"],[62,30,71,28],[63,4,73,2],[63,11,73,9,"length"],[63,17,73,15],[63,19,73,17],[63,21,73,19],[64,6,74,4],[64,10,74,8,"aStack"],[64,16,74,14],[64,17,74,15,"length"],[64,23,74,21],[64,24,74,22],[64,28,74,26,"a"],[64,29,74,27],[64,31,74,29],[65,8,75,6],[65,15,75,13,"bStack"],[65,21,75,19],[65,22,75,20,"length"],[65,28,75,26],[65,29,75,27],[65,33,75,31,"b"],[65,34,75,32],[66,6,76,4],[67,4,77,2],[68,4,79,2,"aStack"],[68,10,79,8],[68,11,79,9,"push"],[68,15,79,13],[68,16,79,14,"a"],[68,17,79,15],[68,18,79,16],[69,4,80,2,"bStack"],[69,10,80,8],[69,11,80,9,"push"],[69,15,80,13],[69,16,80,14,"b"],[69,17,80,15],[69,18,80,16],[70,4,81,2],[70,8,81,6,"size"],[70,12,81,10],[70,15,81,13],[70,16,81,14],[70,17,81,15],[70,18,81,16],[72,4,83,2],[72,8,83,6,"className"],[72,17,83,15],[72,22,83,20],[72,38,83,36],[72,40,83,38],[73,6,84,4,"size"],[73,10,84,8],[73,13,84,11,"a"],[73,14,84,12],[73,15,84,13,"length"],[73,21,84,19],[74,6,86,4],[74,10,86,8,"size"],[74,14,86,12],[74,19,86,17,"b"],[74,20,86,18],[74,21,86,19,"length"],[74,27,86,25],[74,29,86,27],[75,8,87,6],[75,15,87,13],[75,20,87,18],[76,6,88,4],[76,7,88,5],[76,8,88,6],[78,6,91,4],[78,13,91,11,"size"],[78,17,91,15],[78,19,91,17],[78,21,91,19],[79,8,92,6],[79,12,92,10],[79,13,92,11,"eq"],[79,15,92,13],[79,16,92,14,"a"],[79,17,92,15],[79,18,92,16,"size"],[79,22,92,20],[79,23,92,21],[79,25,92,23,"b"],[79,26,92,24],[79,27,92,25,"size"],[79,31,92,29],[79,32,92,30],[79,34,92,32,"aStack"],[79,40,92,38],[79,42,92,40,"bStack"],[79,48,92,46],[79,49,92,47],[79,51,92,49],[80,10,93,8],[80,17,93,15],[80,22,93,20],[81,8,94,6],[82,6,95,4],[83,4,96,2],[83,5,96,3],[83,11,96,9],[84,6,97,4],[84,10,97,8,"a"],[84,11,97,9],[84,12,97,10,"constructor"],[84,23,97,21],[84,28,97,26,"b"],[84,29,97,27],[84,30,97,28,"constructor"],[84,41,97,39],[84,43,97,41],[85,8,98,6],[85,15,98,13],[85,20,98,18],[86,6,99,4],[87,6,101,4],[87,10,101,8,"a"],[87,11,101,9],[87,12,101,10,"hasOwnProperty"],[87,26,101,24],[87,27,101,25],[87,36,101,34],[87,37,101,35],[87,41,101,39,"b"],[87,42,101,40],[87,43,101,41,"hasOwnProperty"],[87,57,101,55],[87,58,101,56],[87,67,101,65],[87,68,101,66],[87,70,101,68],[88,8,102,6],[88,15,102,13,"a"],[88,16,102,14],[88,17,102,15,"valueOf"],[88,24,102,22],[88,25,102,23],[88,26,102,24],[88,30,102,28,"b"],[88,31,102,29],[88,32,102,30,"valueOf"],[88,39,102,37],[88,40,102,38],[88,41,102,39],[89,6,103,4],[90,6,105,4],[90,10,105,8,"keys"],[90,14,105,12],[90,17,105,15,"Object"],[90,23,105,21],[90,24,105,22,"keys"],[90,28,105,26],[90,29,105,27,"a"],[90,30,105,28],[90,31,105,29],[91,6,107,4],[91,10,107,8,"keys"],[91,14,107,12],[91,15,107,13,"length"],[91,21,107,19],[91,25,107,23,"Object"],[91,31,107,29],[91,32,107,30,"keys"],[91,36,107,34],[91,37,107,35,"b"],[91,38,107,36],[91,39,107,37],[91,40,107,38,"length"],[91,46,107,44],[91,48,107,46],[92,8,108,6],[92,15,108,13],[92,20,108,18],[93,6,109,4],[94,6,111,4],[94,11,111,9],[94,15,111,13,"i"],[94,16,111,14],[94,19,111,17],[94,20,111,18],[94,22,111,20,"i"],[94,23,111,21],[94,26,111,24,"keys"],[94,30,111,28],[94,31,111,29,"length"],[94,37,111,35],[94,39,111,37,"i"],[94,40,111,38],[94,42,111,40],[94,44,111,42],[95,8,112,6],[95,12,112,10],[95,13,112,11,"eq"],[95,15,112,13],[95,16,112,14,"a"],[95,17,112,15],[95,18,112,16,"keys"],[95,22,112,20],[95,23,112,21,"i"],[95,24,112,22],[95,25,112,23],[95,26,112,24],[95,28,112,26,"b"],[95,29,112,27],[95,30,112,28,"keys"],[95,34,112,32],[95,35,112,33,"i"],[95,36,112,34],[95,37,112,35],[95,38,112,36],[95,40,112,38,"aStack"],[95,46,112,44],[95,48,112,46,"bStack"],[95,54,112,52],[95,55,112,53],[95,57,112,55],[96,10,113,8],[96,17,113,15],[96,22,113,20],[97,8,114,6],[98,6,115,4],[99,4,116,2],[100,4,118,2,"aStack"],[100,10,118,8],[100,11,118,9,"pop"],[100,14,118,12],[100,15,118,13],[100,16,118,14],[101,4,119,2,"bStack"],[101,10,119,8],[101,11,119,9,"pop"],[101,14,119,12],[101,15,119,13],[101,16,119,14],[102,4,120,2],[102,11,120,9],[102,15,120,13],[103,2,121,0],[104,2,123,0,"module"],[104,8,123,6],[104,9,123,7,"exports"],[104,16,123,14],[104,19,123,17,"areEqual"],[104,27,123,25],[105,0,123,26],[105,3]],"functionMap":{"names":["<global>","areEqual","eq"],"mappings":"AAA;ACqB;CDS;AEE;CFwF"}},"type":"js/module"}]}